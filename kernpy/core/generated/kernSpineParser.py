# Generated from kernSpineParser.g4 by ANTLR 4.13.1
# encoding: utf-8
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
	from typing import TextIO
else:
	from typing.io import TextIO

def serializedATN():
    return [
        4,1,141,1077,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,
        7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,
        13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,
        20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,
        26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,
        33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,
        39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,
        46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,52,7,
        52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,58,2,
        59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,2,64,7,64,2,65,7,
        65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,2,71,7,71,2,
        72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,2,78,7,
        78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,7,84,2,
        85,7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,2,91,7,
        91,2,92,7,92,2,93,7,93,2,94,7,94,2,95,7,95,2,96,7,96,2,97,7,97,2,
        98,7,98,2,99,7,99,2,100,7,100,2,101,7,101,2,102,7,102,2,103,7,103,
        2,104,7,104,2,105,7,105,2,106,7,106,2,107,7,107,2,108,7,108,2,109,
        7,109,2,110,7,110,2,111,7,111,2,112,7,112,2,113,7,113,2,114,7,114,
        2,115,7,115,2,116,7,116,2,117,7,117,2,118,7,118,2,119,7,119,2,120,
        7,120,2,121,7,121,2,122,7,122,2,123,7,123,2,124,7,124,2,125,7,125,
        2,126,7,126,2,127,7,127,2,128,7,128,2,129,7,129,1,0,1,0,1,1,1,1,
        1,1,1,1,1,1,1,1,1,1,1,1,3,1,271,8,1,1,2,1,2,1,2,3,2,276,8,2,1,3,
        1,3,1,4,1,4,3,4,282,8,4,1,5,1,5,1,5,1,5,3,5,288,8,5,1,6,1,6,1,6,
        3,6,293,8,6,1,7,1,7,3,7,297,8,7,1,8,5,8,300,8,8,10,8,12,8,303,9,
        8,1,8,3,8,306,8,8,1,8,1,8,5,8,310,8,8,10,8,12,8,313,9,8,1,9,1,9,
        3,9,317,8,9,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,
        10,3,10,330,8,10,1,11,1,11,3,11,334,8,11,1,11,1,11,1,11,3,11,339,
        8,11,4,11,341,8,11,11,11,12,11,342,1,12,5,12,346,8,12,10,12,12,12,
        349,9,12,1,12,3,12,352,8,12,1,12,5,12,355,8,12,10,12,12,12,358,9,
        12,1,12,1,12,5,12,362,8,12,10,12,12,12,365,9,12,1,12,3,12,368,8,
        12,1,12,5,12,371,8,12,10,12,12,12,374,9,12,1,13,1,13,1,13,1,13,1,
        13,1,13,1,13,1,13,1,13,1,13,1,13,3,13,387,8,13,1,14,1,14,1,14,1,
        14,1,14,1,14,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,16,1,16,1,
        17,1,17,1,18,1,18,1,19,1,19,1,20,5,20,412,8,20,10,20,12,20,415,9,
        20,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,3,21,426,8,21,1,
        22,1,22,1,22,5,22,431,8,22,10,22,12,22,434,9,22,1,23,1,23,1,24,1,
        24,1,25,1,25,1,26,1,26,1,27,1,27,1,28,1,28,1,29,1,29,1,30,1,30,1,
        30,1,30,1,30,3,30,455,8,30,1,31,1,31,1,32,1,32,1,33,1,33,1,34,1,
        34,3,34,465,8,34,1,34,1,34,1,34,1,34,1,34,3,34,472,8,34,1,35,1,35,
        1,35,5,35,477,8,35,10,35,12,35,480,9,35,1,36,1,36,1,36,1,36,1,36,
        1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,
        1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,
        1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,
        1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,4,36,536,8,36,
        11,36,12,36,537,1,37,1,37,1,37,3,37,543,8,37,1,37,1,37,1,37,3,37,
        548,8,37,1,37,1,37,1,38,1,38,1,39,1,39,1,40,4,40,557,8,40,11,40,
        12,40,558,1,41,1,41,1,42,1,42,1,43,1,43,1,43,1,44,1,44,1,45,1,45,
        1,46,1,46,1,47,1,47,1,47,1,48,1,48,1,48,1,49,1,49,3,49,582,8,49,
        1,49,1,49,1,49,3,49,587,8,49,1,50,1,50,1,50,1,51,1,51,3,51,594,8,
        51,1,51,3,51,597,8,51,1,52,1,52,1,53,1,53,1,54,1,54,3,54,605,8,54,
        1,54,1,54,1,54,3,54,610,8,54,1,54,3,54,613,8,54,1,55,1,55,1,55,5,
        55,618,8,55,10,55,12,55,621,9,55,1,55,1,55,3,55,625,8,55,1,56,1,
        56,1,57,1,57,1,58,1,58,1,58,3,58,634,8,58,1,59,1,59,1,59,1,59,3,
        59,640,8,59,1,60,1,60,3,60,644,8,60,1,60,1,60,3,60,648,8,60,1,60,
        3,60,651,8,60,3,60,653,8,60,1,61,1,61,3,61,657,8,61,1,62,1,62,3,
        62,661,8,62,1,63,1,63,1,63,1,63,1,63,1,63,1,63,3,63,670,8,63,1,64,
        1,64,1,64,1,64,1,65,1,65,1,65,1,65,1,66,1,66,1,66,1,66,1,67,1,67,
        1,67,1,67,1,68,1,68,1,68,1,68,1,69,1,69,1,69,1,69,1,70,1,70,1,70,
        1,70,1,71,1,71,1,71,1,71,1,71,1,71,3,71,706,8,71,1,71,1,71,3,71,
        710,8,71,1,72,1,72,1,73,1,73,1,74,1,74,1,74,1,74,1,75,1,75,1,75,
        4,75,723,8,75,11,75,12,75,724,1,75,1,75,1,75,1,76,1,76,1,76,4,76,
        733,8,76,11,76,12,76,734,1,77,1,77,1,77,4,77,740,8,77,11,77,12,77,
        741,1,78,1,78,1,78,3,78,747,8,78,1,79,1,79,1,79,1,79,1,80,1,80,1,
        80,1,80,3,80,757,8,80,1,80,1,80,1,81,1,81,1,81,3,81,764,8,81,1,82,
        4,82,767,8,82,11,82,12,82,768,1,83,1,83,1,83,1,83,3,83,775,8,83,
        1,84,1,84,1,85,1,85,3,85,781,8,85,1,85,3,85,784,8,85,1,85,3,85,787,
        8,85,1,85,3,85,790,8,85,1,85,3,85,793,8,85,1,85,3,85,796,8,85,1,
        85,3,85,799,8,85,1,85,3,85,802,8,85,1,85,3,85,805,8,85,1,85,3,85,
        808,8,85,1,86,1,86,1,86,1,86,1,86,3,86,815,8,86,1,86,1,86,1,86,1,
        86,1,86,1,86,3,86,823,8,86,1,86,1,86,1,86,1,86,1,86,1,86,3,86,831,
        8,86,1,86,1,86,1,86,1,86,1,86,1,86,1,86,3,86,840,8,86,1,87,1,87,
        1,88,1,88,5,88,846,8,88,10,88,12,88,849,9,88,1,88,1,88,3,88,853,
        8,88,1,89,1,89,1,90,1,90,1,90,3,90,860,8,90,1,91,1,91,1,92,1,92,
        3,92,866,8,92,1,93,1,93,1,94,3,94,871,8,94,1,95,1,95,3,95,875,8,
        95,1,96,1,96,1,97,1,97,1,98,1,98,1,98,3,98,884,8,98,1,98,3,98,887,
        8,98,1,99,1,99,1,99,1,99,1,99,1,99,1,99,1,99,1,99,1,99,1,99,1,99,
        1,99,1,99,1,99,1,99,1,99,1,99,1,99,1,99,1,99,1,99,1,99,1,99,1,99,
        1,99,1,99,1,99,1,99,1,99,3,99,919,8,99,1,100,1,100,3,100,923,8,100,
        1,101,1,101,1,102,1,102,3,102,929,8,102,1,103,4,103,932,8,103,11,
        103,12,103,933,1,104,4,104,937,8,104,11,104,12,104,938,1,105,1,105,
        1,105,3,105,944,8,105,3,105,946,8,105,1,105,1,105,1,105,3,105,951,
        8,105,3,105,953,8,105,1,105,3,105,956,8,105,1,106,1,106,1,106,1,
        106,1,106,1,106,1,106,1,106,3,106,966,8,106,1,106,1,106,3,106,970,
        8,106,3,106,972,8,106,1,107,1,107,1,108,1,108,1,109,1,109,1,110,
        1,110,1,110,1,110,1,110,1,110,3,110,986,8,110,1,111,1,111,1,112,
        1,112,1,113,1,113,1,114,1,114,1,115,1,115,1,116,1,116,1,117,1,117,
        5,117,1002,8,117,10,117,12,117,1005,9,117,1,117,3,117,1008,8,117,
        1,117,3,117,1011,8,117,1,118,5,118,1014,8,118,10,118,12,118,1017,
        9,118,1,118,1,118,3,118,1021,8,118,1,119,1,119,1,119,3,119,1026,
        8,119,3,119,1028,8,119,1,120,1,120,1,121,1,121,1,122,5,122,1035,
        8,122,10,122,12,122,1038,9,122,1,122,1,122,1,123,1,123,1,124,1,124,
        1,125,1,125,1,126,1,126,3,126,1050,8,126,4,126,1052,8,126,11,126,
        12,126,1053,1,127,1,127,1,127,1,127,3,127,1060,8,127,1,127,3,127,
        1063,8,127,1,128,1,128,3,128,1067,8,128,1,128,3,128,1070,8,128,1,
        129,4,129,1073,8,129,11,129,12,129,1074,1,129,0,0,130,0,2,4,6,8,
        10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,
        54,56,58,60,62,64,66,68,70,72,74,76,78,80,82,84,86,88,90,92,94,96,
        98,100,102,104,106,108,110,112,114,116,118,120,122,124,126,128,130,
        132,134,136,138,140,142,144,146,148,150,152,154,156,158,160,162,
        164,166,168,170,172,174,176,178,180,182,184,186,188,190,192,194,
        196,198,200,202,204,206,208,210,212,214,216,218,220,222,224,226,
        228,230,232,234,236,238,240,242,244,246,248,250,252,254,256,258,
        0,23,1,0,135,135,1,0,15,16,1,0,23,24,1,0,25,26,1,0,27,28,1,0,33,
        36,2,0,20,20,22,22,1,0,17,19,1,0,97,106,1,0,70,76,1,0,44,50,4,0,
        46,46,49,50,59,59,63,63,1,0,98,102,2,0,11,11,32,32,6,0,46,46,58,
        58,87,87,99,100,122,123,129,129,2,0,120,120,122,122,1,0,127,128,
        2,0,59,59,85,85,1,0,116,117,2,0,62,62,132,132,2,0,115,115,128,128,
        1,0,129,130,2,0,53,55,80,80,1203,0,260,1,0,0,0,2,270,1,0,0,0,4,275,
        1,0,0,0,6,277,1,0,0,0,8,281,1,0,0,0,10,287,1,0,0,0,12,292,1,0,0,
        0,14,296,1,0,0,0,16,301,1,0,0,0,18,314,1,0,0,0,20,329,1,0,0,0,22,
        333,1,0,0,0,24,347,1,0,0,0,26,386,1,0,0,0,28,388,1,0,0,0,30,394,
        1,0,0,0,32,402,1,0,0,0,34,404,1,0,0,0,36,406,1,0,0,0,38,408,1,0,
        0,0,40,413,1,0,0,0,42,425,1,0,0,0,44,427,1,0,0,0,46,435,1,0,0,0,
        48,437,1,0,0,0,50,439,1,0,0,0,52,441,1,0,0,0,54,443,1,0,0,0,56,445,
        1,0,0,0,58,447,1,0,0,0,60,449,1,0,0,0,62,456,1,0,0,0,64,458,1,0,
        0,0,66,460,1,0,0,0,68,462,1,0,0,0,70,473,1,0,0,0,72,535,1,0,0,0,
        74,539,1,0,0,0,76,551,1,0,0,0,78,553,1,0,0,0,80,556,1,0,0,0,82,560,
        1,0,0,0,84,562,1,0,0,0,86,564,1,0,0,0,88,567,1,0,0,0,90,569,1,0,
        0,0,92,571,1,0,0,0,94,573,1,0,0,0,96,576,1,0,0,0,98,579,1,0,0,0,
        100,588,1,0,0,0,102,591,1,0,0,0,104,598,1,0,0,0,106,600,1,0,0,0,
        108,612,1,0,0,0,110,614,1,0,0,0,112,626,1,0,0,0,114,628,1,0,0,0,
        116,633,1,0,0,0,118,635,1,0,0,0,120,641,1,0,0,0,122,654,1,0,0,0,
        124,658,1,0,0,0,126,669,1,0,0,0,128,671,1,0,0,0,130,675,1,0,0,0,
        132,679,1,0,0,0,134,683,1,0,0,0,136,687,1,0,0,0,138,691,1,0,0,0,
        140,695,1,0,0,0,142,699,1,0,0,0,144,711,1,0,0,0,146,713,1,0,0,0,
        148,715,1,0,0,0,150,719,1,0,0,0,152,729,1,0,0,0,154,736,1,0,0,0,
        156,743,1,0,0,0,158,748,1,0,0,0,160,752,1,0,0,0,162,763,1,0,0,0,
        164,766,1,0,0,0,166,770,1,0,0,0,168,776,1,0,0,0,170,778,1,0,0,0,
        172,839,1,0,0,0,174,841,1,0,0,0,176,843,1,0,0,0,178,854,1,0,0,0,
        180,856,1,0,0,0,182,861,1,0,0,0,184,863,1,0,0,0,186,867,1,0,0,0,
        188,870,1,0,0,0,190,872,1,0,0,0,192,876,1,0,0,0,194,878,1,0,0,0,
        196,883,1,0,0,0,198,918,1,0,0,0,200,920,1,0,0,0,202,924,1,0,0,0,
        204,928,1,0,0,0,206,931,1,0,0,0,208,936,1,0,0,0,210,955,1,0,0,0,
        212,971,1,0,0,0,214,973,1,0,0,0,216,975,1,0,0,0,218,977,1,0,0,0,
        220,985,1,0,0,0,222,987,1,0,0,0,224,989,1,0,0,0,226,991,1,0,0,0,
        228,993,1,0,0,0,230,995,1,0,0,0,232,997,1,0,0,0,234,1010,1,0,0,0,
        236,1015,1,0,0,0,238,1027,1,0,0,0,240,1029,1,0,0,0,242,1031,1,0,
        0,0,244,1036,1,0,0,0,246,1041,1,0,0,0,248,1043,1,0,0,0,250,1045,
        1,0,0,0,252,1051,1,0,0,0,254,1062,1,0,0,0,256,1069,1,0,0,0,258,1072,
        1,0,0,0,260,261,3,2,1,0,261,1,1,0,0,0,262,271,3,4,2,0,263,271,3,
        6,3,0,264,271,3,8,4,0,265,271,3,170,85,0,266,271,3,14,7,0,267,271,
        3,42,21,0,268,271,3,26,13,0,269,271,3,28,14,0,270,262,1,0,0,0,270,
        263,1,0,0,0,270,264,1,0,0,0,270,265,1,0,0,0,270,266,1,0,0,0,270,
        267,1,0,0,0,270,268,1,0,0,0,270,269,1,0,0,0,271,3,1,0,0,0,272,276,
        3,24,12,0,273,276,3,16,8,0,274,276,3,22,11,0,275,272,1,0,0,0,275,
        273,1,0,0,0,275,274,1,0,0,0,276,5,1,0,0,0,277,278,3,98,49,0,278,
        7,1,0,0,0,279,282,3,10,5,0,280,282,3,12,6,0,281,279,1,0,0,0,281,
        280,1,0,0,0,282,9,1,0,0,0,283,288,3,100,50,0,284,288,3,142,71,0,
        285,288,3,160,80,0,286,288,3,110,55,0,287,283,1,0,0,0,287,284,1,
        0,0,0,287,285,1,0,0,0,287,286,1,0,0,0,288,11,1,0,0,0,289,293,3,48,
        24,0,290,293,3,118,59,0,291,293,3,166,83,0,292,289,1,0,0,0,292,290,
        1,0,0,0,292,291,1,0,0,0,293,13,1,0,0,0,294,297,3,168,84,0,295,297,
        3,46,23,0,296,294,1,0,0,0,296,295,1,0,0,0,297,15,1,0,0,0,298,300,
        3,20,10,0,299,298,1,0,0,0,300,303,1,0,0,0,301,299,1,0,0,0,301,302,
        1,0,0,0,302,305,1,0,0,0,303,301,1,0,0,0,304,306,3,176,88,0,305,304,
        1,0,0,0,305,306,1,0,0,0,306,307,1,0,0,0,307,311,3,18,9,0,308,310,
        3,20,10,0,309,308,1,0,0,0,310,313,1,0,0,0,311,309,1,0,0,0,311,312,
        1,0,0,0,312,17,1,0,0,0,313,311,1,0,0,0,314,316,5,87,0,0,315,317,
        5,87,0,0,316,315,1,0,0,0,316,317,1,0,0,0,317,19,1,0,0,0,318,330,
        3,236,118,0,319,330,3,190,95,0,320,330,3,186,93,0,321,330,3,174,
        87,0,322,330,3,178,89,0,323,330,3,234,117,0,324,330,3,244,122,0,
        325,330,3,232,116,0,326,330,3,202,101,0,327,330,3,182,91,0,328,330,
        5,79,0,0,329,318,1,0,0,0,329,319,1,0,0,0,329,320,1,0,0,0,329,321,
        1,0,0,0,329,322,1,0,0,0,329,323,1,0,0,0,329,324,1,0,0,0,329,325,
        1,0,0,0,329,326,1,0,0,0,329,327,1,0,0,0,329,328,1,0,0,0,330,21,1,
        0,0,0,331,334,3,24,12,0,332,334,3,16,8,0,333,331,1,0,0,0,333,332,
        1,0,0,0,334,340,1,0,0,0,335,338,3,188,94,0,336,339,3,24,12,0,337,
        339,3,16,8,0,338,336,1,0,0,0,338,337,1,0,0,0,339,341,1,0,0,0,340,
        335,1,0,0,0,341,342,1,0,0,0,342,340,1,0,0,0,342,343,1,0,0,0,343,
        23,1,0,0,0,344,346,3,198,99,0,345,344,1,0,0,0,346,349,1,0,0,0,347,
        345,1,0,0,0,347,348,1,0,0,0,348,351,1,0,0,0,349,347,1,0,0,0,350,
        352,3,176,88,0,351,350,1,0,0,0,351,352,1,0,0,0,352,356,1,0,0,0,353,
        355,3,198,99,0,354,353,1,0,0,0,355,358,1,0,0,0,356,354,1,0,0,0,356,
        357,1,0,0,0,357,359,1,0,0,0,358,356,1,0,0,0,359,363,3,204,102,0,
        360,362,3,198,99,0,361,360,1,0,0,0,362,365,1,0,0,0,363,361,1,0,0,
        0,363,364,1,0,0,0,364,367,1,0,0,0,365,363,1,0,0,0,366,368,3,184,
        92,0,367,366,1,0,0,0,367,368,1,0,0,0,368,372,1,0,0,0,369,371,3,198,
        99,0,370,369,1,0,0,0,371,374,1,0,0,0,372,370,1,0,0,0,372,373,1,0,
        0,0,373,25,1,0,0,0,374,372,1,0,0,0,375,387,3,94,47,0,376,387,3,90,
        45,0,377,387,3,88,44,0,378,387,3,92,46,0,379,387,3,96,48,0,380,387,
        3,76,38,0,381,387,3,78,39,0,382,387,3,74,37,0,383,387,3,68,34,0,
        384,387,3,50,25,0,385,387,3,58,29,0,386,375,1,0,0,0,386,376,1,0,
        0,0,386,377,1,0,0,0,386,378,1,0,0,0,386,379,1,0,0,0,386,380,1,0,
        0,0,386,381,1,0,0,0,386,382,1,0,0,0,386,383,1,0,0,0,386,384,1,0,
        0,0,386,385,1,0,0,0,387,27,1,0,0,0,388,389,5,38,0,0,389,390,5,120,
        0,0,390,391,3,40,20,0,391,392,5,135,0,0,392,393,3,30,15,0,393,29,
        1,0,0,0,394,395,3,32,16,0,395,396,5,137,0,0,396,397,3,34,17,0,397,
        398,5,137,0,0,398,399,3,36,18,0,399,400,5,137,0,0,400,401,3,38,19,
        0,401,31,1,0,0,0,402,403,3,80,40,0,403,33,1,0,0,0,404,405,3,80,40,
        0,405,35,1,0,0,0,406,407,3,80,40,0,407,37,1,0,0,0,408,409,3,80,40,
        0,409,39,1,0,0,0,410,412,8,0,0,0,411,410,1,0,0,0,412,415,1,0,0,0,
        413,411,1,0,0,0,413,414,1,0,0,0,414,41,1,0,0,0,415,413,1,0,0,0,416,
        426,3,66,33,0,417,426,3,54,27,0,418,426,3,56,28,0,419,426,3,60,30,
        0,420,426,3,62,31,0,421,426,3,64,32,0,422,426,3,52,26,0,423,426,
        5,29,0,0,424,426,5,30,0,0,425,416,1,0,0,0,425,417,1,0,0,0,425,418,
        1,0,0,0,425,419,1,0,0,0,425,420,1,0,0,0,425,421,1,0,0,0,425,422,
        1,0,0,0,425,423,1,0,0,0,425,424,1,0,0,0,426,43,1,0,0,0,427,432,3,
        80,40,0,428,429,5,137,0,0,429,431,3,44,22,0,430,428,1,0,0,0,431,
        434,1,0,0,0,432,430,1,0,0,0,432,433,1,0,0,0,433,45,1,0,0,0,434,432,
        1,0,0,0,435,436,5,122,0,0,436,47,1,0,0,0,437,438,5,39,0,0,438,49,
        1,0,0,0,439,440,7,1,0,0,440,51,1,0,0,0,441,442,7,2,0,0,442,53,1,
        0,0,0,443,444,7,3,0,0,444,55,1,0,0,0,445,446,7,4,0,0,446,57,1,0,
        0,0,447,448,7,5,0,0,448,59,1,0,0,0,449,450,5,31,0,0,450,451,5,135,
        0,0,451,454,3,80,40,0,452,453,5,129,0,0,453,455,3,80,40,0,454,452,
        1,0,0,0,454,455,1,0,0,0,455,61,1,0,0,0,456,457,7,6,0,0,457,63,1,
        0,0,0,458,459,5,21,0,0,459,65,1,0,0,0,460,461,7,7,0,0,461,67,1,0,
        0,0,462,471,5,13,0,0,463,465,5,14,0,0,464,463,1,0,0,0,464,465,1,
        0,0,0,465,466,1,0,0,0,466,467,5,114,0,0,467,468,3,70,35,0,468,469,
        5,115,0,0,469,472,1,0,0,0,470,472,3,72,36,0,471,464,1,0,0,0,471,
        470,1,0,0,0,472,69,1,0,0,0,473,478,3,72,36,0,474,475,5,137,0,0,475,
        477,3,72,36,0,476,474,1,0,0,0,477,480,1,0,0,0,478,476,1,0,0,0,478,
        479,1,0,0,0,479,71,1,0,0,0,480,478,1,0,0,0,481,536,5,44,0,0,482,
        536,5,45,0,0,483,536,5,46,0,0,484,536,5,47,0,0,485,536,5,48,0,0,
        486,536,5,49,0,0,487,536,5,50,0,0,488,536,5,51,0,0,489,536,5,52,
        0,0,490,536,5,53,0,0,491,536,5,54,0,0,492,536,5,55,0,0,493,536,5,
        56,0,0,494,536,5,57,0,0,495,536,5,58,0,0,496,536,5,59,0,0,497,536,
        5,60,0,0,498,536,5,61,0,0,499,536,5,62,0,0,500,536,5,63,0,0,501,
        536,5,64,0,0,502,536,5,65,0,0,503,536,5,66,0,0,504,536,5,67,0,0,
        505,536,5,68,0,0,506,536,5,69,0,0,507,536,5,70,0,0,508,536,5,71,
        0,0,509,536,5,72,0,0,510,536,5,73,0,0,511,536,5,74,0,0,512,536,5,
        75,0,0,513,536,5,76,0,0,514,536,5,77,0,0,515,536,5,78,0,0,516,536,
        5,79,0,0,517,536,5,80,0,0,518,536,5,81,0,0,519,536,5,82,0,0,520,
        536,5,83,0,0,521,536,5,84,0,0,522,536,5,85,0,0,523,536,5,86,0,0,
        524,536,5,87,0,0,525,536,5,88,0,0,526,536,5,89,0,0,527,536,5,90,
        0,0,528,536,5,91,0,0,529,536,5,92,0,0,530,536,5,93,0,0,531,536,5,
        94,0,0,532,536,5,95,0,0,533,536,5,139,0,0,534,536,3,80,40,0,535,
        481,1,0,0,0,535,482,1,0,0,0,535,483,1,0,0,0,535,484,1,0,0,0,535,
        485,1,0,0,0,535,486,1,0,0,0,535,487,1,0,0,0,535,488,1,0,0,0,535,
        489,1,0,0,0,535,490,1,0,0,0,535,491,1,0,0,0,535,492,1,0,0,0,535,
        493,1,0,0,0,535,494,1,0,0,0,535,495,1,0,0,0,535,496,1,0,0,0,535,
        497,1,0,0,0,535,498,1,0,0,0,535,499,1,0,0,0,535,500,1,0,0,0,535,
        501,1,0,0,0,535,502,1,0,0,0,535,503,1,0,0,0,535,504,1,0,0,0,535,
        505,1,0,0,0,535,506,1,0,0,0,535,507,1,0,0,0,535,508,1,0,0,0,535,
        509,1,0,0,0,535,510,1,0,0,0,535,511,1,0,0,0,535,512,1,0,0,0,535,
        513,1,0,0,0,535,514,1,0,0,0,535,515,1,0,0,0,535,516,1,0,0,0,535,
        517,1,0,0,0,535,518,1,0,0,0,535,519,1,0,0,0,535,520,1,0,0,0,535,
        521,1,0,0,0,535,522,1,0,0,0,535,523,1,0,0,0,535,524,1,0,0,0,535,
        525,1,0,0,0,535,526,1,0,0,0,535,527,1,0,0,0,535,528,1,0,0,0,535,
        529,1,0,0,0,535,530,1,0,0,0,535,531,1,0,0,0,535,532,1,0,0,0,535,
        533,1,0,0,0,535,534,1,0,0,0,536,537,1,0,0,0,537,535,1,0,0,0,537,
        538,1,0,0,0,538,73,1,0,0,0,539,540,5,8,0,0,540,542,5,73,0,0,541,
        543,5,120,0,0,542,541,1,0,0,0,542,543,1,0,0,0,543,544,1,0,0,0,544,
        545,3,80,40,0,545,547,5,72,0,0,546,548,5,120,0,0,547,546,1,0,0,0,
        547,548,1,0,0,0,548,549,1,0,0,0,549,550,3,80,40,0,550,75,1,0,0,0,
        551,552,5,141,0,0,552,77,1,0,0,0,553,554,5,140,0,0,554,79,1,0,0,
        0,555,557,7,8,0,0,556,555,1,0,0,0,557,558,1,0,0,0,558,556,1,0,0,
        0,558,559,1,0,0,0,559,81,1,0,0,0,560,561,7,9,0,0,561,83,1,0,0,0,
        562,563,7,10,0,0,563,85,1,0,0,0,564,565,3,82,41,0,565,566,3,210,
        105,0,566,87,1,0,0,0,567,568,5,4,0,0,568,89,1,0,0,0,569,570,5,5,
        0,0,570,91,1,0,0,0,571,572,5,6,0,0,572,93,1,0,0,0,573,574,5,37,0,
        0,574,575,3,80,40,0,575,95,1,0,0,0,576,577,5,3,0,0,577,578,3,80,
        40,0,578,97,1,0,0,0,579,581,5,7,0,0,580,582,5,119,0,0,581,580,1,
        0,0,0,581,582,1,0,0,0,582,583,1,0,0,0,583,586,3,80,40,0,584,585,
        5,129,0,0,585,587,3,80,40,0,586,584,1,0,0,0,586,587,1,0,0,0,587,
        99,1,0,0,0,588,589,5,9,0,0,589,590,3,102,51,0,590,101,1,0,0,0,591,
        593,3,104,52,0,592,594,3,106,53,0,593,592,1,0,0,0,593,594,1,0,0,
        0,594,596,1,0,0,0,595,597,3,108,54,0,596,595,1,0,0,0,596,597,1,0,
        0,0,597,103,1,0,0,0,598,599,7,11,0,0,599,105,1,0,0,0,600,601,7,12,
        0,0,601,107,1,0,0,0,602,604,5,91,0,0,603,605,5,91,0,0,604,603,1,
        0,0,0,604,605,1,0,0,0,605,606,1,0,0,0,606,613,5,99,0,0,607,609,5,
        125,0,0,608,610,5,125,0,0,609,608,1,0,0,0,609,610,1,0,0,0,610,611,
        1,0,0,0,611,613,5,99,0,0,612,602,1,0,0,0,612,607,1,0,0,0,613,109,
        1,0,0,0,614,615,5,10,0,0,615,619,5,114,0,0,616,618,3,112,56,0,617,
        616,1,0,0,0,618,621,1,0,0,0,619,617,1,0,0,0,619,620,1,0,0,0,620,
        622,1,0,0,0,621,619,1,0,0,0,622,624,5,115,0,0,623,625,3,114,57,0,
        624,623,1,0,0,0,624,625,1,0,0,0,625,111,1,0,0,0,626,627,3,86,43,
        0,627,113,1,0,0,0,628,629,5,67,0,0,629,115,1,0,0,0,630,634,3,122,
        61,0,631,634,3,124,62,0,632,634,5,138,0,0,633,630,1,0,0,0,633,631,
        1,0,0,0,633,632,1,0,0,0,634,117,1,0,0,0,635,636,5,111,0,0,636,639,
        3,120,60,0,637,638,5,129,0,0,638,640,3,120,60,0,639,637,1,0,0,0,
        639,640,1,0,0,0,640,119,1,0,0,0,641,643,3,116,58,0,642,644,3,114,
        57,0,643,642,1,0,0,0,643,644,1,0,0,0,644,652,1,0,0,0,645,647,5,135,
        0,0,646,648,3,126,63,0,647,646,1,0,0,0,647,648,1,0,0,0,648,653,1,
        0,0,0,649,651,3,80,40,0,650,649,1,0,0,0,650,651,1,0,0,0,651,653,
        1,0,0,0,652,645,1,0,0,0,652,650,1,0,0,0,653,121,1,0,0,0,654,656,
        3,82,41,0,655,657,3,210,105,0,656,655,1,0,0,0,656,657,1,0,0,0,657,
        123,1,0,0,0,658,660,3,84,42,0,659,661,3,210,105,0,660,659,1,0,0,
        0,660,661,1,0,0,0,661,125,1,0,0,0,662,670,3,140,70,0,663,670,3,138,
        69,0,664,670,3,136,68,0,665,670,3,134,67,0,666,670,3,132,66,0,667,
        670,3,130,65,0,668,670,3,128,64,0,669,662,1,0,0,0,669,663,1,0,0,
        0,669,664,1,0,0,0,669,665,1,0,0,0,669,666,1,0,0,0,669,667,1,0,0,
        0,669,668,1,0,0,0,670,127,1,0,0,0,671,672,5,81,0,0,672,673,5,84,
        0,0,673,674,5,72,0,0,674,129,1,0,0,0,675,676,5,78,0,0,676,677,5,
        84,0,0,677,678,5,83,0,0,678,131,1,0,0,0,679,680,5,70,0,0,680,681,
        5,74,0,0,681,682,5,84,0,0,682,133,1,0,0,0,683,684,5,82,0,0,684,685,
        5,78,0,0,685,686,5,93,0,0,686,135,1,0,0,0,687,688,5,81,0,0,688,689,
        5,94,0,0,689,690,5,73,0,0,690,137,1,0,0,0,691,692,5,85,0,0,692,693,
        5,77,0,0,693,694,5,87,0,0,694,139,1,0,0,0,695,696,5,73,0,0,696,697,
        5,84,0,0,697,698,5,87,0,0,698,141,1,0,0,0,699,705,5,32,0,0,700,706,
        3,148,74,0,701,706,3,150,75,0,702,706,3,152,76,0,703,706,3,154,77,
        0,704,706,3,158,79,0,705,700,1,0,0,0,705,701,1,0,0,0,705,702,1,0,
        0,0,705,703,1,0,0,0,705,704,1,0,0,0,706,709,1,0,0,0,707,708,5,41,
        0,0,708,710,5,99,0,0,709,707,1,0,0,0,709,710,1,0,0,0,710,143,1,0,
        0,0,711,712,3,80,40,0,712,145,1,0,0,0,713,714,3,80,40,0,714,147,
        1,0,0,0,715,716,3,144,72,0,716,717,5,129,0,0,717,718,3,146,73,0,
        718,149,1,0,0,0,719,722,3,144,72,0,720,721,5,119,0,0,721,723,3,144,
        72,0,722,720,1,0,0,0,723,724,1,0,0,0,724,722,1,0,0,0,724,725,1,0,
        0,0,725,726,1,0,0,0,726,727,5,129,0,0,727,728,3,146,73,0,728,151,
        1,0,0,0,729,732,3,148,74,0,730,731,5,119,0,0,731,733,3,148,74,0,
        732,730,1,0,0,0,733,734,1,0,0,0,734,732,1,0,0,0,734,735,1,0,0,0,
        735,153,1,0,0,0,736,739,3,156,78,0,737,738,5,135,0,0,738,740,3,156,
        78,0,739,737,1,0,0,0,740,741,1,0,0,0,741,739,1,0,0,0,741,742,1,0,
        0,0,742,155,1,0,0,0,743,746,3,148,74,0,744,745,5,136,0,0,745,747,
        3,80,40,0,746,744,1,0,0,0,746,747,1,0,0,0,747,157,1,0,0,0,748,749,
        3,148,74,0,749,750,5,123,0,0,750,751,3,148,74,0,751,159,1,0,0,0,
        752,753,7,13,0,0,753,756,5,133,0,0,754,757,3,162,81,0,755,757,3,
        164,82,0,756,754,1,0,0,0,756,755,1,0,0,0,757,758,1,0,0,0,758,759,
        5,134,0,0,759,161,1,0,0,0,760,764,5,72,0,0,761,762,5,72,0,0,762,
        764,5,123,0,0,763,760,1,0,0,0,763,761,1,0,0,0,764,163,1,0,0,0,765,
        767,7,14,0,0,766,765,1,0,0,0,767,768,1,0,0,0,768,766,1,0,0,0,768,
        769,1,0,0,0,769,165,1,0,0,0,770,771,5,12,0,0,771,774,3,80,40,0,772,
        773,7,15,0,0,773,775,3,80,40,0,774,772,1,0,0,0,774,775,1,0,0,0,775,
        167,1,0,0,0,776,777,5,111,0,0,777,169,1,0,0,0,778,780,5,121,0,0,
        779,781,5,121,0,0,780,779,1,0,0,0,780,781,1,0,0,0,781,783,1,0,0,
        0,782,784,3,80,40,0,783,782,1,0,0,0,783,784,1,0,0,0,784,786,1,0,
        0,0,785,787,5,70,0,0,786,785,1,0,0,0,786,787,1,0,0,0,787,789,1,0,
        0,0,788,790,5,71,0,0,789,788,1,0,0,0,789,790,1,0,0,0,790,792,1,0,
        0,0,791,793,5,120,0,0,792,791,1,0,0,0,792,793,1,0,0,0,793,795,1,
        0,0,0,794,796,3,172,86,0,795,794,1,0,0,0,795,796,1,0,0,0,796,798,
        1,0,0,0,797,799,3,178,89,0,798,797,1,0,0,0,798,799,1,0,0,0,799,801,
        1,0,0,0,800,802,5,79,0,0,801,800,1,0,0,0,801,802,1,0,0,0,802,804,
        1,0,0,0,803,805,5,122,0,0,804,803,1,0,0,0,804,805,1,0,0,0,805,807,
        1,0,0,0,806,808,3,258,129,0,807,806,1,0,0,0,807,808,1,0,0,0,808,
        171,1,0,0,0,809,810,5,123,0,0,810,840,5,123,0,0,811,812,5,123,0,
        0,812,814,5,40,0,0,813,815,5,135,0,0,814,813,1,0,0,0,814,815,1,0,
        0,0,815,840,1,0,0,0,816,817,5,123,0,0,817,840,5,135,0,0,818,819,
        5,40,0,0,819,820,5,123,0,0,820,840,5,135,0,0,821,823,5,121,0,0,822,
        821,1,0,0,0,822,823,1,0,0,0,823,824,1,0,0,0,824,825,5,135,0,0,825,
        826,5,123,0,0,826,840,5,40,0,0,827,828,5,135,0,0,828,830,5,123,0,
        0,829,831,5,40,0,0,830,829,1,0,0,0,830,831,1,0,0,0,831,832,1,0,0,
        0,832,833,5,123,0,0,833,840,5,135,0,0,834,835,5,135,0,0,835,836,
        5,40,0,0,836,837,5,40,0,0,837,840,5,135,0,0,838,840,5,121,0,0,839,
        809,1,0,0,0,839,811,1,0,0,0,839,816,1,0,0,0,839,818,1,0,0,0,839,
        822,1,0,0,0,839,827,1,0,0,0,839,834,1,0,0,0,839,838,1,0,0,0,840,
        173,1,0,0,0,841,842,3,204,102,0,842,175,1,0,0,0,843,847,3,180,90,
        0,844,846,3,182,91,0,845,844,1,0,0,0,846,849,1,0,0,0,847,845,1,0,
        0,0,847,848,1,0,0,0,848,852,1,0,0,0,849,847,1,0,0,0,850,853,3,190,
        95,0,851,853,3,192,96,0,852,850,1,0,0,0,852,851,1,0,0,0,852,853,
        1,0,0,0,853,177,1,0,0,0,854,855,5,136,0,0,855,179,1,0,0,0,856,859,
        3,80,40,0,857,858,5,41,0,0,858,860,3,80,40,0,859,857,1,0,0,0,859,
        860,1,0,0,0,860,181,1,0,0,0,861,862,5,122,0,0,862,183,1,0,0,0,863,
        865,3,210,105,0,864,866,3,212,106,0,865,864,1,0,0,0,865,866,1,0,
        0,0,866,185,1,0,0,0,867,868,7,16,0,0,868,187,1,0,0,0,869,871,5,139,
        0,0,870,869,1,0,0,0,870,871,1,0,0,0,871,189,1,0,0,0,872,874,5,86,
        0,0,873,875,5,86,0,0,874,873,1,0,0,0,874,875,1,0,0,0,875,191,1,0,
        0,0,876,877,3,194,97,0,877,193,1,0,0,0,878,879,7,17,0,0,879,195,
        1,0,0,0,880,884,3,238,119,0,881,884,3,242,121,0,882,884,3,240,120,
        0,883,880,1,0,0,0,883,881,1,0,0,0,883,882,1,0,0,0,884,886,1,0,0,
        0,885,887,3,186,93,0,886,885,1,0,0,0,886,887,1,0,0,0,887,197,1,0,
        0,0,888,919,3,222,111,0,889,919,3,192,96,0,890,919,3,220,110,0,891,
        919,3,246,123,0,892,919,3,248,124,0,893,919,3,252,126,0,894,919,
        3,234,117,0,895,919,3,178,89,0,896,919,3,258,129,0,897,919,3,218,
        109,0,898,919,3,190,95,0,899,919,3,196,98,0,900,919,3,254,127,0,
        901,919,3,182,91,0,902,919,3,202,101,0,903,919,3,236,118,0,904,919,
        3,244,122,0,905,919,3,186,93,0,906,919,3,250,125,0,907,919,3,214,
        107,0,908,919,3,256,128,0,909,919,3,216,108,0,910,919,5,57,0,0,911,
        919,5,79,0,0,912,919,5,67,0,0,913,919,5,69,0,0,914,919,5,58,0,0,
        915,919,5,81,0,0,916,919,5,65,0,0,917,919,3,200,100,0,918,888,1,
        0,0,0,918,889,1,0,0,0,918,890,1,0,0,0,918,891,1,0,0,0,918,892,1,
        0,0,0,918,893,1,0,0,0,918,894,1,0,0,0,918,895,1,0,0,0,918,896,1,
        0,0,0,918,897,1,0,0,0,918,898,1,0,0,0,918,899,1,0,0,0,918,900,1,
        0,0,0,918,901,1,0,0,0,918,902,1,0,0,0,918,903,1,0,0,0,918,904,1,
        0,0,0,918,905,1,0,0,0,918,906,1,0,0,0,918,907,1,0,0,0,918,908,1,
        0,0,0,918,909,1,0,0,0,918,910,1,0,0,0,918,911,1,0,0,0,918,912,1,
        0,0,0,918,913,1,0,0,0,918,914,1,0,0,0,918,915,1,0,0,0,918,916,1,
        0,0,0,918,917,1,0,0,0,919,199,1,0,0,0,920,922,5,93,0,0,921,923,5,
        93,0,0,922,921,1,0,0,0,922,923,1,0,0,0,923,201,1,0,0,0,924,925,7,
        18,0,0,925,203,1,0,0,0,926,929,3,208,104,0,927,929,3,206,103,0,928,
        926,1,0,0,0,928,927,1,0,0,0,929,205,1,0,0,0,930,932,3,82,41,0,931,
        930,1,0,0,0,932,933,1,0,0,0,933,931,1,0,0,0,933,934,1,0,0,0,934,
        207,1,0,0,0,935,937,3,84,42,0,936,935,1,0,0,0,937,938,1,0,0,0,938,
        936,1,0,0,0,938,939,1,0,0,0,939,209,1,0,0,0,940,945,5,118,0,0,941,
        943,5,118,0,0,942,944,5,118,0,0,943,942,1,0,0,0,943,944,1,0,0,0,
        944,946,1,0,0,0,945,941,1,0,0,0,945,946,1,0,0,0,946,956,1,0,0,0,
        947,952,5,120,0,0,948,950,5,120,0,0,949,951,5,120,0,0,950,949,1,
        0,0,0,950,951,1,0,0,0,951,953,1,0,0,0,952,948,1,0,0,0,952,953,1,
        0,0,0,953,956,1,0,0,0,954,956,5,83,0,0,955,940,1,0,0,0,955,947,1,
        0,0,0,955,954,1,0,0,0,956,211,1,0,0,0,957,972,5,93,0,0,958,972,5,
        67,0,0,959,972,5,78,0,0,960,972,5,52,0,0,961,972,5,79,0,0,962,972,
        5,69,0,0,963,965,5,94,0,0,964,966,5,94,0,0,965,964,1,0,0,0,965,966,
        1,0,0,0,966,972,1,0,0,0,967,969,5,68,0,0,968,970,5,68,0,0,969,968,
        1,0,0,0,969,970,1,0,0,0,970,972,1,0,0,0,971,957,1,0,0,0,971,958,
        1,0,0,0,971,959,1,0,0,0,971,960,1,0,0,0,971,961,1,0,0,0,971,962,
        1,0,0,0,971,963,1,0,0,0,971,967,1,0,0,0,972,213,1,0,0,0,973,974,
        7,19,0,0,974,215,1,0,0,0,975,976,5,78,0,0,976,217,1,0,0,0,977,978,
        5,135,0,0,978,219,1,0,0,0,979,986,3,232,116,0,980,986,3,230,115,
        0,981,986,3,228,114,0,982,986,3,226,113,0,983,986,3,224,112,0,984,
        986,3,222,111,0,985,979,1,0,0,0,985,980,1,0,0,0,985,981,1,0,0,0,
        985,982,1,0,0,0,985,983,1,0,0,0,985,984,1,0,0,0,986,221,1,0,0,0,
        987,988,5,125,0,0,988,223,1,0,0,0,989,990,5,126,0,0,990,225,1,0,
        0,0,991,992,5,124,0,0,992,227,1,0,0,0,993,994,5,112,0,0,994,229,
        1,0,0,0,995,996,5,88,0,0,996,231,1,0,0,0,997,998,5,113,0,0,998,233,
        1,0,0,0,999,1003,5,94,0,0,1000,1002,5,94,0,0,1001,1000,1,0,0,0,1002,
        1005,1,0,0,0,1003,1001,1,0,0,0,1003,1004,1,0,0,0,1004,1007,1,0,0,
        0,1005,1003,1,0,0,0,1006,1008,5,43,0,0,1007,1006,1,0,0,0,1007,1008,
        1,0,0,0,1008,1011,1,0,0,0,1009,1011,5,67,0,0,1010,999,1,0,0,0,1010,
        1009,1,0,0,0,1011,235,1,0,0,0,1012,1014,5,42,0,0,1013,1012,1,0,0,
        0,1014,1017,1,0,0,0,1015,1013,1,0,0,0,1015,1016,1,0,0,0,1016,1018,
        1,0,0,0,1017,1015,1,0,0,0,1018,1020,5,133,0,0,1019,1021,3,186,93,
        0,1020,1019,1,0,0,0,1020,1021,1,0,0,0,1021,237,1,0,0,0,1022,1028,
        5,127,0,0,1023,1025,5,114,0,0,1024,1026,5,94,0,0,1025,1024,1,0,0,
        0,1025,1026,1,0,0,0,1026,1028,1,0,0,0,1027,1022,1,0,0,0,1027,1023,
        1,0,0,0,1028,239,1,0,0,0,1029,1030,5,131,0,0,1030,241,1,0,0,0,1031,
        1032,7,20,0,0,1032,243,1,0,0,0,1033,1035,5,42,0,0,1034,1033,1,0,
        0,0,1035,1038,1,0,0,0,1036,1034,1,0,0,0,1036,1037,1,0,0,0,1037,1039,
        1,0,0,0,1038,1036,1,0,0,0,1039,1040,5,134,0,0,1040,245,1,0,0,0,1041,
        1042,5,63,0,0,1042,247,1,0,0,0,1043,1044,5,89,0,0,1044,249,1,0,0,
        0,1045,1046,7,21,0,0,1046,251,1,0,0,0,1047,1049,7,22,0,0,1048,1050,
        3,186,93,0,1049,1048,1,0,0,0,1049,1050,1,0,0,0,1050,1052,1,0,0,0,
        1051,1047,1,0,0,0,1052,1053,1,0,0,0,1053,1051,1,0,0,0,1053,1054,
        1,0,0,0,1054,253,1,0,0,0,1055,1063,5,56,0,0,1056,1063,5,82,0,0,1057,
        1059,5,66,0,0,1058,1060,5,92,0,0,1059,1058,1,0,0,0,1059,1060,1,0,
        0,0,1060,1063,1,0,0,0,1061,1063,5,92,0,0,1062,1055,1,0,0,0,1062,
        1056,1,0,0,0,1062,1057,1,0,0,0,1062,1061,1,0,0,0,1063,255,1,0,0,
        0,1064,1066,5,63,0,0,1065,1067,5,63,0,0,1066,1065,1,0,0,0,1066,1067,
        1,0,0,0,1067,1070,1,0,0,0,1068,1070,5,89,0,0,1069,1064,1,0,0,0,1069,
        1068,1,0,0,0,1070,257,1,0,0,0,1071,1073,5,138,0,0,1072,1071,1,0,
        0,0,1073,1074,1,0,0,0,1074,1072,1,0,0,0,1074,1075,1,0,0,0,1075,259,
        1,0,0,0,112,270,275,281,287,292,296,301,305,311,316,329,333,338,
        342,347,351,356,363,367,372,386,413,425,432,454,464,471,478,535,
        537,542,547,558,581,586,593,596,604,609,612,619,624,633,639,643,
        647,650,652,656,660,669,705,709,724,734,741,746,756,763,768,774,
        780,783,786,789,792,795,798,801,804,807,814,822,830,839,847,852,
        859,865,870,874,883,886,918,922,928,933,938,943,945,950,952,955,
        965,969,971,985,1003,1007,1010,1015,1020,1025,1027,1036,1049,1053,
        1059,1062,1066,1069,1074
    ]

class kernSpineParser ( Parser ):

    grammarFileName = "kernSpineParser.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "'norep'", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "'!'", "'%'", 
                     "'&'", "'@'", "'A'", "'B'", "'C'", "'D'", "'E'", "'F'", 
                     "'G'", "'H'", "'I'", "'J'", "'K'", "'L'", "'M'", "'N'", 
                     "'O'", "'P'", "'Q'", "'R'", "'S'", "'T'", "'U'", "'V'", 
                     "'W'", "'X'", "'Y'", "'Z'", "'a'", "'b'", "'c'", "'d'", 
                     "'e'", "'f'", "'g'", "'h'", "'i'", "'j'", "'k'", "'l'", 
                     "'m'", "'n'", "'o'", "'p'", "'q'", "'r'", "'s'", "'t'", 
                     "'u'", "'v'", "'w'", "'x'", "'y'", "'z'", "<INVALID>", 
                     "'0'", "'1'", "'2'", "'3'", "'4'", "'5'", "'6'", "'7'", 
                     "'8'", "'9'", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "'\"'", "'''", "'['", "']'", 
                     "'{'", "'}'", "'#'", "'+'", "'-'", "'='", "'.'", "'|'", 
                     "'`'", "'^'", "'~'", "'<'", "'>'", "'/'", "'\\'", "'_'", 
                     "'$'", "'('", "')'", "':'", "';'", "','", "'?'", "' '" ]

    symbolicNames = [ "<INVALID>", "TANDEM_COL_START", "TANDEM_COL_END", 
                      "TANDEM_PART", "TANDEM_ACCOMP", "TANDEM_SOLO", "TANDEM_STROPHE", 
                      "TANDEM_STAFF", "TANDEM_TRANSPOSITION", "TANDEM_CLEF", 
                      "TANDEM_KEY_SIGNATURE", "TANDEM_MET", "METRONOME", 
                      "TANDEM_SECTION", "NO_REPEAT", "TANDEM_LEFT_HAND", 
                      "TANDEM_RIGHT_HAND", "TANDEM_ABOVE", "TANDEM_BELOW", 
                      "TANDEM_CENTERED", "TANDEM_PEDAL_START", "TANDEM_ELA", 
                      "TANDEM_PEDAL_END", "TANDEM_TUPLET_START", "TANDEM_TUPLET_END", 
                      "TANDEM_CUE_START", "TANDEM_CUE_END", "TANDEM_TREMOLO_START", 
                      "TANDEM_TREMOLO_END", "TANDEM_TSTART", "TANDEM_TEND", 
                      "TANDEM_RSCALE", "TANDEM_TIMESIGNATURE", "TANDEM_SIC", 
                      "TANDEM_OSSIA", "TANDEM_FIN", "TANDEM_SMINUS", "TANDEM_TIMEBASE", 
                      "TANDEM_BOUNDING_BOX", "OCTAVE_SHIFT", "EXCLAMATION", 
                      "PERCENT", "AMPERSAND", "AT", "CHAR_A", "CHAR_B", 
                      "CHAR_C", "CHAR_D", "CHAR_E", "CHAR_F", "CHAR_G", 
                      "CHAR_H", "CHAR_I", "CHAR_J", "CHAR_K", "CHAR_L", 
                      "CHAR_M", "CHAR_N", "CHAR_O", "CHAR_P", "CHAR_Q", 
                      "CHAR_R", "CHAR_S", "CHAR_T", "CHAR_U", "CHAR_V", 
                      "CHAR_W", "CHAR_X", "CHAR_Y", "CHAR_Z", "CHAR_a", 
                      "CHAR_b", "CHAR_c", "CHAR_d", "CHAR_e", "CHAR_f", 
                      "CHAR_g", "CHAR_h", "CHAR_i", "CHAR_j", "CHAR_k", 
                      "CHAR_l", "CHAR_m", "CHAR_n", "CHAR_o", "CHAR_p", 
                      "CHAR_q", "CHAR_r", "CHAR_s", "CHAR_t", "CHAR_u", 
                      "CHAR_v", "CHAR_w", "CHAR_x", "CHAR_y", "CHAR_z", 
                      "NON_ENGLISH", "DIGIT_0", "DIGIT_1", "DIGIT_2", "DIGIT_3", 
                      "DIGIT_4", "DIGIT_5", "DIGIT_6", "DIGIT_7", "DIGIT_8", 
                      "DIGIT_9", "SPINE_TERMINATOR", "SPINE_ADD", "SPINE_SPLIT", 
                      "SPINE_JOIN", "ASTERISK", "QUOTATION_MARK", "APOSTROPHE", 
                      "LEFT_BRACKET", "RIGHT_BRACKET", "LEFT_CURLY_BRACES", 
                      "RIGHT_CURLY_BRACES", "OCTOTHORPE", "PLUS", "MINUS", 
                      "EQUAL", "DOT", "PIPE", "GRAVE_ACCENT", "CIRCUMFLEX", 
                      "TILDE", "ANGLE_BRACKET_OPEN", "ANGLE_BRACKET_CLOSE", 
                      "SLASH", "BACKSLASH", "UNDERSCORE", "DOLLAR", "LEFT_PARENTHESIS", 
                      "RIGHT_PARENTHESIS", "COLON", "SEMICOLON", "COMMA", 
                      "QUESTION_MARK", "SPACE", "INSTRUMENT_TITLE", "INSTRUMENT" ]

    RULE_start = 0
    RULE_field = 1
    RULE_notes_rests_chords = 2
    RULE_structural = 3
    RULE_contextual = 4
    RULE_signatures = 5
    RULE_otherContextual = 6
    RULE_empty = 7
    RULE_rest = 8
    RULE_restChar_r = 9
    RULE_restDecoration = 10
    RULE_chord = 11
    RULE_note = 12
    RULE_nonVisualTandemInterpretation = 13
    RULE_boundingBox = 14
    RULE_xywh = 15
    RULE_x = 16
    RULE_y = 17
    RULE_w = 18
    RULE_h = 19
    RULE_pageNumber = 20
    RULE_visualTandemInterpretation = 21
    RULE_associatedIDS = 22
    RULE_placeHolder = 23
    RULE_octaveShift = 24
    RULE_pianoHand = 25
    RULE_tandemTuplet = 26
    RULE_tandemCue = 27
    RULE_tandemTremolo = 28
    RULE_ossia = 29
    RULE_rscale = 30
    RULE_pedal = 31
    RULE_ela = 32
    RULE_dynamics_position = 33
    RULE_sections = 34
    RULE_sectionNames = 35
    RULE_sectionName = 36
    RULE_transposition = 37
    RULE_instrument = 38
    RULE_instrumentTitle = 39
    RULE_number = 40
    RULE_lowerCasePitch = 41
    RULE_upperCasePitch = 42
    RULE_pitchClass = 43
    RULE_accomp = 44
    RULE_solo = 45
    RULE_strophe = 46
    RULE_timebase = 47
    RULE_part = 48
    RULE_staff = 49
    RULE_clef = 50
    RULE_clefValue = 51
    RULE_clefSign = 52
    RULE_clefLine = 53
    RULE_clefOctave = 54
    RULE_keySignature = 55
    RULE_keySignaturePitchClass = 56
    RULE_keySignatureCancel = 57
    RULE_keyMode = 58
    RULE_key = 59
    RULE_singleKey = 60
    RULE_minorKey = 61
    RULE_majorKey = 62
    RULE_modal = 63
    RULE_locrian = 64
    RULE_ionian = 65
    RULE_aeolian = 66
    RULE_mixolydian = 67
    RULE_lydian = 68
    RULE_phrygian = 69
    RULE_dorian = 70
    RULE_timeSignature = 71
    RULE_numerator = 72
    RULE_denominator = 73
    RULE_standardTimeSignature = 74
    RULE_additiveTimeSignature = 75
    RULE_mixedTimeSignature = 76
    RULE_alternatingTimeSignature = 77
    RULE_alternatingTimeSignatureItem = 78
    RULE_interchangingTimeSignature = 79
    RULE_meterSymbol = 80
    RULE_modernMeterSymbolSign = 81
    RULE_mensuration = 82
    RULE_metronome = 83
    RULE_nullInterpretation = 84
    RULE_barline = 85
    RULE_barLineType = 86
    RULE_restPosition = 87
    RULE_duration = 88
    RULE_fermata = 89
    RULE_modernDuration = 90
    RULE_augmentationDot = 91
    RULE_alteration = 92
    RULE_staffChange = 93
    RULE_chordSpace = 94
    RULE_graceNote = 95
    RULE_appoggiatura = 96
    RULE_appoggiaturaMode = 97
    RULE_ligatureTie = 98
    RULE_noteDecoration = 99
    RULE_noteDecorationCharX = 100
    RULE_phrase = 101
    RULE_diatonicPitchAndOctave = 102
    RULE_trebleNotes = 103
    RULE_bassNotes = 104
    RULE_accidental = 105
    RULE_alterationDisplay = 106
    RULE_turn = 107
    RULE_userAssignable = 108
    RULE_glissando = 109
    RULE_articulation = 110
    RULE_accent = 111
    RULE_tenuto = 112
    RULE_staccatissimo = 113
    RULE_pizzicato = 114
    RULE_spiccato = 115
    RULE_staccato = 116
    RULE_editorialIntervention = 117
    RULE_slurStart = 118
    RULE_ligatureTieStart = 119
    RULE_tieContinue = 120
    RULE_ligatureTieEnd = 121
    RULE_slurEnd = 122
    RULE_barLineCrossedNoteStart = 123
    RULE_barLineCrossedNoteEnd = 124
    RULE_stem = 125
    RULE_beam = 126
    RULE_mordent = 127
    RULE_trill = 128
    RULE_footnote = 129

    ruleNames =  [ "start", "field", "notes_rests_chords", "structural", 
                   "contextual", "signatures", "otherContextual", "empty", 
                   "rest", "restChar_r", "restDecoration", "chord", "note", 
                   "nonVisualTandemInterpretation", "boundingBox", "xywh", 
                   "x", "y", "w", "h", "pageNumber", "visualTandemInterpretation", 
                   "associatedIDS", "placeHolder", "octaveShift", "pianoHand", 
                   "tandemTuplet", "tandemCue", "tandemTremolo", "ossia", 
                   "rscale", "pedal", "ela", "dynamics_position", "sections", 
                   "sectionNames", "sectionName", "transposition", "instrument", 
                   "instrumentTitle", "number", "lowerCasePitch", "upperCasePitch", 
                   "pitchClass", "accomp", "solo", "strophe", "timebase", 
                   "part", "staff", "clef", "clefValue", "clefSign", "clefLine", 
                   "clefOctave", "keySignature", "keySignaturePitchClass", 
                   "keySignatureCancel", "keyMode", "key", "singleKey", 
                   "minorKey", "majorKey", "modal", "locrian", "ionian", 
                   "aeolian", "mixolydian", "lydian", "phrygian", "dorian", 
                   "timeSignature", "numerator", "denominator", "standardTimeSignature", 
                   "additiveTimeSignature", "mixedTimeSignature", "alternatingTimeSignature", 
                   "alternatingTimeSignatureItem", "interchangingTimeSignature", 
                   "meterSymbol", "modernMeterSymbolSign", "mensuration", 
                   "metronome", "nullInterpretation", "barline", "barLineType", 
                   "restPosition", "duration", "fermata", "modernDuration", 
                   "augmentationDot", "alteration", "staffChange", "chordSpace", 
                   "graceNote", "appoggiatura", "appoggiaturaMode", "ligatureTie", 
                   "noteDecoration", "noteDecorationCharX", "phrase", "diatonicPitchAndOctave", 
                   "trebleNotes", "bassNotes", "accidental", "alterationDisplay", 
                   "turn", "userAssignable", "glissando", "articulation", 
                   "accent", "tenuto", "staccatissimo", "pizzicato", "spiccato", 
                   "staccato", "editorialIntervention", "slurStart", "ligatureTieStart", 
                   "tieContinue", "ligatureTieEnd", "slurEnd", "barLineCrossedNoteStart", 
                   "barLineCrossedNoteEnd", "stem", "beam", "mordent", "trill", 
                   "footnote" ]

    EOF = Token.EOF
    TANDEM_COL_START=1
    TANDEM_COL_END=2
    TANDEM_PART=3
    TANDEM_ACCOMP=4
    TANDEM_SOLO=5
    TANDEM_STROPHE=6
    TANDEM_STAFF=7
    TANDEM_TRANSPOSITION=8
    TANDEM_CLEF=9
    TANDEM_KEY_SIGNATURE=10
    TANDEM_MET=11
    METRONOME=12
    TANDEM_SECTION=13
    NO_REPEAT=14
    TANDEM_LEFT_HAND=15
    TANDEM_RIGHT_HAND=16
    TANDEM_ABOVE=17
    TANDEM_BELOW=18
    TANDEM_CENTERED=19
    TANDEM_PEDAL_START=20
    TANDEM_ELA=21
    TANDEM_PEDAL_END=22
    TANDEM_TUPLET_START=23
    TANDEM_TUPLET_END=24
    TANDEM_CUE_START=25
    TANDEM_CUE_END=26
    TANDEM_TREMOLO_START=27
    TANDEM_TREMOLO_END=28
    TANDEM_TSTART=29
    TANDEM_TEND=30
    TANDEM_RSCALE=31
    TANDEM_TIMESIGNATURE=32
    TANDEM_SIC=33
    TANDEM_OSSIA=34
    TANDEM_FIN=35
    TANDEM_SMINUS=36
    TANDEM_TIMEBASE=37
    TANDEM_BOUNDING_BOX=38
    OCTAVE_SHIFT=39
    EXCLAMATION=40
    PERCENT=41
    AMPERSAND=42
    AT=43
    CHAR_A=44
    CHAR_B=45
    CHAR_C=46
    CHAR_D=47
    CHAR_E=48
    CHAR_F=49
    CHAR_G=50
    CHAR_H=51
    CHAR_I=52
    CHAR_J=53
    CHAR_K=54
    CHAR_L=55
    CHAR_M=56
    CHAR_N=57
    CHAR_O=58
    CHAR_P=59
    CHAR_Q=60
    CHAR_R=61
    CHAR_S=62
    CHAR_T=63
    CHAR_U=64
    CHAR_V=65
    CHAR_W=66
    CHAR_X=67
    CHAR_Y=68
    CHAR_Z=69
    CHAR_a=70
    CHAR_b=71
    CHAR_c=72
    CHAR_d=73
    CHAR_e=74
    CHAR_f=75
    CHAR_g=76
    CHAR_h=77
    CHAR_i=78
    CHAR_j=79
    CHAR_k=80
    CHAR_l=81
    CHAR_m=82
    CHAR_n=83
    CHAR_o=84
    CHAR_p=85
    CHAR_q=86
    CHAR_r=87
    CHAR_s=88
    CHAR_t=89
    CHAR_u=90
    CHAR_v=91
    CHAR_w=92
    CHAR_x=93
    CHAR_y=94
    CHAR_z=95
    NON_ENGLISH=96
    DIGIT_0=97
    DIGIT_1=98
    DIGIT_2=99
    DIGIT_3=100
    DIGIT_4=101
    DIGIT_5=102
    DIGIT_6=103
    DIGIT_7=104
    DIGIT_8=105
    DIGIT_9=106
    SPINE_TERMINATOR=107
    SPINE_ADD=108
    SPINE_SPLIT=109
    SPINE_JOIN=110
    ASTERISK=111
    QUOTATION_MARK=112
    APOSTROPHE=113
    LEFT_BRACKET=114
    RIGHT_BRACKET=115
    LEFT_CURLY_BRACES=116
    RIGHT_CURLY_BRACES=117
    OCTOTHORPE=118
    PLUS=119
    MINUS=120
    EQUAL=121
    DOT=122
    PIPE=123
    GRAVE_ACCENT=124
    CIRCUMFLEX=125
    TILDE=126
    ANGLE_BRACKET_OPEN=127
    ANGLE_BRACKET_CLOSE=128
    SLASH=129
    BACKSLASH=130
    UNDERSCORE=131
    DOLLAR=132
    LEFT_PARENTHESIS=133
    RIGHT_PARENTHESIS=134
    COLON=135
    SEMICOLON=136
    COMMA=137
    QUESTION_MARK=138
    SPACE=139
    INSTRUMENT_TITLE=140
    INSTRUMENT=141

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.1")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None




    class StartContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def field(self):
            return self.getTypedRuleContext(kernSpineParser.FieldContext,0)


        def getRuleIndex(self):
            return kernSpineParser.RULE_start

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStart" ):
                listener.enterStart(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStart" ):
                listener.exitStart(self)




    def start(self):

        localctx = kernSpineParser.StartContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_start)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 260
            self.field()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FieldContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def notes_rests_chords(self):
            return self.getTypedRuleContext(kernSpineParser.Notes_rests_chordsContext,0)


        def structural(self):
            return self.getTypedRuleContext(kernSpineParser.StructuralContext,0)


        def contextual(self):
            return self.getTypedRuleContext(kernSpineParser.ContextualContext,0)


        def barline(self):
            return self.getTypedRuleContext(kernSpineParser.BarlineContext,0)


        def empty(self):
            return self.getTypedRuleContext(kernSpineParser.EmptyContext,0)


        def visualTandemInterpretation(self):
            return self.getTypedRuleContext(kernSpineParser.VisualTandemInterpretationContext,0)


        def nonVisualTandemInterpretation(self):
            return self.getTypedRuleContext(kernSpineParser.NonVisualTandemInterpretationContext,0)


        def boundingBox(self):
            return self.getTypedRuleContext(kernSpineParser.BoundingBoxContext,0)


        def getRuleIndex(self):
            return kernSpineParser.RULE_field

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterField" ):
                listener.enterField(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitField" ):
                listener.exitField(self)




    def field(self):

        localctx = kernSpineParser.FieldContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_field)
        try:
            self.state = 270
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,0,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 262
                self.notes_rests_chords()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 263
                self.structural()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 264
                self.contextual()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 265
                self.barline()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 266
                self.empty()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 267
                self.visualTandemInterpretation()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 268
                self.nonVisualTandemInterpretation()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 269
                self.boundingBox()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Notes_rests_chordsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def note(self):
            return self.getTypedRuleContext(kernSpineParser.NoteContext,0)


        def rest(self):
            return self.getTypedRuleContext(kernSpineParser.RestContext,0)


        def chord(self):
            return self.getTypedRuleContext(kernSpineParser.ChordContext,0)


        def getRuleIndex(self):
            return kernSpineParser.RULE_notes_rests_chords

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNotes_rests_chords" ):
                listener.enterNotes_rests_chords(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNotes_rests_chords" ):
                listener.exitNotes_rests_chords(self)




    def notes_rests_chords(self):

        localctx = kernSpineParser.Notes_rests_chordsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_notes_rests_chords)
        try:
            self.state = 275
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 272
                self.note()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 273
                self.rest()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 274
                self.chord()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StructuralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def staff(self):
            return self.getTypedRuleContext(kernSpineParser.StaffContext,0)


        def getRuleIndex(self):
            return kernSpineParser.RULE_structural

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStructural" ):
                listener.enterStructural(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStructural" ):
                listener.exitStructural(self)




    def structural(self):

        localctx = kernSpineParser.StructuralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_structural)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 277
            self.staff()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ContextualContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def signatures(self):
            return self.getTypedRuleContext(kernSpineParser.SignaturesContext,0)


        def otherContextual(self):
            return self.getTypedRuleContext(kernSpineParser.OtherContextualContext,0)


        def getRuleIndex(self):
            return kernSpineParser.RULE_contextual

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterContextual" ):
                listener.enterContextual(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitContextual" ):
                listener.exitContextual(self)




    def contextual(self):

        localctx = kernSpineParser.ContextualContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_contextual)
        try:
            self.state = 281
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [9, 10, 11, 32]:
                self.enterOuterAlt(localctx, 1)
                self.state = 279
                self.signatures()
                pass
            elif token in [12, 39, 111]:
                self.enterOuterAlt(localctx, 2)
                self.state = 280
                self.otherContextual()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SignaturesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def clef(self):
            return self.getTypedRuleContext(kernSpineParser.ClefContext,0)


        def timeSignature(self):
            return self.getTypedRuleContext(kernSpineParser.TimeSignatureContext,0)


        def meterSymbol(self):
            return self.getTypedRuleContext(kernSpineParser.MeterSymbolContext,0)


        def keySignature(self):
            return self.getTypedRuleContext(kernSpineParser.KeySignatureContext,0)


        def getRuleIndex(self):
            return kernSpineParser.RULE_signatures

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSignatures" ):
                listener.enterSignatures(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSignatures" ):
                listener.exitSignatures(self)




    def signatures(self):

        localctx = kernSpineParser.SignaturesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_signatures)
        try:
            self.state = 287
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,3,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 283
                self.clef()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 284
                self.timeSignature()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 285
                self.meterSymbol()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 286
                self.keySignature()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OtherContextualContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def octaveShift(self):
            return self.getTypedRuleContext(kernSpineParser.OctaveShiftContext,0)


        def key(self):
            return self.getTypedRuleContext(kernSpineParser.KeyContext,0)


        def metronome(self):
            return self.getTypedRuleContext(kernSpineParser.MetronomeContext,0)


        def getRuleIndex(self):
            return kernSpineParser.RULE_otherContextual

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOtherContextual" ):
                listener.enterOtherContextual(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOtherContextual" ):
                listener.exitOtherContextual(self)




    def otherContextual(self):

        localctx = kernSpineParser.OtherContextualContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_otherContextual)
        try:
            self.state = 292
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [39]:
                self.enterOuterAlt(localctx, 1)
                self.state = 289
                self.octaveShift()
                pass
            elif token in [111]:
                self.enterOuterAlt(localctx, 2)
                self.state = 290
                self.key()
                pass
            elif token in [12]:
                self.enterOuterAlt(localctx, 3)
                self.state = 291
                self.metronome()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EmptyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def nullInterpretation(self):
            return self.getTypedRuleContext(kernSpineParser.NullInterpretationContext,0)


        def placeHolder(self):
            return self.getTypedRuleContext(kernSpineParser.PlaceHolderContext,0)


        def getRuleIndex(self):
            return kernSpineParser.RULE_empty

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEmpty" ):
                listener.enterEmpty(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEmpty" ):
                listener.exitEmpty(self)




    def empty(self):

        localctx = kernSpineParser.EmptyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_empty)
        try:
            self.state = 296
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [111]:
                self.enterOuterAlt(localctx, 1)
                self.state = 294
                self.nullInterpretation()
                pass
            elif token in [122]:
                self.enterOuterAlt(localctx, 2)
                self.state = 295
                self.placeHolder()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RestContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def restChar_r(self):
            return self.getTypedRuleContext(kernSpineParser.RestChar_rContext,0)


        def restDecoration(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(kernSpineParser.RestDecorationContext)
            else:
                return self.getTypedRuleContext(kernSpineParser.RestDecorationContext,i)


        def duration(self):
            return self.getTypedRuleContext(kernSpineParser.DurationContext,0)


        def getRuleIndex(self):
            return kernSpineParser.RULE_rest

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRest" ):
                listener.enterRest(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRest" ):
                listener.exitRest(self)




    def rest(self):

        localctx = kernSpineParser.RestContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_rest)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 301
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 42)) & ~0x3f) == 0 and ((1 << (_la - 42)) & 4521363377226237) != 0) or ((((_la - 113)) & ~0x3f) == 0 and ((1 << (_la - 113)) & 11584025) != 0):
                self.state = 298
                self.restDecoration()
                self.state = 303
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 305
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 97)) & ~0x3f) == 0 and ((1 << (_la - 97)) & 1023) != 0):
                self.state = 304
                self.duration()


            self.state = 307
            self.restChar_r()
            self.state = 311
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,8,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 308
                    self.restDecoration() 
                self.state = 313
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,8,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RestChar_rContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CHAR_r(self, i:int=None):
            if i is None:
                return self.getTokens(kernSpineParser.CHAR_r)
            else:
                return self.getToken(kernSpineParser.CHAR_r, i)

        def getRuleIndex(self):
            return kernSpineParser.RULE_restChar_r

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRestChar_r" ):
                listener.enterRestChar_r(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRestChar_r" ):
                listener.exitRestChar_r(self)




    def restChar_r(self):

        localctx = kernSpineParser.RestChar_rContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_restChar_r)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 314
            self.match(kernSpineParser.CHAR_r)
            self.state = 316
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,9,self._ctx)
            if la_ == 1:
                self.state = 315
                self.match(kernSpineParser.CHAR_r)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RestDecorationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def slurStart(self):
            return self.getTypedRuleContext(kernSpineParser.SlurStartContext,0)


        def graceNote(self):
            return self.getTypedRuleContext(kernSpineParser.GraceNoteContext,0)


        def staffChange(self):
            return self.getTypedRuleContext(kernSpineParser.StaffChangeContext,0)


        def restPosition(self):
            return self.getTypedRuleContext(kernSpineParser.RestPositionContext,0)


        def fermata(self):
            return self.getTypedRuleContext(kernSpineParser.FermataContext,0)


        def editorialIntervention(self):
            return self.getTypedRuleContext(kernSpineParser.EditorialInterventionContext,0)


        def slurEnd(self):
            return self.getTypedRuleContext(kernSpineParser.SlurEndContext,0)


        def staccato(self):
            return self.getTypedRuleContext(kernSpineParser.StaccatoContext,0)


        def phrase(self):
            return self.getTypedRuleContext(kernSpineParser.PhraseContext,0)


        def augmentationDot(self):
            return self.getTypedRuleContext(kernSpineParser.AugmentationDotContext,0)


        def CHAR_j(self):
            return self.getToken(kernSpineParser.CHAR_j, 0)

        def getRuleIndex(self):
            return kernSpineParser.RULE_restDecoration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRestDecoration" ):
                listener.enterRestDecoration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRestDecoration" ):
                listener.exitRestDecoration(self)




    def restDecoration(self):

        localctx = kernSpineParser.RestDecorationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_restDecoration)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 329
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,10,self._ctx)
            if la_ == 1:
                self.state = 318
                self.slurStart()
                pass

            elif la_ == 2:
                self.state = 319
                self.graceNote()
                pass

            elif la_ == 3:
                self.state = 320
                self.staffChange()
                pass

            elif la_ == 4:
                self.state = 321
                self.restPosition()
                pass

            elif la_ == 5:
                self.state = 322
                self.fermata()
                pass

            elif la_ == 6:
                self.state = 323
                self.editorialIntervention()
                pass

            elif la_ == 7:
                self.state = 324
                self.slurEnd()
                pass

            elif la_ == 8:
                self.state = 325
                self.staccato()
                pass

            elif la_ == 9:
                self.state = 326
                self.phrase()
                pass

            elif la_ == 10:
                self.state = 327
                self.augmentationDot()
                pass

            elif la_ == 11:
                self.state = 328
                self.match(kernSpineParser.CHAR_j)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ChordContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def note(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(kernSpineParser.NoteContext)
            else:
                return self.getTypedRuleContext(kernSpineParser.NoteContext,i)


        def rest(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(kernSpineParser.RestContext)
            else:
                return self.getTypedRuleContext(kernSpineParser.RestContext,i)


        def chordSpace(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(kernSpineParser.ChordSpaceContext)
            else:
                return self.getTypedRuleContext(kernSpineParser.ChordSpaceContext,i)


        def getRuleIndex(self):
            return kernSpineParser.RULE_chord

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterChord" ):
                listener.enterChord(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitChord" ):
                listener.exitChord(self)




    def chord(self):

        localctx = kernSpineParser.ChordContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_chord)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 333
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,11,self._ctx)
            if la_ == 1:
                self.state = 331
                self.note()
                pass

            elif la_ == 2:
                self.state = 332
                self.rest()
                pass


            self.state = 340 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 335
                self.chordSpace()
                self.state = 338
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,12,self._ctx)
                if la_ == 1:
                    self.state = 336
                    self.note()
                    pass

                elif la_ == 2:
                    self.state = 337
                    self.rest()
                    pass


                self.state = 342 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (((((_la - 42)) & ~0x3f) == 0 and ((1 << (_la - 42)) & -27872654195951107) != 0) or ((((_la - 106)) & ~0x3f) == 0 and ((1 << (_la - 106)) & 15032192961) != 0)):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NoteContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def diatonicPitchAndOctave(self):
            return self.getTypedRuleContext(kernSpineParser.DiatonicPitchAndOctaveContext,0)


        def noteDecoration(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(kernSpineParser.NoteDecorationContext)
            else:
                return self.getTypedRuleContext(kernSpineParser.NoteDecorationContext,i)


        def duration(self):
            return self.getTypedRuleContext(kernSpineParser.DurationContext,0)


        def alteration(self):
            return self.getTypedRuleContext(kernSpineParser.AlterationContext,0)


        def getRuleIndex(self):
            return kernSpineParser.RULE_note

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNote" ):
                listener.enterNote(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNote" ):
                listener.exitNote(self)




    def note(self):

        localctx = kernSpineParser.NoteContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_note)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 347
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,14,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 344
                    self.noteDecoration() 
                self.state = 349
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,14,self._ctx)

            self.state = 351
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 97)) & ~0x3f) == 0 and ((1 << (_la - 97)) & 1023) != 0):
                self.state = 350
                self.duration()


            self.state = 356
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 42)) & ~0x3f) == 0 and ((1 << (_la - 42)) & 8120924359620609) != 0) or ((((_la - 112)) & ~0x3f) == 0 and ((1 << (_la - 112)) & 100660287) != 0):
                self.state = 353
                self.noteDecoration()
                self.state = 358
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 359
            self.diatonicPitchAndOctave()
            self.state = 363
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,17,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 360
                    self.noteDecoration() 
                self.state = 365
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,17,self._ctx)

            self.state = 367
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 83)) & ~0x3f) == 0 and ((1 << (_la - 83)) & 171798691841) != 0):
                self.state = 366
                self.alteration()


            self.state = 372
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,19,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 369
                    self.noteDecoration() 
                self.state = 374
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,19,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NonVisualTandemInterpretationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def timebase(self):
            return self.getTypedRuleContext(kernSpineParser.TimebaseContext,0)


        def solo(self):
            return self.getTypedRuleContext(kernSpineParser.SoloContext,0)


        def accomp(self):
            return self.getTypedRuleContext(kernSpineParser.AccompContext,0)


        def strophe(self):
            return self.getTypedRuleContext(kernSpineParser.StropheContext,0)


        def part(self):
            return self.getTypedRuleContext(kernSpineParser.PartContext,0)


        def instrument(self):
            return self.getTypedRuleContext(kernSpineParser.InstrumentContext,0)


        def instrumentTitle(self):
            return self.getTypedRuleContext(kernSpineParser.InstrumentTitleContext,0)


        def transposition(self):
            return self.getTypedRuleContext(kernSpineParser.TranspositionContext,0)


        def sections(self):
            return self.getTypedRuleContext(kernSpineParser.SectionsContext,0)


        def pianoHand(self):
            return self.getTypedRuleContext(kernSpineParser.PianoHandContext,0)


        def ossia(self):
            return self.getTypedRuleContext(kernSpineParser.OssiaContext,0)


        def getRuleIndex(self):
            return kernSpineParser.RULE_nonVisualTandemInterpretation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNonVisualTandemInterpretation" ):
                listener.enterNonVisualTandemInterpretation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNonVisualTandemInterpretation" ):
                listener.exitNonVisualTandemInterpretation(self)




    def nonVisualTandemInterpretation(self):

        localctx = kernSpineParser.NonVisualTandemInterpretationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_nonVisualTandemInterpretation)
        try:
            self.state = 386
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [37]:
                self.enterOuterAlt(localctx, 1)
                self.state = 375
                self.timebase()
                pass
            elif token in [5]:
                self.enterOuterAlt(localctx, 2)
                self.state = 376
                self.solo()
                pass
            elif token in [4]:
                self.enterOuterAlt(localctx, 3)
                self.state = 377
                self.accomp()
                pass
            elif token in [6]:
                self.enterOuterAlt(localctx, 4)
                self.state = 378
                self.strophe()
                pass
            elif token in [3]:
                self.enterOuterAlt(localctx, 5)
                self.state = 379
                self.part()
                pass
            elif token in [141]:
                self.enterOuterAlt(localctx, 6)
                self.state = 380
                self.instrument()
                pass
            elif token in [140]:
                self.enterOuterAlt(localctx, 7)
                self.state = 381
                self.instrumentTitle()
                pass
            elif token in [8]:
                self.enterOuterAlt(localctx, 8)
                self.state = 382
                self.transposition()
                pass
            elif token in [13]:
                self.enterOuterAlt(localctx, 9)
                self.state = 383
                self.sections()
                pass
            elif token in [15, 16]:
                self.enterOuterAlt(localctx, 10)
                self.state = 384
                self.pianoHand()
                pass
            elif token in [33, 34, 35, 36]:
                self.enterOuterAlt(localctx, 11)
                self.state = 385
                self.ossia()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BoundingBoxContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TANDEM_BOUNDING_BOX(self):
            return self.getToken(kernSpineParser.TANDEM_BOUNDING_BOX, 0)

        def MINUS(self):
            return self.getToken(kernSpineParser.MINUS, 0)

        def pageNumber(self):
            return self.getTypedRuleContext(kernSpineParser.PageNumberContext,0)


        def COLON(self):
            return self.getToken(kernSpineParser.COLON, 0)

        def xywh(self):
            return self.getTypedRuleContext(kernSpineParser.XywhContext,0)


        def getRuleIndex(self):
            return kernSpineParser.RULE_boundingBox

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBoundingBox" ):
                listener.enterBoundingBox(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBoundingBox" ):
                listener.exitBoundingBox(self)




    def boundingBox(self):

        localctx = kernSpineParser.BoundingBoxContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_boundingBox)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 388
            self.match(kernSpineParser.TANDEM_BOUNDING_BOX)
            self.state = 389
            self.match(kernSpineParser.MINUS)
            self.state = 390
            self.pageNumber()
            self.state = 391
            self.match(kernSpineParser.COLON)
            self.state = 392
            self.xywh()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class XywhContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def x(self):
            return self.getTypedRuleContext(kernSpineParser.XContext,0)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(kernSpineParser.COMMA)
            else:
                return self.getToken(kernSpineParser.COMMA, i)

        def y(self):
            return self.getTypedRuleContext(kernSpineParser.YContext,0)


        def w(self):
            return self.getTypedRuleContext(kernSpineParser.WContext,0)


        def h(self):
            return self.getTypedRuleContext(kernSpineParser.HContext,0)


        def getRuleIndex(self):
            return kernSpineParser.RULE_xywh

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXywh" ):
                listener.enterXywh(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXywh" ):
                listener.exitXywh(self)




    def xywh(self):

        localctx = kernSpineParser.XywhContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_xywh)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 394
            self.x()
            self.state = 395
            self.match(kernSpineParser.COMMA)
            self.state = 396
            self.y()
            self.state = 397
            self.match(kernSpineParser.COMMA)
            self.state = 398
            self.w()
            self.state = 399
            self.match(kernSpineParser.COMMA)
            self.state = 400
            self.h()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class XContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def number(self):
            return self.getTypedRuleContext(kernSpineParser.NumberContext,0)


        def getRuleIndex(self):
            return kernSpineParser.RULE_x

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterX" ):
                listener.enterX(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitX" ):
                listener.exitX(self)




    def x(self):

        localctx = kernSpineParser.XContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_x)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 402
            self.number()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class YContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def number(self):
            return self.getTypedRuleContext(kernSpineParser.NumberContext,0)


        def getRuleIndex(self):
            return kernSpineParser.RULE_y

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterY" ):
                listener.enterY(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitY" ):
                listener.exitY(self)




    def y(self):

        localctx = kernSpineParser.YContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_y)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 404
            self.number()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def number(self):
            return self.getTypedRuleContext(kernSpineParser.NumberContext,0)


        def getRuleIndex(self):
            return kernSpineParser.RULE_w

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterW" ):
                listener.enterW(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitW" ):
                listener.exitW(self)




    def w(self):

        localctx = kernSpineParser.WContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_w)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 406
            self.number()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class HContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def number(self):
            return self.getTypedRuleContext(kernSpineParser.NumberContext,0)


        def getRuleIndex(self):
            return kernSpineParser.RULE_h

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterH" ):
                listener.enterH(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitH" ):
                listener.exitH(self)




    def h(self):

        localctx = kernSpineParser.HContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_h)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 408
            self.number()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PageNumberContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COLON(self, i:int=None):
            if i is None:
                return self.getTokens(kernSpineParser.COLON)
            else:
                return self.getToken(kernSpineParser.COLON, i)

        def getRuleIndex(self):
            return kernSpineParser.RULE_pageNumber

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPageNumber" ):
                listener.enterPageNumber(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPageNumber" ):
                listener.exitPageNumber(self)




    def pageNumber(self):

        localctx = kernSpineParser.PageNumberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_pageNumber)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 413
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & -2) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & -1) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & 16255) != 0):
                self.state = 410
                _la = self._input.LA(1)
                if _la <= 0 or _la==135:
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 415
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VisualTandemInterpretationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def dynamics_position(self):
            return self.getTypedRuleContext(kernSpineParser.Dynamics_positionContext,0)


        def tandemCue(self):
            return self.getTypedRuleContext(kernSpineParser.TandemCueContext,0)


        def tandemTremolo(self):
            return self.getTypedRuleContext(kernSpineParser.TandemTremoloContext,0)


        def rscale(self):
            return self.getTypedRuleContext(kernSpineParser.RscaleContext,0)


        def pedal(self):
            return self.getTypedRuleContext(kernSpineParser.PedalContext,0)


        def ela(self):
            return self.getTypedRuleContext(kernSpineParser.ElaContext,0)


        def tandemTuplet(self):
            return self.getTypedRuleContext(kernSpineParser.TandemTupletContext,0)


        def TANDEM_TSTART(self):
            return self.getToken(kernSpineParser.TANDEM_TSTART, 0)

        def TANDEM_TEND(self):
            return self.getToken(kernSpineParser.TANDEM_TEND, 0)

        def getRuleIndex(self):
            return kernSpineParser.RULE_visualTandemInterpretation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVisualTandemInterpretation" ):
                listener.enterVisualTandemInterpretation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVisualTandemInterpretation" ):
                listener.exitVisualTandemInterpretation(self)




    def visualTandemInterpretation(self):

        localctx = kernSpineParser.VisualTandemInterpretationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_visualTandemInterpretation)
        try:
            self.state = 425
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [17, 18, 19]:
                self.enterOuterAlt(localctx, 1)
                self.state = 416
                self.dynamics_position()
                pass
            elif token in [25, 26]:
                self.enterOuterAlt(localctx, 2)
                self.state = 417
                self.tandemCue()
                pass
            elif token in [27, 28]:
                self.enterOuterAlt(localctx, 3)
                self.state = 418
                self.tandemTremolo()
                pass
            elif token in [31]:
                self.enterOuterAlt(localctx, 4)
                self.state = 419
                self.rscale()
                pass
            elif token in [20, 22]:
                self.enterOuterAlt(localctx, 5)
                self.state = 420
                self.pedal()
                pass
            elif token in [21]:
                self.enterOuterAlt(localctx, 6)
                self.state = 421
                self.ela()
                pass
            elif token in [23, 24]:
                self.enterOuterAlt(localctx, 7)
                self.state = 422
                self.tandemTuplet()
                pass
            elif token in [29]:
                self.enterOuterAlt(localctx, 8)
                self.state = 423
                self.match(kernSpineParser.TANDEM_TSTART)
                pass
            elif token in [30]:
                self.enterOuterAlt(localctx, 9)
                self.state = 424
                self.match(kernSpineParser.TANDEM_TEND)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AssociatedIDSContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def number(self):
            return self.getTypedRuleContext(kernSpineParser.NumberContext,0)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(kernSpineParser.COMMA)
            else:
                return self.getToken(kernSpineParser.COMMA, i)

        def associatedIDS(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(kernSpineParser.AssociatedIDSContext)
            else:
                return self.getTypedRuleContext(kernSpineParser.AssociatedIDSContext,i)


        def getRuleIndex(self):
            return kernSpineParser.RULE_associatedIDS

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssociatedIDS" ):
                listener.enterAssociatedIDS(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssociatedIDS" ):
                listener.exitAssociatedIDS(self)




    def associatedIDS(self):

        localctx = kernSpineParser.AssociatedIDSContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_associatedIDS)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 427
            self.number()
            self.state = 432
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,23,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 428
                    self.match(kernSpineParser.COMMA)
                    self.state = 429
                    self.associatedIDS() 
                self.state = 434
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,23,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PlaceHolderContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DOT(self):
            return self.getToken(kernSpineParser.DOT, 0)

        def getRuleIndex(self):
            return kernSpineParser.RULE_placeHolder

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPlaceHolder" ):
                listener.enterPlaceHolder(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPlaceHolder" ):
                listener.exitPlaceHolder(self)




    def placeHolder(self):

        localctx = kernSpineParser.PlaceHolderContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_placeHolder)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 435
            self.match(kernSpineParser.DOT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OctaveShiftContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OCTAVE_SHIFT(self):
            return self.getToken(kernSpineParser.OCTAVE_SHIFT, 0)

        def getRuleIndex(self):
            return kernSpineParser.RULE_octaveShift

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOctaveShift" ):
                listener.enterOctaveShift(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOctaveShift" ):
                listener.exitOctaveShift(self)




    def octaveShift(self):

        localctx = kernSpineParser.OctaveShiftContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_octaveShift)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 437
            self.match(kernSpineParser.OCTAVE_SHIFT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PianoHandContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TANDEM_LEFT_HAND(self):
            return self.getToken(kernSpineParser.TANDEM_LEFT_HAND, 0)

        def TANDEM_RIGHT_HAND(self):
            return self.getToken(kernSpineParser.TANDEM_RIGHT_HAND, 0)

        def getRuleIndex(self):
            return kernSpineParser.RULE_pianoHand

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPianoHand" ):
                listener.enterPianoHand(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPianoHand" ):
                listener.exitPianoHand(self)




    def pianoHand(self):

        localctx = kernSpineParser.PianoHandContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_pianoHand)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 439
            _la = self._input.LA(1)
            if not(_la==15 or _la==16):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TandemTupletContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TANDEM_TUPLET_START(self):
            return self.getToken(kernSpineParser.TANDEM_TUPLET_START, 0)

        def TANDEM_TUPLET_END(self):
            return self.getToken(kernSpineParser.TANDEM_TUPLET_END, 0)

        def getRuleIndex(self):
            return kernSpineParser.RULE_tandemTuplet

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTandemTuplet" ):
                listener.enterTandemTuplet(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTandemTuplet" ):
                listener.exitTandemTuplet(self)




    def tandemTuplet(self):

        localctx = kernSpineParser.TandemTupletContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_tandemTuplet)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 441
            _la = self._input.LA(1)
            if not(_la==23 or _la==24):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TandemCueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TANDEM_CUE_START(self):
            return self.getToken(kernSpineParser.TANDEM_CUE_START, 0)

        def TANDEM_CUE_END(self):
            return self.getToken(kernSpineParser.TANDEM_CUE_END, 0)

        def getRuleIndex(self):
            return kernSpineParser.RULE_tandemCue

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTandemCue" ):
                listener.enterTandemCue(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTandemCue" ):
                listener.exitTandemCue(self)




    def tandemCue(self):

        localctx = kernSpineParser.TandemCueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_tandemCue)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 443
            _la = self._input.LA(1)
            if not(_la==25 or _la==26):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TandemTremoloContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TANDEM_TREMOLO_START(self):
            return self.getToken(kernSpineParser.TANDEM_TREMOLO_START, 0)

        def TANDEM_TREMOLO_END(self):
            return self.getToken(kernSpineParser.TANDEM_TREMOLO_END, 0)

        def getRuleIndex(self):
            return kernSpineParser.RULE_tandemTremolo

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTandemTremolo" ):
                listener.enterTandemTremolo(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTandemTremolo" ):
                listener.exitTandemTremolo(self)




    def tandemTremolo(self):

        localctx = kernSpineParser.TandemTremoloContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_tandemTremolo)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 445
            _la = self._input.LA(1)
            if not(_la==27 or _la==28):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OssiaContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TANDEM_SIC(self):
            return self.getToken(kernSpineParser.TANDEM_SIC, 0)

        def TANDEM_OSSIA(self):
            return self.getToken(kernSpineParser.TANDEM_OSSIA, 0)

        def TANDEM_FIN(self):
            return self.getToken(kernSpineParser.TANDEM_FIN, 0)

        def TANDEM_SMINUS(self):
            return self.getToken(kernSpineParser.TANDEM_SMINUS, 0)

        def getRuleIndex(self):
            return kernSpineParser.RULE_ossia

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOssia" ):
                listener.enterOssia(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOssia" ):
                listener.exitOssia(self)




    def ossia(self):

        localctx = kernSpineParser.OssiaContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_ossia)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 447
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 128849018880) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RscaleContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TANDEM_RSCALE(self):
            return self.getToken(kernSpineParser.TANDEM_RSCALE, 0)

        def COLON(self):
            return self.getToken(kernSpineParser.COLON, 0)

        def number(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(kernSpineParser.NumberContext)
            else:
                return self.getTypedRuleContext(kernSpineParser.NumberContext,i)


        def SLASH(self):
            return self.getToken(kernSpineParser.SLASH, 0)

        def getRuleIndex(self):
            return kernSpineParser.RULE_rscale

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRscale" ):
                listener.enterRscale(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRscale" ):
                listener.exitRscale(self)




    def rscale(self):

        localctx = kernSpineParser.RscaleContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_rscale)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 449
            self.match(kernSpineParser.TANDEM_RSCALE)
            self.state = 450
            self.match(kernSpineParser.COLON)
            self.state = 451
            self.number()
            self.state = 454
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==129:
                self.state = 452
                self.match(kernSpineParser.SLASH)
                self.state = 453
                self.number()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PedalContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TANDEM_PEDAL_START(self):
            return self.getToken(kernSpineParser.TANDEM_PEDAL_START, 0)

        def TANDEM_PEDAL_END(self):
            return self.getToken(kernSpineParser.TANDEM_PEDAL_END, 0)

        def getRuleIndex(self):
            return kernSpineParser.RULE_pedal

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPedal" ):
                listener.enterPedal(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPedal" ):
                listener.exitPedal(self)




    def pedal(self):

        localctx = kernSpineParser.PedalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_pedal)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 456
            _la = self._input.LA(1)
            if not(_la==20 or _la==22):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ElaContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TANDEM_ELA(self):
            return self.getToken(kernSpineParser.TANDEM_ELA, 0)

        def getRuleIndex(self):
            return kernSpineParser.RULE_ela

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEla" ):
                listener.enterEla(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEla" ):
                listener.exitEla(self)




    def ela(self):

        localctx = kernSpineParser.ElaContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_ela)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 458
            self.match(kernSpineParser.TANDEM_ELA)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Dynamics_positionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TANDEM_ABOVE(self):
            return self.getToken(kernSpineParser.TANDEM_ABOVE, 0)

        def TANDEM_BELOW(self):
            return self.getToken(kernSpineParser.TANDEM_BELOW, 0)

        def TANDEM_CENTERED(self):
            return self.getToken(kernSpineParser.TANDEM_CENTERED, 0)

        def getRuleIndex(self):
            return kernSpineParser.RULE_dynamics_position

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDynamics_position" ):
                listener.enterDynamics_position(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDynamics_position" ):
                listener.exitDynamics_position(self)




    def dynamics_position(self):

        localctx = kernSpineParser.Dynamics_positionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_dynamics_position)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 460
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 917504) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SectionsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TANDEM_SECTION(self):
            return self.getToken(kernSpineParser.TANDEM_SECTION, 0)

        def LEFT_BRACKET(self):
            return self.getToken(kernSpineParser.LEFT_BRACKET, 0)

        def sectionNames(self):
            return self.getTypedRuleContext(kernSpineParser.SectionNamesContext,0)


        def RIGHT_BRACKET(self):
            return self.getToken(kernSpineParser.RIGHT_BRACKET, 0)

        def sectionName(self):
            return self.getTypedRuleContext(kernSpineParser.SectionNameContext,0)


        def NO_REPEAT(self):
            return self.getToken(kernSpineParser.NO_REPEAT, 0)

        def getRuleIndex(self):
            return kernSpineParser.RULE_sections

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSections" ):
                listener.enterSections(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSections" ):
                listener.exitSections(self)




    def sections(self):

        localctx = kernSpineParser.SectionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_sections)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 462
            self.match(kernSpineParser.TANDEM_SECTION)
            self.state = 471
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [14, 114]:
                self.state = 464
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==14:
                    self.state = 463
                    self.match(kernSpineParser.NO_REPEAT)


                self.state = 466
                self.match(kernSpineParser.LEFT_BRACKET)
                self.state = 467
                self.sectionNames()
                self.state = 468
                self.match(kernSpineParser.RIGHT_BRACKET)
                pass
            elif token in [44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 139]:
                self.state = 470
                self.sectionName()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SectionNamesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def sectionName(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(kernSpineParser.SectionNameContext)
            else:
                return self.getTypedRuleContext(kernSpineParser.SectionNameContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(kernSpineParser.COMMA)
            else:
                return self.getToken(kernSpineParser.COMMA, i)

        def getRuleIndex(self):
            return kernSpineParser.RULE_sectionNames

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSectionNames" ):
                listener.enterSectionNames(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSectionNames" ):
                listener.exitSectionNames(self)




    def sectionNames(self):

        localctx = kernSpineParser.SectionNamesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_sectionNames)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 473
            self.sectionName()
            self.state = 478
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==137:
                self.state = 474
                self.match(kernSpineParser.COMMA)
                self.state = 475
                self.sectionName()
                self.state = 480
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SectionNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CHAR_A(self, i:int=None):
            if i is None:
                return self.getTokens(kernSpineParser.CHAR_A)
            else:
                return self.getToken(kernSpineParser.CHAR_A, i)

        def CHAR_B(self, i:int=None):
            if i is None:
                return self.getTokens(kernSpineParser.CHAR_B)
            else:
                return self.getToken(kernSpineParser.CHAR_B, i)

        def CHAR_C(self, i:int=None):
            if i is None:
                return self.getTokens(kernSpineParser.CHAR_C)
            else:
                return self.getToken(kernSpineParser.CHAR_C, i)

        def CHAR_D(self, i:int=None):
            if i is None:
                return self.getTokens(kernSpineParser.CHAR_D)
            else:
                return self.getToken(kernSpineParser.CHAR_D, i)

        def CHAR_E(self, i:int=None):
            if i is None:
                return self.getTokens(kernSpineParser.CHAR_E)
            else:
                return self.getToken(kernSpineParser.CHAR_E, i)

        def CHAR_F(self, i:int=None):
            if i is None:
                return self.getTokens(kernSpineParser.CHAR_F)
            else:
                return self.getToken(kernSpineParser.CHAR_F, i)

        def CHAR_G(self, i:int=None):
            if i is None:
                return self.getTokens(kernSpineParser.CHAR_G)
            else:
                return self.getToken(kernSpineParser.CHAR_G, i)

        def CHAR_H(self, i:int=None):
            if i is None:
                return self.getTokens(kernSpineParser.CHAR_H)
            else:
                return self.getToken(kernSpineParser.CHAR_H, i)

        def CHAR_I(self, i:int=None):
            if i is None:
                return self.getTokens(kernSpineParser.CHAR_I)
            else:
                return self.getToken(kernSpineParser.CHAR_I, i)

        def CHAR_J(self, i:int=None):
            if i is None:
                return self.getTokens(kernSpineParser.CHAR_J)
            else:
                return self.getToken(kernSpineParser.CHAR_J, i)

        def CHAR_K(self, i:int=None):
            if i is None:
                return self.getTokens(kernSpineParser.CHAR_K)
            else:
                return self.getToken(kernSpineParser.CHAR_K, i)

        def CHAR_L(self, i:int=None):
            if i is None:
                return self.getTokens(kernSpineParser.CHAR_L)
            else:
                return self.getToken(kernSpineParser.CHAR_L, i)

        def CHAR_M(self, i:int=None):
            if i is None:
                return self.getTokens(kernSpineParser.CHAR_M)
            else:
                return self.getToken(kernSpineParser.CHAR_M, i)

        def CHAR_N(self, i:int=None):
            if i is None:
                return self.getTokens(kernSpineParser.CHAR_N)
            else:
                return self.getToken(kernSpineParser.CHAR_N, i)

        def CHAR_O(self, i:int=None):
            if i is None:
                return self.getTokens(kernSpineParser.CHAR_O)
            else:
                return self.getToken(kernSpineParser.CHAR_O, i)

        def CHAR_P(self, i:int=None):
            if i is None:
                return self.getTokens(kernSpineParser.CHAR_P)
            else:
                return self.getToken(kernSpineParser.CHAR_P, i)

        def CHAR_Q(self, i:int=None):
            if i is None:
                return self.getTokens(kernSpineParser.CHAR_Q)
            else:
                return self.getToken(kernSpineParser.CHAR_Q, i)

        def CHAR_R(self, i:int=None):
            if i is None:
                return self.getTokens(kernSpineParser.CHAR_R)
            else:
                return self.getToken(kernSpineParser.CHAR_R, i)

        def CHAR_S(self, i:int=None):
            if i is None:
                return self.getTokens(kernSpineParser.CHAR_S)
            else:
                return self.getToken(kernSpineParser.CHAR_S, i)

        def CHAR_T(self, i:int=None):
            if i is None:
                return self.getTokens(kernSpineParser.CHAR_T)
            else:
                return self.getToken(kernSpineParser.CHAR_T, i)

        def CHAR_U(self, i:int=None):
            if i is None:
                return self.getTokens(kernSpineParser.CHAR_U)
            else:
                return self.getToken(kernSpineParser.CHAR_U, i)

        def CHAR_V(self, i:int=None):
            if i is None:
                return self.getTokens(kernSpineParser.CHAR_V)
            else:
                return self.getToken(kernSpineParser.CHAR_V, i)

        def CHAR_W(self, i:int=None):
            if i is None:
                return self.getTokens(kernSpineParser.CHAR_W)
            else:
                return self.getToken(kernSpineParser.CHAR_W, i)

        def CHAR_X(self, i:int=None):
            if i is None:
                return self.getTokens(kernSpineParser.CHAR_X)
            else:
                return self.getToken(kernSpineParser.CHAR_X, i)

        def CHAR_Y(self, i:int=None):
            if i is None:
                return self.getTokens(kernSpineParser.CHAR_Y)
            else:
                return self.getToken(kernSpineParser.CHAR_Y, i)

        def CHAR_Z(self, i:int=None):
            if i is None:
                return self.getTokens(kernSpineParser.CHAR_Z)
            else:
                return self.getToken(kernSpineParser.CHAR_Z, i)

        def CHAR_a(self, i:int=None):
            if i is None:
                return self.getTokens(kernSpineParser.CHAR_a)
            else:
                return self.getToken(kernSpineParser.CHAR_a, i)

        def CHAR_b(self, i:int=None):
            if i is None:
                return self.getTokens(kernSpineParser.CHAR_b)
            else:
                return self.getToken(kernSpineParser.CHAR_b, i)

        def CHAR_c(self, i:int=None):
            if i is None:
                return self.getTokens(kernSpineParser.CHAR_c)
            else:
                return self.getToken(kernSpineParser.CHAR_c, i)

        def CHAR_d(self, i:int=None):
            if i is None:
                return self.getTokens(kernSpineParser.CHAR_d)
            else:
                return self.getToken(kernSpineParser.CHAR_d, i)

        def CHAR_e(self, i:int=None):
            if i is None:
                return self.getTokens(kernSpineParser.CHAR_e)
            else:
                return self.getToken(kernSpineParser.CHAR_e, i)

        def CHAR_f(self, i:int=None):
            if i is None:
                return self.getTokens(kernSpineParser.CHAR_f)
            else:
                return self.getToken(kernSpineParser.CHAR_f, i)

        def CHAR_g(self, i:int=None):
            if i is None:
                return self.getTokens(kernSpineParser.CHAR_g)
            else:
                return self.getToken(kernSpineParser.CHAR_g, i)

        def CHAR_h(self, i:int=None):
            if i is None:
                return self.getTokens(kernSpineParser.CHAR_h)
            else:
                return self.getToken(kernSpineParser.CHAR_h, i)

        def CHAR_i(self, i:int=None):
            if i is None:
                return self.getTokens(kernSpineParser.CHAR_i)
            else:
                return self.getToken(kernSpineParser.CHAR_i, i)

        def CHAR_j(self, i:int=None):
            if i is None:
                return self.getTokens(kernSpineParser.CHAR_j)
            else:
                return self.getToken(kernSpineParser.CHAR_j, i)

        def CHAR_k(self, i:int=None):
            if i is None:
                return self.getTokens(kernSpineParser.CHAR_k)
            else:
                return self.getToken(kernSpineParser.CHAR_k, i)

        def CHAR_l(self, i:int=None):
            if i is None:
                return self.getTokens(kernSpineParser.CHAR_l)
            else:
                return self.getToken(kernSpineParser.CHAR_l, i)

        def CHAR_m(self, i:int=None):
            if i is None:
                return self.getTokens(kernSpineParser.CHAR_m)
            else:
                return self.getToken(kernSpineParser.CHAR_m, i)

        def CHAR_n(self, i:int=None):
            if i is None:
                return self.getTokens(kernSpineParser.CHAR_n)
            else:
                return self.getToken(kernSpineParser.CHAR_n, i)

        def CHAR_o(self, i:int=None):
            if i is None:
                return self.getTokens(kernSpineParser.CHAR_o)
            else:
                return self.getToken(kernSpineParser.CHAR_o, i)

        def CHAR_p(self, i:int=None):
            if i is None:
                return self.getTokens(kernSpineParser.CHAR_p)
            else:
                return self.getToken(kernSpineParser.CHAR_p, i)

        def CHAR_q(self, i:int=None):
            if i is None:
                return self.getTokens(kernSpineParser.CHAR_q)
            else:
                return self.getToken(kernSpineParser.CHAR_q, i)

        def CHAR_r(self, i:int=None):
            if i is None:
                return self.getTokens(kernSpineParser.CHAR_r)
            else:
                return self.getToken(kernSpineParser.CHAR_r, i)

        def CHAR_s(self, i:int=None):
            if i is None:
                return self.getTokens(kernSpineParser.CHAR_s)
            else:
                return self.getToken(kernSpineParser.CHAR_s, i)

        def CHAR_t(self, i:int=None):
            if i is None:
                return self.getTokens(kernSpineParser.CHAR_t)
            else:
                return self.getToken(kernSpineParser.CHAR_t, i)

        def CHAR_u(self, i:int=None):
            if i is None:
                return self.getTokens(kernSpineParser.CHAR_u)
            else:
                return self.getToken(kernSpineParser.CHAR_u, i)

        def CHAR_v(self, i:int=None):
            if i is None:
                return self.getTokens(kernSpineParser.CHAR_v)
            else:
                return self.getToken(kernSpineParser.CHAR_v, i)

        def CHAR_w(self, i:int=None):
            if i is None:
                return self.getTokens(kernSpineParser.CHAR_w)
            else:
                return self.getToken(kernSpineParser.CHAR_w, i)

        def CHAR_x(self, i:int=None):
            if i is None:
                return self.getTokens(kernSpineParser.CHAR_x)
            else:
                return self.getToken(kernSpineParser.CHAR_x, i)

        def CHAR_y(self, i:int=None):
            if i is None:
                return self.getTokens(kernSpineParser.CHAR_y)
            else:
                return self.getToken(kernSpineParser.CHAR_y, i)

        def CHAR_z(self, i:int=None):
            if i is None:
                return self.getTokens(kernSpineParser.CHAR_z)
            else:
                return self.getToken(kernSpineParser.CHAR_z, i)

        def SPACE(self, i:int=None):
            if i is None:
                return self.getTokens(kernSpineParser.SPACE)
            else:
                return self.getToken(kernSpineParser.SPACE, i)

        def number(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(kernSpineParser.NumberContext)
            else:
                return self.getTypedRuleContext(kernSpineParser.NumberContext,i)


        def getRuleIndex(self):
            return kernSpineParser.RULE_sectionName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSectionName" ):
                listener.enterSectionName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSectionName" ):
                listener.exitSectionName(self)




    def sectionName(self):

        localctx = kernSpineParser.SectionNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_sectionName)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 535 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 535
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [44]:
                    self.state = 481
                    self.match(kernSpineParser.CHAR_A)
                    pass
                elif token in [45]:
                    self.state = 482
                    self.match(kernSpineParser.CHAR_B)
                    pass
                elif token in [46]:
                    self.state = 483
                    self.match(kernSpineParser.CHAR_C)
                    pass
                elif token in [47]:
                    self.state = 484
                    self.match(kernSpineParser.CHAR_D)
                    pass
                elif token in [48]:
                    self.state = 485
                    self.match(kernSpineParser.CHAR_E)
                    pass
                elif token in [49]:
                    self.state = 486
                    self.match(kernSpineParser.CHAR_F)
                    pass
                elif token in [50]:
                    self.state = 487
                    self.match(kernSpineParser.CHAR_G)
                    pass
                elif token in [51]:
                    self.state = 488
                    self.match(kernSpineParser.CHAR_H)
                    pass
                elif token in [52]:
                    self.state = 489
                    self.match(kernSpineParser.CHAR_I)
                    pass
                elif token in [53]:
                    self.state = 490
                    self.match(kernSpineParser.CHAR_J)
                    pass
                elif token in [54]:
                    self.state = 491
                    self.match(kernSpineParser.CHAR_K)
                    pass
                elif token in [55]:
                    self.state = 492
                    self.match(kernSpineParser.CHAR_L)
                    pass
                elif token in [56]:
                    self.state = 493
                    self.match(kernSpineParser.CHAR_M)
                    pass
                elif token in [57]:
                    self.state = 494
                    self.match(kernSpineParser.CHAR_N)
                    pass
                elif token in [58]:
                    self.state = 495
                    self.match(kernSpineParser.CHAR_O)
                    pass
                elif token in [59]:
                    self.state = 496
                    self.match(kernSpineParser.CHAR_P)
                    pass
                elif token in [60]:
                    self.state = 497
                    self.match(kernSpineParser.CHAR_Q)
                    pass
                elif token in [61]:
                    self.state = 498
                    self.match(kernSpineParser.CHAR_R)
                    pass
                elif token in [62]:
                    self.state = 499
                    self.match(kernSpineParser.CHAR_S)
                    pass
                elif token in [63]:
                    self.state = 500
                    self.match(kernSpineParser.CHAR_T)
                    pass
                elif token in [64]:
                    self.state = 501
                    self.match(kernSpineParser.CHAR_U)
                    pass
                elif token in [65]:
                    self.state = 502
                    self.match(kernSpineParser.CHAR_V)
                    pass
                elif token in [66]:
                    self.state = 503
                    self.match(kernSpineParser.CHAR_W)
                    pass
                elif token in [67]:
                    self.state = 504
                    self.match(kernSpineParser.CHAR_X)
                    pass
                elif token in [68]:
                    self.state = 505
                    self.match(kernSpineParser.CHAR_Y)
                    pass
                elif token in [69]:
                    self.state = 506
                    self.match(kernSpineParser.CHAR_Z)
                    pass
                elif token in [70]:
                    self.state = 507
                    self.match(kernSpineParser.CHAR_a)
                    pass
                elif token in [71]:
                    self.state = 508
                    self.match(kernSpineParser.CHAR_b)
                    pass
                elif token in [72]:
                    self.state = 509
                    self.match(kernSpineParser.CHAR_c)
                    pass
                elif token in [73]:
                    self.state = 510
                    self.match(kernSpineParser.CHAR_d)
                    pass
                elif token in [74]:
                    self.state = 511
                    self.match(kernSpineParser.CHAR_e)
                    pass
                elif token in [75]:
                    self.state = 512
                    self.match(kernSpineParser.CHAR_f)
                    pass
                elif token in [76]:
                    self.state = 513
                    self.match(kernSpineParser.CHAR_g)
                    pass
                elif token in [77]:
                    self.state = 514
                    self.match(kernSpineParser.CHAR_h)
                    pass
                elif token in [78]:
                    self.state = 515
                    self.match(kernSpineParser.CHAR_i)
                    pass
                elif token in [79]:
                    self.state = 516
                    self.match(kernSpineParser.CHAR_j)
                    pass
                elif token in [80]:
                    self.state = 517
                    self.match(kernSpineParser.CHAR_k)
                    pass
                elif token in [81]:
                    self.state = 518
                    self.match(kernSpineParser.CHAR_l)
                    pass
                elif token in [82]:
                    self.state = 519
                    self.match(kernSpineParser.CHAR_m)
                    pass
                elif token in [83]:
                    self.state = 520
                    self.match(kernSpineParser.CHAR_n)
                    pass
                elif token in [84]:
                    self.state = 521
                    self.match(kernSpineParser.CHAR_o)
                    pass
                elif token in [85]:
                    self.state = 522
                    self.match(kernSpineParser.CHAR_p)
                    pass
                elif token in [86]:
                    self.state = 523
                    self.match(kernSpineParser.CHAR_q)
                    pass
                elif token in [87]:
                    self.state = 524
                    self.match(kernSpineParser.CHAR_r)
                    pass
                elif token in [88]:
                    self.state = 525
                    self.match(kernSpineParser.CHAR_s)
                    pass
                elif token in [89]:
                    self.state = 526
                    self.match(kernSpineParser.CHAR_t)
                    pass
                elif token in [90]:
                    self.state = 527
                    self.match(kernSpineParser.CHAR_u)
                    pass
                elif token in [91]:
                    self.state = 528
                    self.match(kernSpineParser.CHAR_v)
                    pass
                elif token in [92]:
                    self.state = 529
                    self.match(kernSpineParser.CHAR_w)
                    pass
                elif token in [93]:
                    self.state = 530
                    self.match(kernSpineParser.CHAR_x)
                    pass
                elif token in [94]:
                    self.state = 531
                    self.match(kernSpineParser.CHAR_y)
                    pass
                elif token in [95]:
                    self.state = 532
                    self.match(kernSpineParser.CHAR_z)
                    pass
                elif token in [139]:
                    self.state = 533
                    self.match(kernSpineParser.SPACE)
                    pass
                elif token in [97, 98, 99, 100, 101, 102, 103, 104, 105, 106]:
                    self.state = 534
                    self.number()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 537 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (((((_la - 44)) & ~0x3f) == 0 and ((1 << (_la - 44)) & 9218868437227405311) != 0) or _la==139):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TranspositionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TANDEM_TRANSPOSITION(self):
            return self.getToken(kernSpineParser.TANDEM_TRANSPOSITION, 0)

        def CHAR_d(self):
            return self.getToken(kernSpineParser.CHAR_d, 0)

        def number(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(kernSpineParser.NumberContext)
            else:
                return self.getTypedRuleContext(kernSpineParser.NumberContext,i)


        def CHAR_c(self):
            return self.getToken(kernSpineParser.CHAR_c, 0)

        def MINUS(self, i:int=None):
            if i is None:
                return self.getTokens(kernSpineParser.MINUS)
            else:
                return self.getToken(kernSpineParser.MINUS, i)

        def getRuleIndex(self):
            return kernSpineParser.RULE_transposition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTransposition" ):
                listener.enterTransposition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTransposition" ):
                listener.exitTransposition(self)




    def transposition(self):

        localctx = kernSpineParser.TranspositionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_transposition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 539
            self.match(kernSpineParser.TANDEM_TRANSPOSITION)
            self.state = 540
            self.match(kernSpineParser.CHAR_d)
            self.state = 542
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==120:
                self.state = 541
                self.match(kernSpineParser.MINUS)


            self.state = 544
            self.number()
            self.state = 545
            self.match(kernSpineParser.CHAR_c)
            self.state = 547
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==120:
                self.state = 546
                self.match(kernSpineParser.MINUS)


            self.state = 549
            self.number()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InstrumentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INSTRUMENT(self):
            return self.getToken(kernSpineParser.INSTRUMENT, 0)

        def getRuleIndex(self):
            return kernSpineParser.RULE_instrument

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInstrument" ):
                listener.enterInstrument(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInstrument" ):
                listener.exitInstrument(self)




    def instrument(self):

        localctx = kernSpineParser.InstrumentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_instrument)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 551
            self.match(kernSpineParser.INSTRUMENT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InstrumentTitleContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INSTRUMENT_TITLE(self):
            return self.getToken(kernSpineParser.INSTRUMENT_TITLE, 0)

        def getRuleIndex(self):
            return kernSpineParser.RULE_instrumentTitle

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInstrumentTitle" ):
                listener.enterInstrumentTitle(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInstrumentTitle" ):
                listener.exitInstrumentTitle(self)




    def instrumentTitle(self):

        localctx = kernSpineParser.InstrumentTitleContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_instrumentTitle)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 553
            self.match(kernSpineParser.INSTRUMENT_TITLE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NumberContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DIGIT_0(self, i:int=None):
            if i is None:
                return self.getTokens(kernSpineParser.DIGIT_0)
            else:
                return self.getToken(kernSpineParser.DIGIT_0, i)

        def DIGIT_1(self, i:int=None):
            if i is None:
                return self.getTokens(kernSpineParser.DIGIT_1)
            else:
                return self.getToken(kernSpineParser.DIGIT_1, i)

        def DIGIT_2(self, i:int=None):
            if i is None:
                return self.getTokens(kernSpineParser.DIGIT_2)
            else:
                return self.getToken(kernSpineParser.DIGIT_2, i)

        def DIGIT_3(self, i:int=None):
            if i is None:
                return self.getTokens(kernSpineParser.DIGIT_3)
            else:
                return self.getToken(kernSpineParser.DIGIT_3, i)

        def DIGIT_4(self, i:int=None):
            if i is None:
                return self.getTokens(kernSpineParser.DIGIT_4)
            else:
                return self.getToken(kernSpineParser.DIGIT_4, i)

        def DIGIT_5(self, i:int=None):
            if i is None:
                return self.getTokens(kernSpineParser.DIGIT_5)
            else:
                return self.getToken(kernSpineParser.DIGIT_5, i)

        def DIGIT_6(self, i:int=None):
            if i is None:
                return self.getTokens(kernSpineParser.DIGIT_6)
            else:
                return self.getToken(kernSpineParser.DIGIT_6, i)

        def DIGIT_7(self, i:int=None):
            if i is None:
                return self.getTokens(kernSpineParser.DIGIT_7)
            else:
                return self.getToken(kernSpineParser.DIGIT_7, i)

        def DIGIT_8(self, i:int=None):
            if i is None:
                return self.getTokens(kernSpineParser.DIGIT_8)
            else:
                return self.getToken(kernSpineParser.DIGIT_8, i)

        def DIGIT_9(self, i:int=None):
            if i is None:
                return self.getTokens(kernSpineParser.DIGIT_9)
            else:
                return self.getToken(kernSpineParser.DIGIT_9, i)

        def getRuleIndex(self):
            return kernSpineParser.RULE_number

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNumber" ):
                listener.enterNumber(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNumber" ):
                listener.exitNumber(self)




    def number(self):

        localctx = kernSpineParser.NumberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_number)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 556 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 555
                    _la = self._input.LA(1)
                    if not(((((_la - 97)) & ~0x3f) == 0 and ((1 << (_la - 97)) & 1023) != 0)):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()

                else:
                    raise NoViableAltException(self)
                self.state = 558 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,32,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LowerCasePitchContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CHAR_a(self):
            return self.getToken(kernSpineParser.CHAR_a, 0)

        def CHAR_b(self):
            return self.getToken(kernSpineParser.CHAR_b, 0)

        def CHAR_c(self):
            return self.getToken(kernSpineParser.CHAR_c, 0)

        def CHAR_d(self):
            return self.getToken(kernSpineParser.CHAR_d, 0)

        def CHAR_e(self):
            return self.getToken(kernSpineParser.CHAR_e, 0)

        def CHAR_f(self):
            return self.getToken(kernSpineParser.CHAR_f, 0)

        def CHAR_g(self):
            return self.getToken(kernSpineParser.CHAR_g, 0)

        def getRuleIndex(self):
            return kernSpineParser.RULE_lowerCasePitch

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLowerCasePitch" ):
                listener.enterLowerCasePitch(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLowerCasePitch" ):
                listener.exitLowerCasePitch(self)




    def lowerCasePitch(self):

        localctx = kernSpineParser.LowerCasePitchContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_lowerCasePitch)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 560
            _la = self._input.LA(1)
            if not(((((_la - 70)) & ~0x3f) == 0 and ((1 << (_la - 70)) & 127) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UpperCasePitchContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CHAR_A(self):
            return self.getToken(kernSpineParser.CHAR_A, 0)

        def CHAR_B(self):
            return self.getToken(kernSpineParser.CHAR_B, 0)

        def CHAR_C(self):
            return self.getToken(kernSpineParser.CHAR_C, 0)

        def CHAR_D(self):
            return self.getToken(kernSpineParser.CHAR_D, 0)

        def CHAR_E(self):
            return self.getToken(kernSpineParser.CHAR_E, 0)

        def CHAR_F(self):
            return self.getToken(kernSpineParser.CHAR_F, 0)

        def CHAR_G(self):
            return self.getToken(kernSpineParser.CHAR_G, 0)

        def getRuleIndex(self):
            return kernSpineParser.RULE_upperCasePitch

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUpperCasePitch" ):
                listener.enterUpperCasePitch(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUpperCasePitch" ):
                listener.exitUpperCasePitch(self)




    def upperCasePitch(self):

        localctx = kernSpineParser.UpperCasePitchContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_upperCasePitch)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 562
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 2234207627640832) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PitchClassContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def lowerCasePitch(self):
            return self.getTypedRuleContext(kernSpineParser.LowerCasePitchContext,0)


        def accidental(self):
            return self.getTypedRuleContext(kernSpineParser.AccidentalContext,0)


        def getRuleIndex(self):
            return kernSpineParser.RULE_pitchClass

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPitchClass" ):
                listener.enterPitchClass(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPitchClass" ):
                listener.exitPitchClass(self)




    def pitchClass(self):

        localctx = kernSpineParser.PitchClassContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_pitchClass)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 564
            self.lowerCasePitch()
            self.state = 565
            self.accidental()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AccompContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TANDEM_ACCOMP(self):
            return self.getToken(kernSpineParser.TANDEM_ACCOMP, 0)

        def getRuleIndex(self):
            return kernSpineParser.RULE_accomp

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAccomp" ):
                listener.enterAccomp(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAccomp" ):
                listener.exitAccomp(self)




    def accomp(self):

        localctx = kernSpineParser.AccompContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_accomp)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 567
            self.match(kernSpineParser.TANDEM_ACCOMP)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SoloContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TANDEM_SOLO(self):
            return self.getToken(kernSpineParser.TANDEM_SOLO, 0)

        def getRuleIndex(self):
            return kernSpineParser.RULE_solo

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSolo" ):
                listener.enterSolo(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSolo" ):
                listener.exitSolo(self)




    def solo(self):

        localctx = kernSpineParser.SoloContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_solo)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 569
            self.match(kernSpineParser.TANDEM_SOLO)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StropheContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TANDEM_STROPHE(self):
            return self.getToken(kernSpineParser.TANDEM_STROPHE, 0)

        def getRuleIndex(self):
            return kernSpineParser.RULE_strophe

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStrophe" ):
                listener.enterStrophe(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStrophe" ):
                listener.exitStrophe(self)




    def strophe(self):

        localctx = kernSpineParser.StropheContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_strophe)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 571
            self.match(kernSpineParser.TANDEM_STROPHE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TimebaseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TANDEM_TIMEBASE(self):
            return self.getToken(kernSpineParser.TANDEM_TIMEBASE, 0)

        def number(self):
            return self.getTypedRuleContext(kernSpineParser.NumberContext,0)


        def getRuleIndex(self):
            return kernSpineParser.RULE_timebase

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTimebase" ):
                listener.enterTimebase(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTimebase" ):
                listener.exitTimebase(self)




    def timebase(self):

        localctx = kernSpineParser.TimebaseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_timebase)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 573
            self.match(kernSpineParser.TANDEM_TIMEBASE)
            self.state = 574
            self.number()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PartContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TANDEM_PART(self):
            return self.getToken(kernSpineParser.TANDEM_PART, 0)

        def number(self):
            return self.getTypedRuleContext(kernSpineParser.NumberContext,0)


        def getRuleIndex(self):
            return kernSpineParser.RULE_part

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPart" ):
                listener.enterPart(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPart" ):
                listener.exitPart(self)




    def part(self):

        localctx = kernSpineParser.PartContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_part)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 576
            self.match(kernSpineParser.TANDEM_PART)
            self.state = 577
            self.number()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StaffContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TANDEM_STAFF(self):
            return self.getToken(kernSpineParser.TANDEM_STAFF, 0)

        def number(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(kernSpineParser.NumberContext)
            else:
                return self.getTypedRuleContext(kernSpineParser.NumberContext,i)


        def PLUS(self):
            return self.getToken(kernSpineParser.PLUS, 0)

        def SLASH(self):
            return self.getToken(kernSpineParser.SLASH, 0)

        def getRuleIndex(self):
            return kernSpineParser.RULE_staff

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStaff" ):
                listener.enterStaff(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStaff" ):
                listener.exitStaff(self)




    def staff(self):

        localctx = kernSpineParser.StaffContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_staff)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 579
            self.match(kernSpineParser.TANDEM_STAFF)
            self.state = 581
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==119:
                self.state = 580
                self.match(kernSpineParser.PLUS)


            self.state = 583
            self.number()
            self.state = 586
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==129:
                self.state = 584
                self.match(kernSpineParser.SLASH)
                self.state = 585
                self.number()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ClefContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TANDEM_CLEF(self):
            return self.getToken(kernSpineParser.TANDEM_CLEF, 0)

        def clefValue(self):
            return self.getTypedRuleContext(kernSpineParser.ClefValueContext,0)


        def getRuleIndex(self):
            return kernSpineParser.RULE_clef

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClef" ):
                listener.enterClef(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClef" ):
                listener.exitClef(self)




    def clef(self):

        localctx = kernSpineParser.ClefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_clef)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 588
            self.match(kernSpineParser.TANDEM_CLEF)
            self.state = 589
            self.clefValue()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ClefValueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def clefSign(self):
            return self.getTypedRuleContext(kernSpineParser.ClefSignContext,0)


        def clefLine(self):
            return self.getTypedRuleContext(kernSpineParser.ClefLineContext,0)


        def clefOctave(self):
            return self.getTypedRuleContext(kernSpineParser.ClefOctaveContext,0)


        def getRuleIndex(self):
            return kernSpineParser.RULE_clefValue

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClefValue" ):
                listener.enterClefValue(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClefValue" ):
                listener.exitClefValue(self)




    def clefValue(self):

        localctx = kernSpineParser.ClefValueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_clefValue)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 591
            self.clefSign()
            self.state = 593
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 98)) & ~0x3f) == 0 and ((1 << (_la - 98)) & 31) != 0):
                self.state = 592
                self.clefLine()


            self.state = 596
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==91 or _la==125:
                self.state = 595
                self.clefOctave()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ClefSignContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CHAR_C(self):
            return self.getToken(kernSpineParser.CHAR_C, 0)

        def CHAR_F(self):
            return self.getToken(kernSpineParser.CHAR_F, 0)

        def CHAR_G(self):
            return self.getToken(kernSpineParser.CHAR_G, 0)

        def CHAR_P(self):
            return self.getToken(kernSpineParser.CHAR_P, 0)

        def CHAR_T(self):
            return self.getToken(kernSpineParser.CHAR_T, 0)

        def getRuleIndex(self):
            return kernSpineParser.RULE_clefSign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClefSign" ):
                listener.enterClefSign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClefSign" ):
                listener.exitClefSign(self)




    def clefSign(self):

        localctx = kernSpineParser.ClefSignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_clefSign)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 598
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & -8645152065946910720) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ClefLineContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DIGIT_1(self):
            return self.getToken(kernSpineParser.DIGIT_1, 0)

        def DIGIT_2(self):
            return self.getToken(kernSpineParser.DIGIT_2, 0)

        def DIGIT_3(self):
            return self.getToken(kernSpineParser.DIGIT_3, 0)

        def DIGIT_4(self):
            return self.getToken(kernSpineParser.DIGIT_4, 0)

        def DIGIT_5(self):
            return self.getToken(kernSpineParser.DIGIT_5, 0)

        def getRuleIndex(self):
            return kernSpineParser.RULE_clefLine

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClefLine" ):
                listener.enterClefLine(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClefLine" ):
                listener.exitClefLine(self)




    def clefLine(self):

        localctx = kernSpineParser.ClefLineContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_clefLine)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 600
            _la = self._input.LA(1)
            if not(((((_la - 98)) & ~0x3f) == 0 and ((1 << (_la - 98)) & 31) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ClefOctaveContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CHAR_v(self, i:int=None):
            if i is None:
                return self.getTokens(kernSpineParser.CHAR_v)
            else:
                return self.getToken(kernSpineParser.CHAR_v, i)

        def DIGIT_2(self):
            return self.getToken(kernSpineParser.DIGIT_2, 0)

        def CIRCUMFLEX(self, i:int=None):
            if i is None:
                return self.getTokens(kernSpineParser.CIRCUMFLEX)
            else:
                return self.getToken(kernSpineParser.CIRCUMFLEX, i)

        def getRuleIndex(self):
            return kernSpineParser.RULE_clefOctave

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClefOctave" ):
                listener.enterClefOctave(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClefOctave" ):
                listener.exitClefOctave(self)




    def clefOctave(self):

        localctx = kernSpineParser.ClefOctaveContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_clefOctave)
        self._la = 0 # Token type
        try:
            self.state = 612
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [91]:
                self.enterOuterAlt(localctx, 1)
                self.state = 602
                self.match(kernSpineParser.CHAR_v)
                self.state = 604
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==91:
                    self.state = 603
                    self.match(kernSpineParser.CHAR_v)


                self.state = 606
                self.match(kernSpineParser.DIGIT_2)
                pass
            elif token in [125]:
                self.enterOuterAlt(localctx, 2)
                self.state = 607
                self.match(kernSpineParser.CIRCUMFLEX)
                self.state = 609
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==125:
                    self.state = 608
                    self.match(kernSpineParser.CIRCUMFLEX)


                self.state = 611
                self.match(kernSpineParser.DIGIT_2)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class KeySignatureContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TANDEM_KEY_SIGNATURE(self):
            return self.getToken(kernSpineParser.TANDEM_KEY_SIGNATURE, 0)

        def LEFT_BRACKET(self):
            return self.getToken(kernSpineParser.LEFT_BRACKET, 0)

        def RIGHT_BRACKET(self):
            return self.getToken(kernSpineParser.RIGHT_BRACKET, 0)

        def keySignaturePitchClass(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(kernSpineParser.KeySignaturePitchClassContext)
            else:
                return self.getTypedRuleContext(kernSpineParser.KeySignaturePitchClassContext,i)


        def keySignatureCancel(self):
            return self.getTypedRuleContext(kernSpineParser.KeySignatureCancelContext,0)


        def getRuleIndex(self):
            return kernSpineParser.RULE_keySignature

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterKeySignature" ):
                listener.enterKeySignature(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitKeySignature" ):
                listener.exitKeySignature(self)




    def keySignature(self):

        localctx = kernSpineParser.KeySignatureContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_keySignature)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 614
            self.match(kernSpineParser.TANDEM_KEY_SIGNATURE)
            self.state = 615
            self.match(kernSpineParser.LEFT_BRACKET)
            self.state = 619
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 70)) & ~0x3f) == 0 and ((1 << (_la - 70)) & 127) != 0):
                self.state = 616
                self.keySignaturePitchClass()
                self.state = 621
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 622
            self.match(kernSpineParser.RIGHT_BRACKET)
            self.state = 624
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==67:
                self.state = 623
                self.keySignatureCancel()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class KeySignaturePitchClassContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def pitchClass(self):
            return self.getTypedRuleContext(kernSpineParser.PitchClassContext,0)


        def getRuleIndex(self):
            return kernSpineParser.RULE_keySignaturePitchClass

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterKeySignaturePitchClass" ):
                listener.enterKeySignaturePitchClass(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitKeySignaturePitchClass" ):
                listener.exitKeySignaturePitchClass(self)




    def keySignaturePitchClass(self):

        localctx = kernSpineParser.KeySignaturePitchClassContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_keySignaturePitchClass)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 626
            self.pitchClass()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class KeySignatureCancelContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CHAR_X(self):
            return self.getToken(kernSpineParser.CHAR_X, 0)

        def getRuleIndex(self):
            return kernSpineParser.RULE_keySignatureCancel

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterKeySignatureCancel" ):
                listener.enterKeySignatureCancel(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitKeySignatureCancel" ):
                listener.exitKeySignatureCancel(self)




    def keySignatureCancel(self):

        localctx = kernSpineParser.KeySignatureCancelContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_keySignatureCancel)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 628
            self.match(kernSpineParser.CHAR_X)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class KeyModeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def minorKey(self):
            return self.getTypedRuleContext(kernSpineParser.MinorKeyContext,0)


        def majorKey(self):
            return self.getTypedRuleContext(kernSpineParser.MajorKeyContext,0)


        def QUESTION_MARK(self):
            return self.getToken(kernSpineParser.QUESTION_MARK, 0)

        def getRuleIndex(self):
            return kernSpineParser.RULE_keyMode

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterKeyMode" ):
                listener.enterKeyMode(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitKeyMode" ):
                listener.exitKeyMode(self)




    def keyMode(self):

        localctx = kernSpineParser.KeyModeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_keyMode)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 633
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [70, 71, 72, 73, 74, 75, 76]:
                self.state = 630
                self.minorKey()
                pass
            elif token in [44, 45, 46, 47, 48, 49, 50]:
                self.state = 631
                self.majorKey()
                pass
            elif token in [138]:
                self.state = 632
                self.match(kernSpineParser.QUESTION_MARK)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class KeyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ASTERISK(self):
            return self.getToken(kernSpineParser.ASTERISK, 0)

        def singleKey(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(kernSpineParser.SingleKeyContext)
            else:
                return self.getTypedRuleContext(kernSpineParser.SingleKeyContext,i)


        def SLASH(self):
            return self.getToken(kernSpineParser.SLASH, 0)

        def getRuleIndex(self):
            return kernSpineParser.RULE_key

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterKey" ):
                listener.enterKey(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitKey" ):
                listener.exitKey(self)




    def key(self):

        localctx = kernSpineParser.KeyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_key)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 635
            self.match(kernSpineParser.ASTERISK)
            self.state = 636
            self.singleKey()
            self.state = 639
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==129:
                self.state = 637
                self.match(kernSpineParser.SLASH)
                self.state = 638
                self.singleKey()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SingleKeyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def keyMode(self):
            return self.getTypedRuleContext(kernSpineParser.KeyModeContext,0)


        def keySignatureCancel(self):
            return self.getTypedRuleContext(kernSpineParser.KeySignatureCancelContext,0)


        def COLON(self):
            return self.getToken(kernSpineParser.COLON, 0)

        def number(self):
            return self.getTypedRuleContext(kernSpineParser.NumberContext,0)


        def modal(self):
            return self.getTypedRuleContext(kernSpineParser.ModalContext,0)


        def getRuleIndex(self):
            return kernSpineParser.RULE_singleKey

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSingleKey" ):
                listener.enterSingleKey(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSingleKey" ):
                listener.exitSingleKey(self)




    def singleKey(self):

        localctx = kernSpineParser.SingleKeyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_singleKey)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 641
            self.keyMode()
            self.state = 643
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==67:
                self.state = 642
                self.keySignatureCancel()


            self.state = 652
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [135]:
                self.state = 645
                self.match(kernSpineParser.COLON)
                self.state = 647
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 70)) & ~0x3f) == 0 and ((1 << (_la - 70)) & 39177) != 0):
                    self.state = 646
                    self.modal()


                pass
            elif token in [-1, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 129]:
                self.state = 650
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 97)) & ~0x3f) == 0 and ((1 << (_la - 97)) & 1023) != 0):
                    self.state = 649
                    self.number()


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MinorKeyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def lowerCasePitch(self):
            return self.getTypedRuleContext(kernSpineParser.LowerCasePitchContext,0)


        def accidental(self):
            return self.getTypedRuleContext(kernSpineParser.AccidentalContext,0)


        def getRuleIndex(self):
            return kernSpineParser.RULE_minorKey

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMinorKey" ):
                listener.enterMinorKey(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMinorKey" ):
                listener.exitMinorKey(self)




    def minorKey(self):

        localctx = kernSpineParser.MinorKeyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_minorKey)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 654
            self.lowerCasePitch()
            self.state = 656
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 83)) & ~0x3f) == 0 and ((1 << (_la - 83)) & 171798691841) != 0):
                self.state = 655
                self.accidental()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MajorKeyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def upperCasePitch(self):
            return self.getTypedRuleContext(kernSpineParser.UpperCasePitchContext,0)


        def accidental(self):
            return self.getTypedRuleContext(kernSpineParser.AccidentalContext,0)


        def getRuleIndex(self):
            return kernSpineParser.RULE_majorKey

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMajorKey" ):
                listener.enterMajorKey(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMajorKey" ):
                listener.exitMajorKey(self)




    def majorKey(self):

        localctx = kernSpineParser.MajorKeyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 124, self.RULE_majorKey)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 658
            self.upperCasePitch()
            self.state = 660
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 83)) & ~0x3f) == 0 and ((1 << (_la - 83)) & 171798691841) != 0):
                self.state = 659
                self.accidental()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ModalContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def dorian(self):
            return self.getTypedRuleContext(kernSpineParser.DorianContext,0)


        def phrygian(self):
            return self.getTypedRuleContext(kernSpineParser.PhrygianContext,0)


        def lydian(self):
            return self.getTypedRuleContext(kernSpineParser.LydianContext,0)


        def mixolydian(self):
            return self.getTypedRuleContext(kernSpineParser.MixolydianContext,0)


        def aeolian(self):
            return self.getTypedRuleContext(kernSpineParser.AeolianContext,0)


        def ionian(self):
            return self.getTypedRuleContext(kernSpineParser.IonianContext,0)


        def locrian(self):
            return self.getTypedRuleContext(kernSpineParser.LocrianContext,0)


        def getRuleIndex(self):
            return kernSpineParser.RULE_modal

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterModal" ):
                listener.enterModal(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitModal" ):
                listener.exitModal(self)




    def modal(self):

        localctx = kernSpineParser.ModalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 126, self.RULE_modal)
        try:
            self.state = 669
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,50,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 662
                self.dorian()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 663
                self.phrygian()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 664
                self.lydian()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 665
                self.mixolydian()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 666
                self.aeolian()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 667
                self.ionian()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 668
                self.locrian()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LocrianContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CHAR_l(self):
            return self.getToken(kernSpineParser.CHAR_l, 0)

        def CHAR_o(self):
            return self.getToken(kernSpineParser.CHAR_o, 0)

        def CHAR_c(self):
            return self.getToken(kernSpineParser.CHAR_c, 0)

        def getRuleIndex(self):
            return kernSpineParser.RULE_locrian

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLocrian" ):
                listener.enterLocrian(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLocrian" ):
                listener.exitLocrian(self)




    def locrian(self):

        localctx = kernSpineParser.LocrianContext(self, self._ctx, self.state)
        self.enterRule(localctx, 128, self.RULE_locrian)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 671
            self.match(kernSpineParser.CHAR_l)
            self.state = 672
            self.match(kernSpineParser.CHAR_o)
            self.state = 673
            self.match(kernSpineParser.CHAR_c)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IonianContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CHAR_i(self):
            return self.getToken(kernSpineParser.CHAR_i, 0)

        def CHAR_o(self):
            return self.getToken(kernSpineParser.CHAR_o, 0)

        def CHAR_n(self):
            return self.getToken(kernSpineParser.CHAR_n, 0)

        def getRuleIndex(self):
            return kernSpineParser.RULE_ionian

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIonian" ):
                listener.enterIonian(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIonian" ):
                listener.exitIonian(self)




    def ionian(self):

        localctx = kernSpineParser.IonianContext(self, self._ctx, self.state)
        self.enterRule(localctx, 130, self.RULE_ionian)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 675
            self.match(kernSpineParser.CHAR_i)
            self.state = 676
            self.match(kernSpineParser.CHAR_o)
            self.state = 677
            self.match(kernSpineParser.CHAR_n)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AeolianContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CHAR_a(self):
            return self.getToken(kernSpineParser.CHAR_a, 0)

        def CHAR_e(self):
            return self.getToken(kernSpineParser.CHAR_e, 0)

        def CHAR_o(self):
            return self.getToken(kernSpineParser.CHAR_o, 0)

        def getRuleIndex(self):
            return kernSpineParser.RULE_aeolian

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAeolian" ):
                listener.enterAeolian(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAeolian" ):
                listener.exitAeolian(self)




    def aeolian(self):

        localctx = kernSpineParser.AeolianContext(self, self._ctx, self.state)
        self.enterRule(localctx, 132, self.RULE_aeolian)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 679
            self.match(kernSpineParser.CHAR_a)
            self.state = 680
            self.match(kernSpineParser.CHAR_e)
            self.state = 681
            self.match(kernSpineParser.CHAR_o)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MixolydianContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CHAR_m(self):
            return self.getToken(kernSpineParser.CHAR_m, 0)

        def CHAR_i(self):
            return self.getToken(kernSpineParser.CHAR_i, 0)

        def CHAR_x(self):
            return self.getToken(kernSpineParser.CHAR_x, 0)

        def getRuleIndex(self):
            return kernSpineParser.RULE_mixolydian

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMixolydian" ):
                listener.enterMixolydian(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMixolydian" ):
                listener.exitMixolydian(self)




    def mixolydian(self):

        localctx = kernSpineParser.MixolydianContext(self, self._ctx, self.state)
        self.enterRule(localctx, 134, self.RULE_mixolydian)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 683
            self.match(kernSpineParser.CHAR_m)
            self.state = 684
            self.match(kernSpineParser.CHAR_i)
            self.state = 685
            self.match(kernSpineParser.CHAR_x)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LydianContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CHAR_l(self):
            return self.getToken(kernSpineParser.CHAR_l, 0)

        def CHAR_y(self):
            return self.getToken(kernSpineParser.CHAR_y, 0)

        def CHAR_d(self):
            return self.getToken(kernSpineParser.CHAR_d, 0)

        def getRuleIndex(self):
            return kernSpineParser.RULE_lydian

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLydian" ):
                listener.enterLydian(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLydian" ):
                listener.exitLydian(self)




    def lydian(self):

        localctx = kernSpineParser.LydianContext(self, self._ctx, self.state)
        self.enterRule(localctx, 136, self.RULE_lydian)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 687
            self.match(kernSpineParser.CHAR_l)
            self.state = 688
            self.match(kernSpineParser.CHAR_y)
            self.state = 689
            self.match(kernSpineParser.CHAR_d)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PhrygianContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CHAR_p(self):
            return self.getToken(kernSpineParser.CHAR_p, 0)

        def CHAR_h(self):
            return self.getToken(kernSpineParser.CHAR_h, 0)

        def CHAR_r(self):
            return self.getToken(kernSpineParser.CHAR_r, 0)

        def getRuleIndex(self):
            return kernSpineParser.RULE_phrygian

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPhrygian" ):
                listener.enterPhrygian(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPhrygian" ):
                listener.exitPhrygian(self)




    def phrygian(self):

        localctx = kernSpineParser.PhrygianContext(self, self._ctx, self.state)
        self.enterRule(localctx, 138, self.RULE_phrygian)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 691
            self.match(kernSpineParser.CHAR_p)
            self.state = 692
            self.match(kernSpineParser.CHAR_h)
            self.state = 693
            self.match(kernSpineParser.CHAR_r)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DorianContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CHAR_d(self):
            return self.getToken(kernSpineParser.CHAR_d, 0)

        def CHAR_o(self):
            return self.getToken(kernSpineParser.CHAR_o, 0)

        def CHAR_r(self):
            return self.getToken(kernSpineParser.CHAR_r, 0)

        def getRuleIndex(self):
            return kernSpineParser.RULE_dorian

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDorian" ):
                listener.enterDorian(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDorian" ):
                listener.exitDorian(self)




    def dorian(self):

        localctx = kernSpineParser.DorianContext(self, self._ctx, self.state)
        self.enterRule(localctx, 140, self.RULE_dorian)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 695
            self.match(kernSpineParser.CHAR_d)
            self.state = 696
            self.match(kernSpineParser.CHAR_o)
            self.state = 697
            self.match(kernSpineParser.CHAR_r)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TimeSignatureContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TANDEM_TIMESIGNATURE(self):
            return self.getToken(kernSpineParser.TANDEM_TIMESIGNATURE, 0)

        def standardTimeSignature(self):
            return self.getTypedRuleContext(kernSpineParser.StandardTimeSignatureContext,0)


        def additiveTimeSignature(self):
            return self.getTypedRuleContext(kernSpineParser.AdditiveTimeSignatureContext,0)


        def mixedTimeSignature(self):
            return self.getTypedRuleContext(kernSpineParser.MixedTimeSignatureContext,0)


        def alternatingTimeSignature(self):
            return self.getTypedRuleContext(kernSpineParser.AlternatingTimeSignatureContext,0)


        def interchangingTimeSignature(self):
            return self.getTypedRuleContext(kernSpineParser.InterchangingTimeSignatureContext,0)


        def PERCENT(self):
            return self.getToken(kernSpineParser.PERCENT, 0)

        def DIGIT_2(self):
            return self.getToken(kernSpineParser.DIGIT_2, 0)

        def getRuleIndex(self):
            return kernSpineParser.RULE_timeSignature

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTimeSignature" ):
                listener.enterTimeSignature(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTimeSignature" ):
                listener.exitTimeSignature(self)




    def timeSignature(self):

        localctx = kernSpineParser.TimeSignatureContext(self, self._ctx, self.state)
        self.enterRule(localctx, 142, self.RULE_timeSignature)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 699
            self.match(kernSpineParser.TANDEM_TIMESIGNATURE)
            self.state = 705
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,51,self._ctx)
            if la_ == 1:
                self.state = 700
                self.standardTimeSignature()
                pass

            elif la_ == 2:
                self.state = 701
                self.additiveTimeSignature()
                pass

            elif la_ == 3:
                self.state = 702
                self.mixedTimeSignature()
                pass

            elif la_ == 4:
                self.state = 703
                self.alternatingTimeSignature()
                pass

            elif la_ == 5:
                self.state = 704
                self.interchangingTimeSignature()
                pass


            self.state = 709
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==41:
                self.state = 707
                self.match(kernSpineParser.PERCENT)
                self.state = 708
                self.match(kernSpineParser.DIGIT_2)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NumeratorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def number(self):
            return self.getTypedRuleContext(kernSpineParser.NumberContext,0)


        def getRuleIndex(self):
            return kernSpineParser.RULE_numerator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNumerator" ):
                listener.enterNumerator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNumerator" ):
                listener.exitNumerator(self)




    def numerator(self):

        localctx = kernSpineParser.NumeratorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 144, self.RULE_numerator)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 711
            self.number()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DenominatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def number(self):
            return self.getTypedRuleContext(kernSpineParser.NumberContext,0)


        def getRuleIndex(self):
            return kernSpineParser.RULE_denominator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDenominator" ):
                listener.enterDenominator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDenominator" ):
                listener.exitDenominator(self)




    def denominator(self):

        localctx = kernSpineParser.DenominatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 146, self.RULE_denominator)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 713
            self.number()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StandardTimeSignatureContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def numerator(self):
            return self.getTypedRuleContext(kernSpineParser.NumeratorContext,0)


        def SLASH(self):
            return self.getToken(kernSpineParser.SLASH, 0)

        def denominator(self):
            return self.getTypedRuleContext(kernSpineParser.DenominatorContext,0)


        def getRuleIndex(self):
            return kernSpineParser.RULE_standardTimeSignature

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStandardTimeSignature" ):
                listener.enterStandardTimeSignature(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStandardTimeSignature" ):
                listener.exitStandardTimeSignature(self)




    def standardTimeSignature(self):

        localctx = kernSpineParser.StandardTimeSignatureContext(self, self._ctx, self.state)
        self.enterRule(localctx, 148, self.RULE_standardTimeSignature)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 715
            self.numerator()
            self.state = 716
            self.match(kernSpineParser.SLASH)
            self.state = 717
            self.denominator()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AdditiveTimeSignatureContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def numerator(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(kernSpineParser.NumeratorContext)
            else:
                return self.getTypedRuleContext(kernSpineParser.NumeratorContext,i)


        def SLASH(self):
            return self.getToken(kernSpineParser.SLASH, 0)

        def denominator(self):
            return self.getTypedRuleContext(kernSpineParser.DenominatorContext,0)


        def PLUS(self, i:int=None):
            if i is None:
                return self.getTokens(kernSpineParser.PLUS)
            else:
                return self.getToken(kernSpineParser.PLUS, i)

        def getRuleIndex(self):
            return kernSpineParser.RULE_additiveTimeSignature

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAdditiveTimeSignature" ):
                listener.enterAdditiveTimeSignature(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAdditiveTimeSignature" ):
                listener.exitAdditiveTimeSignature(self)




    def additiveTimeSignature(self):

        localctx = kernSpineParser.AdditiveTimeSignatureContext(self, self._ctx, self.state)
        self.enterRule(localctx, 150, self.RULE_additiveTimeSignature)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 719
            self.numerator()
            self.state = 722 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 720
                self.match(kernSpineParser.PLUS)
                self.state = 721
                self.numerator()
                self.state = 724 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==119):
                    break

            self.state = 726
            self.match(kernSpineParser.SLASH)
            self.state = 727
            self.denominator()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MixedTimeSignatureContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def standardTimeSignature(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(kernSpineParser.StandardTimeSignatureContext)
            else:
                return self.getTypedRuleContext(kernSpineParser.StandardTimeSignatureContext,i)


        def PLUS(self, i:int=None):
            if i is None:
                return self.getTokens(kernSpineParser.PLUS)
            else:
                return self.getToken(kernSpineParser.PLUS, i)

        def getRuleIndex(self):
            return kernSpineParser.RULE_mixedTimeSignature

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMixedTimeSignature" ):
                listener.enterMixedTimeSignature(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMixedTimeSignature" ):
                listener.exitMixedTimeSignature(self)




    def mixedTimeSignature(self):

        localctx = kernSpineParser.MixedTimeSignatureContext(self, self._ctx, self.state)
        self.enterRule(localctx, 152, self.RULE_mixedTimeSignature)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 729
            self.standardTimeSignature()
            self.state = 732 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 730
                self.match(kernSpineParser.PLUS)
                self.state = 731
                self.standardTimeSignature()
                self.state = 734 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==119):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlternatingTimeSignatureContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def alternatingTimeSignatureItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(kernSpineParser.AlternatingTimeSignatureItemContext)
            else:
                return self.getTypedRuleContext(kernSpineParser.AlternatingTimeSignatureItemContext,i)


        def COLON(self, i:int=None):
            if i is None:
                return self.getTokens(kernSpineParser.COLON)
            else:
                return self.getToken(kernSpineParser.COLON, i)

        def getRuleIndex(self):
            return kernSpineParser.RULE_alternatingTimeSignature

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlternatingTimeSignature" ):
                listener.enterAlternatingTimeSignature(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlternatingTimeSignature" ):
                listener.exitAlternatingTimeSignature(self)




    def alternatingTimeSignature(self):

        localctx = kernSpineParser.AlternatingTimeSignatureContext(self, self._ctx, self.state)
        self.enterRule(localctx, 154, self.RULE_alternatingTimeSignature)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 736
            self.alternatingTimeSignatureItem()
            self.state = 739 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 737
                self.match(kernSpineParser.COLON)
                self.state = 738
                self.alternatingTimeSignatureItem()
                self.state = 741 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==135):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlternatingTimeSignatureItemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def standardTimeSignature(self):
            return self.getTypedRuleContext(kernSpineParser.StandardTimeSignatureContext,0)


        def SEMICOLON(self):
            return self.getToken(kernSpineParser.SEMICOLON, 0)

        def number(self):
            return self.getTypedRuleContext(kernSpineParser.NumberContext,0)


        def getRuleIndex(self):
            return kernSpineParser.RULE_alternatingTimeSignatureItem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlternatingTimeSignatureItem" ):
                listener.enterAlternatingTimeSignatureItem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlternatingTimeSignatureItem" ):
                listener.exitAlternatingTimeSignatureItem(self)




    def alternatingTimeSignatureItem(self):

        localctx = kernSpineParser.AlternatingTimeSignatureItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 156, self.RULE_alternatingTimeSignatureItem)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 743
            self.standardTimeSignature()
            self.state = 746
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==136:
                self.state = 744
                self.match(kernSpineParser.SEMICOLON)
                self.state = 745
                self.number()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InterchangingTimeSignatureContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def standardTimeSignature(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(kernSpineParser.StandardTimeSignatureContext)
            else:
                return self.getTypedRuleContext(kernSpineParser.StandardTimeSignatureContext,i)


        def PIPE(self):
            return self.getToken(kernSpineParser.PIPE, 0)

        def getRuleIndex(self):
            return kernSpineParser.RULE_interchangingTimeSignature

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInterchangingTimeSignature" ):
                listener.enterInterchangingTimeSignature(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInterchangingTimeSignature" ):
                listener.exitInterchangingTimeSignature(self)




    def interchangingTimeSignature(self):

        localctx = kernSpineParser.InterchangingTimeSignatureContext(self, self._ctx, self.state)
        self.enterRule(localctx, 158, self.RULE_interchangingTimeSignature)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 748
            self.standardTimeSignature()
            self.state = 749
            self.match(kernSpineParser.PIPE)
            self.state = 750
            self.standardTimeSignature()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MeterSymbolContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LEFT_PARENTHESIS(self):
            return self.getToken(kernSpineParser.LEFT_PARENTHESIS, 0)

        def RIGHT_PARENTHESIS(self):
            return self.getToken(kernSpineParser.RIGHT_PARENTHESIS, 0)

        def TANDEM_TIMESIGNATURE(self):
            return self.getToken(kernSpineParser.TANDEM_TIMESIGNATURE, 0)

        def TANDEM_MET(self):
            return self.getToken(kernSpineParser.TANDEM_MET, 0)

        def modernMeterSymbolSign(self):
            return self.getTypedRuleContext(kernSpineParser.ModernMeterSymbolSignContext,0)


        def mensuration(self):
            return self.getTypedRuleContext(kernSpineParser.MensurationContext,0)


        def getRuleIndex(self):
            return kernSpineParser.RULE_meterSymbol

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMeterSymbol" ):
                listener.enterMeterSymbol(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMeterSymbol" ):
                listener.exitMeterSymbol(self)




    def meterSymbol(self):

        localctx = kernSpineParser.MeterSymbolContext(self, self._ctx, self.state)
        self.enterRule(localctx, 160, self.RULE_meterSymbol)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 752
            _la = self._input.LA(1)
            if not(_la==11 or _la==32):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 753
            self.match(kernSpineParser.LEFT_PARENTHESIS)
            self.state = 756
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [72]:
                self.state = 754
                self.modernMeterSymbolSign()
                pass
            elif token in [46, 58, 87, 99, 100, 122, 123, 129]:
                self.state = 755
                self.mensuration()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 758
            self.match(kernSpineParser.RIGHT_PARENTHESIS)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ModernMeterSymbolSignContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CHAR_c(self):
            return self.getToken(kernSpineParser.CHAR_c, 0)

        def PIPE(self):
            return self.getToken(kernSpineParser.PIPE, 0)

        def getRuleIndex(self):
            return kernSpineParser.RULE_modernMeterSymbolSign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterModernMeterSymbolSign" ):
                listener.enterModernMeterSymbolSign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitModernMeterSymbolSign" ):
                listener.exitModernMeterSymbolSign(self)




    def modernMeterSymbolSign(self):

        localctx = kernSpineParser.ModernMeterSymbolSignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 162, self.RULE_modernMeterSymbolSign)
        try:
            self.state = 763
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,58,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 760
                self.match(kernSpineParser.CHAR_c)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 761
                self.match(kernSpineParser.CHAR_c)
                self.state = 762
                self.match(kernSpineParser.PIPE)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MensurationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CHAR_C(self, i:int=None):
            if i is None:
                return self.getTokens(kernSpineParser.CHAR_C)
            else:
                return self.getToken(kernSpineParser.CHAR_C, i)

        def CHAR_O(self, i:int=None):
            if i is None:
                return self.getTokens(kernSpineParser.CHAR_O)
            else:
                return self.getToken(kernSpineParser.CHAR_O, i)

        def DOT(self, i:int=None):
            if i is None:
                return self.getTokens(kernSpineParser.DOT)
            else:
                return self.getToken(kernSpineParser.DOT, i)

        def PIPE(self, i:int=None):
            if i is None:
                return self.getTokens(kernSpineParser.PIPE)
            else:
                return self.getToken(kernSpineParser.PIPE, i)

        def SLASH(self, i:int=None):
            if i is None:
                return self.getTokens(kernSpineParser.SLASH)
            else:
                return self.getToken(kernSpineParser.SLASH, i)

        def DIGIT_2(self, i:int=None):
            if i is None:
                return self.getTokens(kernSpineParser.DIGIT_2)
            else:
                return self.getToken(kernSpineParser.DIGIT_2, i)

        def DIGIT_3(self, i:int=None):
            if i is None:
                return self.getTokens(kernSpineParser.DIGIT_3)
            else:
                return self.getToken(kernSpineParser.DIGIT_3, i)

        def CHAR_r(self, i:int=None):
            if i is None:
                return self.getTokens(kernSpineParser.CHAR_r)
            else:
                return self.getToken(kernSpineParser.CHAR_r, i)

        def getRuleIndex(self):
            return kernSpineParser.RULE_mensuration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMensuration" ):
                listener.enterMensuration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMensuration" ):
                listener.exitMensuration(self)




    def mensuration(self):

        localctx = kernSpineParser.MensurationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 164, self.RULE_mensuration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 766 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 765
                _la = self._input.LA(1)
                if not(_la==46 or _la==58 or ((((_la - 87)) & ~0x3f) == 0 and ((1 << (_la - 87)) & 4501125738497) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 768 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==46 or _la==58 or ((((_la - 87)) & ~0x3f) == 0 and ((1 << (_la - 87)) & 4501125738497) != 0)):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MetronomeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def METRONOME(self):
            return self.getToken(kernSpineParser.METRONOME, 0)

        def number(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(kernSpineParser.NumberContext)
            else:
                return self.getTypedRuleContext(kernSpineParser.NumberContext,i)


        def DOT(self):
            return self.getToken(kernSpineParser.DOT, 0)

        def MINUS(self):
            return self.getToken(kernSpineParser.MINUS, 0)

        def getRuleIndex(self):
            return kernSpineParser.RULE_metronome

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMetronome" ):
                listener.enterMetronome(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMetronome" ):
                listener.exitMetronome(self)




    def metronome(self):

        localctx = kernSpineParser.MetronomeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 166, self.RULE_metronome)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 770
            self.match(kernSpineParser.METRONOME)
            self.state = 771
            self.number()
            self.state = 774
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==120 or _la==122:
                self.state = 772
                _la = self._input.LA(1)
                if not(_la==120 or _la==122):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 773
                self.number()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NullInterpretationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ASTERISK(self):
            return self.getToken(kernSpineParser.ASTERISK, 0)

        def getRuleIndex(self):
            return kernSpineParser.RULE_nullInterpretation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNullInterpretation" ):
                listener.enterNullInterpretation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNullInterpretation" ):
                listener.exitNullInterpretation(self)




    def nullInterpretation(self):

        localctx = kernSpineParser.NullInterpretationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 168, self.RULE_nullInterpretation)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 776
            self.match(kernSpineParser.ASTERISK)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BarlineContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EQUAL(self, i:int=None):
            if i is None:
                return self.getTokens(kernSpineParser.EQUAL)
            else:
                return self.getToken(kernSpineParser.EQUAL, i)

        def number(self):
            return self.getTypedRuleContext(kernSpineParser.NumberContext,0)


        def MINUS(self):
            return self.getToken(kernSpineParser.MINUS, 0)

        def barLineType(self):
            return self.getTypedRuleContext(kernSpineParser.BarLineTypeContext,0)


        def fermata(self):
            return self.getTypedRuleContext(kernSpineParser.FermataContext,0)


        def CHAR_j(self):
            return self.getToken(kernSpineParser.CHAR_j, 0)

        def DOT(self):
            return self.getToken(kernSpineParser.DOT, 0)

        def footnote(self):
            return self.getTypedRuleContext(kernSpineParser.FootnoteContext,0)


        def CHAR_a(self):
            return self.getToken(kernSpineParser.CHAR_a, 0)

        def CHAR_b(self):
            return self.getToken(kernSpineParser.CHAR_b, 0)

        def getRuleIndex(self):
            return kernSpineParser.RULE_barline

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBarline" ):
                listener.enterBarline(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBarline" ):
                listener.exitBarline(self)




    def barline(self):

        localctx = kernSpineParser.BarlineContext(self, self._ctx, self.state)
        self.enterRule(localctx, 170, self.RULE_barline)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 778
            self.match(kernSpineParser.EQUAL)
            self.state = 780
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,61,self._ctx)
            if la_ == 1:
                self.state = 779
                self.match(kernSpineParser.EQUAL)


            self.state = 783
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 97)) & ~0x3f) == 0 and ((1 << (_la - 97)) & 1023) != 0):
                self.state = 782
                self.number()


            self.state = 786
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==70:
                self.state = 785
                self.match(kernSpineParser.CHAR_a)


            self.state = 789
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==71:
                self.state = 788
                self.match(kernSpineParser.CHAR_b)


            self.state = 792
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==120:
                self.state = 791
                self.match(kernSpineParser.MINUS)


            self.state = 795
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==40 or ((((_la - 121)) & ~0x3f) == 0 and ((1 << (_la - 121)) & 16389) != 0):
                self.state = 794
                self.barLineType()


            self.state = 798
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==136:
                self.state = 797
                self.fermata()


            self.state = 801
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==79:
                self.state = 800
                self.match(kernSpineParser.CHAR_j)


            self.state = 804
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==122:
                self.state = 803
                self.match(kernSpineParser.DOT)


            self.state = 807
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==138:
                self.state = 806
                self.footnote()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BarLineTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PIPE(self, i:int=None):
            if i is None:
                return self.getTokens(kernSpineParser.PIPE)
            else:
                return self.getToken(kernSpineParser.PIPE, i)

        def EXCLAMATION(self, i:int=None):
            if i is None:
                return self.getTokens(kernSpineParser.EXCLAMATION)
            else:
                return self.getToken(kernSpineParser.EXCLAMATION, i)

        def COLON(self, i:int=None):
            if i is None:
                return self.getTokens(kernSpineParser.COLON)
            else:
                return self.getToken(kernSpineParser.COLON, i)

        def EQUAL(self):
            return self.getToken(kernSpineParser.EQUAL, 0)

        def getRuleIndex(self):
            return kernSpineParser.RULE_barLineType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBarLineType" ):
                listener.enterBarLineType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBarLineType" ):
                listener.exitBarLineType(self)




    def barLineType(self):

        localctx = kernSpineParser.BarLineTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 172, self.RULE_barLineType)
        self._la = 0 # Token type
        try:
            self.state = 839
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,74,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 809
                self.match(kernSpineParser.PIPE)
                self.state = 810
                self.match(kernSpineParser.PIPE)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 811
                self.match(kernSpineParser.PIPE)
                self.state = 812
                self.match(kernSpineParser.EXCLAMATION)
                self.state = 814
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 813
                    self.match(kernSpineParser.COLON)


                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 816
                self.match(kernSpineParser.PIPE)
                self.state = 817
                self.match(kernSpineParser.COLON)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 818
                self.match(kernSpineParser.EXCLAMATION)
                self.state = 819
                self.match(kernSpineParser.PIPE)
                self.state = 820
                self.match(kernSpineParser.COLON)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 822
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==121:
                    self.state = 821
                    self.match(kernSpineParser.EQUAL)


                self.state = 824
                self.match(kernSpineParser.COLON)
                self.state = 825
                self.match(kernSpineParser.PIPE)
                self.state = 826
                self.match(kernSpineParser.EXCLAMATION)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 827
                self.match(kernSpineParser.COLON)
                self.state = 828
                self.match(kernSpineParser.PIPE)
                self.state = 830
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==40:
                    self.state = 829
                    self.match(kernSpineParser.EXCLAMATION)


                self.state = 832
                self.match(kernSpineParser.PIPE)
                self.state = 833
                self.match(kernSpineParser.COLON)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 834
                self.match(kernSpineParser.COLON)
                self.state = 835
                self.match(kernSpineParser.EXCLAMATION)
                self.state = 836
                self.match(kernSpineParser.EXCLAMATION)
                self.state = 837
                self.match(kernSpineParser.COLON)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 838
                self.match(kernSpineParser.EQUAL)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RestPositionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def diatonicPitchAndOctave(self):
            return self.getTypedRuleContext(kernSpineParser.DiatonicPitchAndOctaveContext,0)


        def getRuleIndex(self):
            return kernSpineParser.RULE_restPosition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRestPosition" ):
                listener.enterRestPosition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRestPosition" ):
                listener.exitRestPosition(self)




    def restPosition(self):

        localctx = kernSpineParser.RestPositionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 174, self.RULE_restPosition)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 841
            self.diatonicPitchAndOctave()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DurationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def modernDuration(self):
            return self.getTypedRuleContext(kernSpineParser.ModernDurationContext,0)


        def augmentationDot(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(kernSpineParser.AugmentationDotContext)
            else:
                return self.getTypedRuleContext(kernSpineParser.AugmentationDotContext,i)


        def graceNote(self):
            return self.getTypedRuleContext(kernSpineParser.GraceNoteContext,0)


        def appoggiatura(self):
            return self.getTypedRuleContext(kernSpineParser.AppoggiaturaContext,0)


        def getRuleIndex(self):
            return kernSpineParser.RULE_duration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDuration" ):
                listener.enterDuration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDuration" ):
                listener.exitDuration(self)




    def duration(self):

        localctx = kernSpineParser.DurationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 176, self.RULE_duration)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 843
            self.modernDuration()
            self.state = 847
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,75,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 844
                    self.augmentationDot() 
                self.state = 849
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,75,self._ctx)

            self.state = 852
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,76,self._ctx)
            if la_ == 1:
                self.state = 850
                self.graceNote()

            elif la_ == 2:
                self.state = 851
                self.appoggiatura()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FermataContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SEMICOLON(self):
            return self.getToken(kernSpineParser.SEMICOLON, 0)

        def getRuleIndex(self):
            return kernSpineParser.RULE_fermata

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFermata" ):
                listener.enterFermata(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFermata" ):
                listener.exitFermata(self)




    def fermata(self):

        localctx = kernSpineParser.FermataContext(self, self._ctx, self.state)
        self.enterRule(localctx, 178, self.RULE_fermata)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 854
            self.match(kernSpineParser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ModernDurationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def number(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(kernSpineParser.NumberContext)
            else:
                return self.getTypedRuleContext(kernSpineParser.NumberContext,i)


        def PERCENT(self):
            return self.getToken(kernSpineParser.PERCENT, 0)

        def getRuleIndex(self):
            return kernSpineParser.RULE_modernDuration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterModernDuration" ):
                listener.enterModernDuration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitModernDuration" ):
                listener.exitModernDuration(self)




    def modernDuration(self):

        localctx = kernSpineParser.ModernDurationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 180, self.RULE_modernDuration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 856
            self.number()
            self.state = 859
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==41:
                self.state = 857
                self.match(kernSpineParser.PERCENT)
                self.state = 858
                self.number()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AugmentationDotContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DOT(self):
            return self.getToken(kernSpineParser.DOT, 0)

        def getRuleIndex(self):
            return kernSpineParser.RULE_augmentationDot

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAugmentationDot" ):
                listener.enterAugmentationDot(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAugmentationDot" ):
                listener.exitAugmentationDot(self)




    def augmentationDot(self):

        localctx = kernSpineParser.AugmentationDotContext(self, self._ctx, self.state)
        self.enterRule(localctx, 182, self.RULE_augmentationDot)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 861
            self.match(kernSpineParser.DOT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlterationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def accidental(self):
            return self.getTypedRuleContext(kernSpineParser.AccidentalContext,0)


        def alterationDisplay(self):
            return self.getTypedRuleContext(kernSpineParser.AlterationDisplayContext,0)


        def getRuleIndex(self):
            return kernSpineParser.RULE_alteration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlteration" ):
                listener.enterAlteration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlteration" ):
                listener.exitAlteration(self)




    def alteration(self):

        localctx = kernSpineParser.AlterationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 184, self.RULE_alteration)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 863
            self.accidental()
            self.state = 865
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,78,self._ctx)
            if la_ == 1:
                self.state = 864
                self.alterationDisplay()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StaffChangeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ANGLE_BRACKET_OPEN(self):
            return self.getToken(kernSpineParser.ANGLE_BRACKET_OPEN, 0)

        def ANGLE_BRACKET_CLOSE(self):
            return self.getToken(kernSpineParser.ANGLE_BRACKET_CLOSE, 0)

        def getRuleIndex(self):
            return kernSpineParser.RULE_staffChange

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStaffChange" ):
                listener.enterStaffChange(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStaffChange" ):
                listener.exitStaffChange(self)




    def staffChange(self):

        localctx = kernSpineParser.StaffChangeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 186, self.RULE_staffChange)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 867
            _la = self._input.LA(1)
            if not(_la==127 or _la==128):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ChordSpaceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SPACE(self):
            return self.getToken(kernSpineParser.SPACE, 0)

        def getRuleIndex(self):
            return kernSpineParser.RULE_chordSpace

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterChordSpace" ):
                listener.enterChordSpace(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitChordSpace" ):
                listener.exitChordSpace(self)




    def chordSpace(self):

        localctx = kernSpineParser.ChordSpaceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 188, self.RULE_chordSpace)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 870
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==139:
                self.state = 869
                self.match(kernSpineParser.SPACE)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GraceNoteContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CHAR_q(self, i:int=None):
            if i is None:
                return self.getTokens(kernSpineParser.CHAR_q)
            else:
                return self.getToken(kernSpineParser.CHAR_q, i)

        def getRuleIndex(self):
            return kernSpineParser.RULE_graceNote

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGraceNote" ):
                listener.enterGraceNote(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGraceNote" ):
                listener.exitGraceNote(self)




    def graceNote(self):

        localctx = kernSpineParser.GraceNoteContext(self, self._ctx, self.state)
        self.enterRule(localctx, 190, self.RULE_graceNote)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 872
            self.match(kernSpineParser.CHAR_q)
            self.state = 874
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,80,self._ctx)
            if la_ == 1:
                self.state = 873
                self.match(kernSpineParser.CHAR_q)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AppoggiaturaContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def appoggiaturaMode(self):
            return self.getTypedRuleContext(kernSpineParser.AppoggiaturaModeContext,0)


        def getRuleIndex(self):
            return kernSpineParser.RULE_appoggiatura

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAppoggiatura" ):
                listener.enterAppoggiatura(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAppoggiatura" ):
                listener.exitAppoggiatura(self)




    def appoggiatura(self):

        localctx = kernSpineParser.AppoggiaturaContext(self, self._ctx, self.state)
        self.enterRule(localctx, 192, self.RULE_appoggiatura)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 876
            self.appoggiaturaMode()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AppoggiaturaModeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CHAR_p(self):
            return self.getToken(kernSpineParser.CHAR_p, 0)

        def CHAR_P(self):
            return self.getToken(kernSpineParser.CHAR_P, 0)

        def getRuleIndex(self):
            return kernSpineParser.RULE_appoggiaturaMode

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAppoggiaturaMode" ):
                listener.enterAppoggiaturaMode(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAppoggiaturaMode" ):
                listener.exitAppoggiaturaMode(self)




    def appoggiaturaMode(self):

        localctx = kernSpineParser.AppoggiaturaModeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 194, self.RULE_appoggiaturaMode)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 878
            _la = self._input.LA(1)
            if not(_la==59 or _la==85):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LigatureTieContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ligatureTieStart(self):
            return self.getTypedRuleContext(kernSpineParser.LigatureTieStartContext,0)


        def ligatureTieEnd(self):
            return self.getTypedRuleContext(kernSpineParser.LigatureTieEndContext,0)


        def tieContinue(self):
            return self.getTypedRuleContext(kernSpineParser.TieContinueContext,0)


        def staffChange(self):
            return self.getTypedRuleContext(kernSpineParser.StaffChangeContext,0)


        def getRuleIndex(self):
            return kernSpineParser.RULE_ligatureTie

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLigatureTie" ):
                listener.enterLigatureTie(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLigatureTie" ):
                listener.exitLigatureTie(self)




    def ligatureTie(self):

        localctx = kernSpineParser.LigatureTieContext(self, self._ctx, self.state)
        self.enterRule(localctx, 196, self.RULE_ligatureTie)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 883
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [114, 127]:
                self.state = 880
                self.ligatureTieStart()
                pass
            elif token in [115, 128]:
                self.state = 881
                self.ligatureTieEnd()
                pass
            elif token in [131]:
                self.state = 882
                self.tieContinue()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 886
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,82,self._ctx)
            if la_ == 1:
                self.state = 885
                self.staffChange()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NoteDecorationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def accent(self):
            return self.getTypedRuleContext(kernSpineParser.AccentContext,0)


        def appoggiatura(self):
            return self.getTypedRuleContext(kernSpineParser.AppoggiaturaContext,0)


        def articulation(self):
            return self.getTypedRuleContext(kernSpineParser.ArticulationContext,0)


        def barLineCrossedNoteStart(self):
            return self.getTypedRuleContext(kernSpineParser.BarLineCrossedNoteStartContext,0)


        def barLineCrossedNoteEnd(self):
            return self.getTypedRuleContext(kernSpineParser.BarLineCrossedNoteEndContext,0)


        def beam(self):
            return self.getTypedRuleContext(kernSpineParser.BeamContext,0)


        def editorialIntervention(self):
            return self.getTypedRuleContext(kernSpineParser.EditorialInterventionContext,0)


        def fermata(self):
            return self.getTypedRuleContext(kernSpineParser.FermataContext,0)


        def footnote(self):
            return self.getTypedRuleContext(kernSpineParser.FootnoteContext,0)


        def glissando(self):
            return self.getTypedRuleContext(kernSpineParser.GlissandoContext,0)


        def graceNote(self):
            return self.getTypedRuleContext(kernSpineParser.GraceNoteContext,0)


        def ligatureTie(self):
            return self.getTypedRuleContext(kernSpineParser.LigatureTieContext,0)


        def mordent(self):
            return self.getTypedRuleContext(kernSpineParser.MordentContext,0)


        def augmentationDot(self):
            return self.getTypedRuleContext(kernSpineParser.AugmentationDotContext,0)


        def phrase(self):
            return self.getTypedRuleContext(kernSpineParser.PhraseContext,0)


        def slurStart(self):
            return self.getTypedRuleContext(kernSpineParser.SlurStartContext,0)


        def slurEnd(self):
            return self.getTypedRuleContext(kernSpineParser.SlurEndContext,0)


        def staffChange(self):
            return self.getTypedRuleContext(kernSpineParser.StaffChangeContext,0)


        def stem(self):
            return self.getTypedRuleContext(kernSpineParser.StemContext,0)


        def turn(self):
            return self.getTypedRuleContext(kernSpineParser.TurnContext,0)


        def trill(self):
            return self.getTypedRuleContext(kernSpineParser.TrillContext,0)


        def userAssignable(self):
            return self.getTypedRuleContext(kernSpineParser.UserAssignableContext,0)


        def CHAR_N(self):
            return self.getToken(kernSpineParser.CHAR_N, 0)

        def CHAR_j(self):
            return self.getToken(kernSpineParser.CHAR_j, 0)

        def CHAR_X(self):
            return self.getToken(kernSpineParser.CHAR_X, 0)

        def CHAR_Z(self):
            return self.getToken(kernSpineParser.CHAR_Z, 0)

        def CHAR_O(self):
            return self.getToken(kernSpineParser.CHAR_O, 0)

        def CHAR_l(self):
            return self.getToken(kernSpineParser.CHAR_l, 0)

        def CHAR_V(self):
            return self.getToken(kernSpineParser.CHAR_V, 0)

        def noteDecorationCharX(self):
            return self.getTypedRuleContext(kernSpineParser.NoteDecorationCharXContext,0)


        def getRuleIndex(self):
            return kernSpineParser.RULE_noteDecoration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNoteDecoration" ):
                listener.enterNoteDecoration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNoteDecoration" ):
                listener.exitNoteDecoration(self)




    def noteDecoration(self):

        localctx = kernSpineParser.NoteDecorationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 198, self.RULE_noteDecoration)
        try:
            self.state = 918
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,83,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 888
                self.accent()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 889
                self.appoggiatura()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 890
                self.articulation()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 891
                self.barLineCrossedNoteStart()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 892
                self.barLineCrossedNoteEnd()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 893
                self.beam()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 894
                self.editorialIntervention()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 895
                self.fermata()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 896
                self.footnote()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 897
                self.glissando()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 898
                self.graceNote()
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 899
                self.ligatureTie()
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 900
                self.mordent()
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 901
                self.augmentationDot()
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 902
                self.phrase()
                pass

            elif la_ == 16:
                self.enterOuterAlt(localctx, 16)
                self.state = 903
                self.slurStart()
                pass

            elif la_ == 17:
                self.enterOuterAlt(localctx, 17)
                self.state = 904
                self.slurEnd()
                pass

            elif la_ == 18:
                self.enterOuterAlt(localctx, 18)
                self.state = 905
                self.staffChange()
                pass

            elif la_ == 19:
                self.enterOuterAlt(localctx, 19)
                self.state = 906
                self.stem()
                pass

            elif la_ == 20:
                self.enterOuterAlt(localctx, 20)
                self.state = 907
                self.turn()
                pass

            elif la_ == 21:
                self.enterOuterAlt(localctx, 21)
                self.state = 908
                self.trill()
                pass

            elif la_ == 22:
                self.enterOuterAlt(localctx, 22)
                self.state = 909
                self.userAssignable()
                pass

            elif la_ == 23:
                self.enterOuterAlt(localctx, 23)
                self.state = 910
                self.match(kernSpineParser.CHAR_N)
                pass

            elif la_ == 24:
                self.enterOuterAlt(localctx, 24)
                self.state = 911
                self.match(kernSpineParser.CHAR_j)
                pass

            elif la_ == 25:
                self.enterOuterAlt(localctx, 25)
                self.state = 912
                self.match(kernSpineParser.CHAR_X)
                pass

            elif la_ == 26:
                self.enterOuterAlt(localctx, 26)
                self.state = 913
                self.match(kernSpineParser.CHAR_Z)
                pass

            elif la_ == 27:
                self.enterOuterAlt(localctx, 27)
                self.state = 914
                self.match(kernSpineParser.CHAR_O)
                pass

            elif la_ == 28:
                self.enterOuterAlt(localctx, 28)
                self.state = 915
                self.match(kernSpineParser.CHAR_l)
                pass

            elif la_ == 29:
                self.enterOuterAlt(localctx, 29)
                self.state = 916
                self.match(kernSpineParser.CHAR_V)
                pass

            elif la_ == 30:
                self.enterOuterAlt(localctx, 30)
                self.state = 917
                self.noteDecorationCharX()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NoteDecorationCharXContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CHAR_x(self, i:int=None):
            if i is None:
                return self.getTokens(kernSpineParser.CHAR_x)
            else:
                return self.getToken(kernSpineParser.CHAR_x, i)

        def getRuleIndex(self):
            return kernSpineParser.RULE_noteDecorationCharX

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNoteDecorationCharX" ):
                listener.enterNoteDecorationCharX(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNoteDecorationCharX" ):
                listener.exitNoteDecorationCharX(self)




    def noteDecorationCharX(self):

        localctx = kernSpineParser.NoteDecorationCharXContext(self, self._ctx, self.state)
        self.enterRule(localctx, 200, self.RULE_noteDecorationCharX)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 920
            self.match(kernSpineParser.CHAR_x)
            self.state = 922
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,84,self._ctx)
            if la_ == 1:
                self.state = 921
                self.match(kernSpineParser.CHAR_x)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PhraseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LEFT_CURLY_BRACES(self):
            return self.getToken(kernSpineParser.LEFT_CURLY_BRACES, 0)

        def RIGHT_CURLY_BRACES(self):
            return self.getToken(kernSpineParser.RIGHT_CURLY_BRACES, 0)

        def getRuleIndex(self):
            return kernSpineParser.RULE_phrase

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPhrase" ):
                listener.enterPhrase(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPhrase" ):
                listener.exitPhrase(self)




    def phrase(self):

        localctx = kernSpineParser.PhraseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 202, self.RULE_phrase)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 924
            _la = self._input.LA(1)
            if not(_la==116 or _la==117):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DiatonicPitchAndOctaveContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def bassNotes(self):
            return self.getTypedRuleContext(kernSpineParser.BassNotesContext,0)


        def trebleNotes(self):
            return self.getTypedRuleContext(kernSpineParser.TrebleNotesContext,0)


        def getRuleIndex(self):
            return kernSpineParser.RULE_diatonicPitchAndOctave

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDiatonicPitchAndOctave" ):
                listener.enterDiatonicPitchAndOctave(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDiatonicPitchAndOctave" ):
                listener.exitDiatonicPitchAndOctave(self)




    def diatonicPitchAndOctave(self):

        localctx = kernSpineParser.DiatonicPitchAndOctaveContext(self, self._ctx, self.state)
        self.enterRule(localctx, 204, self.RULE_diatonicPitchAndOctave)
        try:
            self.state = 928
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [44, 45, 46, 47, 48, 49, 50]:
                self.enterOuterAlt(localctx, 1)
                self.state = 926
                self.bassNotes()
                pass
            elif token in [70, 71, 72, 73, 74, 75, 76]:
                self.enterOuterAlt(localctx, 2)
                self.state = 927
                self.trebleNotes()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TrebleNotesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def lowerCasePitch(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(kernSpineParser.LowerCasePitchContext)
            else:
                return self.getTypedRuleContext(kernSpineParser.LowerCasePitchContext,i)


        def getRuleIndex(self):
            return kernSpineParser.RULE_trebleNotes

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTrebleNotes" ):
                listener.enterTrebleNotes(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTrebleNotes" ):
                listener.exitTrebleNotes(self)




    def trebleNotes(self):

        localctx = kernSpineParser.TrebleNotesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 206, self.RULE_trebleNotes)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 931 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 930
                    self.lowerCasePitch()

                else:
                    raise NoViableAltException(self)
                self.state = 933 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,86,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BassNotesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def upperCasePitch(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(kernSpineParser.UpperCasePitchContext)
            else:
                return self.getTypedRuleContext(kernSpineParser.UpperCasePitchContext,i)


        def getRuleIndex(self):
            return kernSpineParser.RULE_bassNotes

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBassNotes" ):
                listener.enterBassNotes(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBassNotes" ):
                listener.exitBassNotes(self)




    def bassNotes(self):

        localctx = kernSpineParser.BassNotesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 208, self.RULE_bassNotes)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 936 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 935
                    self.upperCasePitch()

                else:
                    raise NoViableAltException(self)
                self.state = 938 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,87,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AccidentalContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OCTOTHORPE(self, i:int=None):
            if i is None:
                return self.getTokens(kernSpineParser.OCTOTHORPE)
            else:
                return self.getToken(kernSpineParser.OCTOTHORPE, i)

        def MINUS(self, i:int=None):
            if i is None:
                return self.getTokens(kernSpineParser.MINUS)
            else:
                return self.getToken(kernSpineParser.MINUS, i)

        def CHAR_n(self):
            return self.getToken(kernSpineParser.CHAR_n, 0)

        def getRuleIndex(self):
            return kernSpineParser.RULE_accidental

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAccidental" ):
                listener.enterAccidental(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAccidental" ):
                listener.exitAccidental(self)




    def accidental(self):

        localctx = kernSpineParser.AccidentalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 210, self.RULE_accidental)
        self._la = 0 # Token type
        try:
            self.state = 955
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [118]:
                self.enterOuterAlt(localctx, 1)
                self.state = 940
                self.match(kernSpineParser.OCTOTHORPE)
                self.state = 945
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==118:
                    self.state = 941
                    self.match(kernSpineParser.OCTOTHORPE)
                    self.state = 943
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==118:
                        self.state = 942
                        self.match(kernSpineParser.OCTOTHORPE)




                pass
            elif token in [120]:
                self.enterOuterAlt(localctx, 2)
                self.state = 947
                self.match(kernSpineParser.MINUS)
                self.state = 952
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==120:
                    self.state = 948
                    self.match(kernSpineParser.MINUS)
                    self.state = 950
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==120:
                        self.state = 949
                        self.match(kernSpineParser.MINUS)




                pass
            elif token in [83]:
                self.enterOuterAlt(localctx, 3)
                self.state = 954
                self.match(kernSpineParser.CHAR_n)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlterationDisplayContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CHAR_x(self):
            return self.getToken(kernSpineParser.CHAR_x, 0)

        def CHAR_X(self):
            return self.getToken(kernSpineParser.CHAR_X, 0)

        def CHAR_i(self):
            return self.getToken(kernSpineParser.CHAR_i, 0)

        def CHAR_I(self):
            return self.getToken(kernSpineParser.CHAR_I, 0)

        def CHAR_j(self):
            return self.getToken(kernSpineParser.CHAR_j, 0)

        def CHAR_Z(self):
            return self.getToken(kernSpineParser.CHAR_Z, 0)

        def CHAR_y(self, i:int=None):
            if i is None:
                return self.getTokens(kernSpineParser.CHAR_y)
            else:
                return self.getToken(kernSpineParser.CHAR_y, i)

        def CHAR_Y(self, i:int=None):
            if i is None:
                return self.getTokens(kernSpineParser.CHAR_Y)
            else:
                return self.getToken(kernSpineParser.CHAR_Y, i)

        def getRuleIndex(self):
            return kernSpineParser.RULE_alterationDisplay

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterationDisplay" ):
                listener.enterAlterationDisplay(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterationDisplay" ):
                listener.exitAlterationDisplay(self)




    def alterationDisplay(self):

        localctx = kernSpineParser.AlterationDisplayContext(self, self._ctx, self.state)
        self.enterRule(localctx, 212, self.RULE_alterationDisplay)
        self._la = 0 # Token type
        try:
            self.state = 971
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [93]:
                self.enterOuterAlt(localctx, 1)
                self.state = 957
                self.match(kernSpineParser.CHAR_x)
                pass
            elif token in [67]:
                self.enterOuterAlt(localctx, 2)
                self.state = 958
                self.match(kernSpineParser.CHAR_X)
                pass
            elif token in [78]:
                self.enterOuterAlt(localctx, 3)
                self.state = 959
                self.match(kernSpineParser.CHAR_i)
                pass
            elif token in [52]:
                self.enterOuterAlt(localctx, 4)
                self.state = 960
                self.match(kernSpineParser.CHAR_I)
                pass
            elif token in [79]:
                self.enterOuterAlt(localctx, 5)
                self.state = 961
                self.match(kernSpineParser.CHAR_j)
                pass
            elif token in [69]:
                self.enterOuterAlt(localctx, 6)
                self.state = 962
                self.match(kernSpineParser.CHAR_Z)
                pass
            elif token in [94]:
                self.enterOuterAlt(localctx, 7)
                self.state = 963
                self.match(kernSpineParser.CHAR_y)
                self.state = 965
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,93,self._ctx)
                if la_ == 1:
                    self.state = 964
                    self.match(kernSpineParser.CHAR_y)


                pass
            elif token in [68]:
                self.enterOuterAlt(localctx, 8)
                self.state = 967
                self.match(kernSpineParser.CHAR_Y)
                self.state = 969
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==68:
                    self.state = 968
                    self.match(kernSpineParser.CHAR_Y)


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TurnContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CHAR_S(self):
            return self.getToken(kernSpineParser.CHAR_S, 0)

        def DOLLAR(self):
            return self.getToken(kernSpineParser.DOLLAR, 0)

        def getRuleIndex(self):
            return kernSpineParser.RULE_turn

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTurn" ):
                listener.enterTurn(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTurn" ):
                listener.exitTurn(self)




    def turn(self):

        localctx = kernSpineParser.TurnContext(self, self._ctx, self.state)
        self.enterRule(localctx, 214, self.RULE_turn)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 973
            _la = self._input.LA(1)
            if not(_la==62 or _la==132):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UserAssignableContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CHAR_i(self):
            return self.getToken(kernSpineParser.CHAR_i, 0)

        def getRuleIndex(self):
            return kernSpineParser.RULE_userAssignable

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUserAssignable" ):
                listener.enterUserAssignable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUserAssignable" ):
                listener.exitUserAssignable(self)




    def userAssignable(self):

        localctx = kernSpineParser.UserAssignableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 216, self.RULE_userAssignable)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 975
            self.match(kernSpineParser.CHAR_i)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GlissandoContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COLON(self):
            return self.getToken(kernSpineParser.COLON, 0)

        def getRuleIndex(self):
            return kernSpineParser.RULE_glissando

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGlissando" ):
                listener.enterGlissando(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGlissando" ):
                listener.exitGlissando(self)




    def glissando(self):

        localctx = kernSpineParser.GlissandoContext(self, self._ctx, self.state)
        self.enterRule(localctx, 218, self.RULE_glissando)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 977
            self.match(kernSpineParser.COLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArticulationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def staccato(self):
            return self.getTypedRuleContext(kernSpineParser.StaccatoContext,0)


        def spiccato(self):
            return self.getTypedRuleContext(kernSpineParser.SpiccatoContext,0)


        def pizzicato(self):
            return self.getTypedRuleContext(kernSpineParser.PizzicatoContext,0)


        def staccatissimo(self):
            return self.getTypedRuleContext(kernSpineParser.StaccatissimoContext,0)


        def tenuto(self):
            return self.getTypedRuleContext(kernSpineParser.TenutoContext,0)


        def accent(self):
            return self.getTypedRuleContext(kernSpineParser.AccentContext,0)


        def getRuleIndex(self):
            return kernSpineParser.RULE_articulation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArticulation" ):
                listener.enterArticulation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArticulation" ):
                listener.exitArticulation(self)




    def articulation(self):

        localctx = kernSpineParser.ArticulationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 220, self.RULE_articulation)
        try:
            self.state = 985
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [113]:
                self.enterOuterAlt(localctx, 1)
                self.state = 979
                self.staccato()
                pass
            elif token in [88]:
                self.enterOuterAlt(localctx, 2)
                self.state = 980
                self.spiccato()
                pass
            elif token in [112]:
                self.enterOuterAlt(localctx, 3)
                self.state = 981
                self.pizzicato()
                pass
            elif token in [124]:
                self.enterOuterAlt(localctx, 4)
                self.state = 982
                self.staccatissimo()
                pass
            elif token in [126]:
                self.enterOuterAlt(localctx, 5)
                self.state = 983
                self.tenuto()
                pass
            elif token in [125]:
                self.enterOuterAlt(localctx, 6)
                self.state = 984
                self.accent()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AccentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CIRCUMFLEX(self):
            return self.getToken(kernSpineParser.CIRCUMFLEX, 0)

        def getRuleIndex(self):
            return kernSpineParser.RULE_accent

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAccent" ):
                listener.enterAccent(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAccent" ):
                listener.exitAccent(self)




    def accent(self):

        localctx = kernSpineParser.AccentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 222, self.RULE_accent)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 987
            self.match(kernSpineParser.CIRCUMFLEX)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TenutoContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TILDE(self):
            return self.getToken(kernSpineParser.TILDE, 0)

        def getRuleIndex(self):
            return kernSpineParser.RULE_tenuto

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTenuto" ):
                listener.enterTenuto(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTenuto" ):
                listener.exitTenuto(self)




    def tenuto(self):

        localctx = kernSpineParser.TenutoContext(self, self._ctx, self.state)
        self.enterRule(localctx, 224, self.RULE_tenuto)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 989
            self.match(kernSpineParser.TILDE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StaccatissimoContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def GRAVE_ACCENT(self):
            return self.getToken(kernSpineParser.GRAVE_ACCENT, 0)

        def getRuleIndex(self):
            return kernSpineParser.RULE_staccatissimo

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStaccatissimo" ):
                listener.enterStaccatissimo(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStaccatissimo" ):
                listener.exitStaccatissimo(self)




    def staccatissimo(self):

        localctx = kernSpineParser.StaccatissimoContext(self, self._ctx, self.state)
        self.enterRule(localctx, 226, self.RULE_staccatissimo)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 991
            self.match(kernSpineParser.GRAVE_ACCENT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PizzicatoContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def QUOTATION_MARK(self):
            return self.getToken(kernSpineParser.QUOTATION_MARK, 0)

        def getRuleIndex(self):
            return kernSpineParser.RULE_pizzicato

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPizzicato" ):
                listener.enterPizzicato(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPizzicato" ):
                listener.exitPizzicato(self)




    def pizzicato(self):

        localctx = kernSpineParser.PizzicatoContext(self, self._ctx, self.state)
        self.enterRule(localctx, 228, self.RULE_pizzicato)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 993
            self.match(kernSpineParser.QUOTATION_MARK)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SpiccatoContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CHAR_s(self):
            return self.getToken(kernSpineParser.CHAR_s, 0)

        def getRuleIndex(self):
            return kernSpineParser.RULE_spiccato

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSpiccato" ):
                listener.enterSpiccato(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSpiccato" ):
                listener.exitSpiccato(self)




    def spiccato(self):

        localctx = kernSpineParser.SpiccatoContext(self, self._ctx, self.state)
        self.enterRule(localctx, 230, self.RULE_spiccato)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 995
            self.match(kernSpineParser.CHAR_s)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StaccatoContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def APOSTROPHE(self):
            return self.getToken(kernSpineParser.APOSTROPHE, 0)

        def getRuleIndex(self):
            return kernSpineParser.RULE_staccato

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStaccato" ):
                listener.enterStaccato(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStaccato" ):
                listener.exitStaccato(self)




    def staccato(self):

        localctx = kernSpineParser.StaccatoContext(self, self._ctx, self.state)
        self.enterRule(localctx, 232, self.RULE_staccato)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 997
            self.match(kernSpineParser.APOSTROPHE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EditorialInterventionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CHAR_y(self, i:int=None):
            if i is None:
                return self.getTokens(kernSpineParser.CHAR_y)
            else:
                return self.getToken(kernSpineParser.CHAR_y, i)

        def AT(self):
            return self.getToken(kernSpineParser.AT, 0)

        def CHAR_X(self):
            return self.getToken(kernSpineParser.CHAR_X, 0)

        def getRuleIndex(self):
            return kernSpineParser.RULE_editorialIntervention

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEditorialIntervention" ):
                listener.enterEditorialIntervention(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEditorialIntervention" ):
                listener.exitEditorialIntervention(self)




    def editorialIntervention(self):

        localctx = kernSpineParser.EditorialInterventionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 234, self.RULE_editorialIntervention)
        self._la = 0 # Token type
        try:
            self.state = 1010
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [94]:
                self.enterOuterAlt(localctx, 1)
                self.state = 999
                self.match(kernSpineParser.CHAR_y)
                self.state = 1003
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,97,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1000
                        self.match(kernSpineParser.CHAR_y) 
                    self.state = 1005
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,97,self._ctx)

                self.state = 1007
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==43:
                    self.state = 1006
                    self.match(kernSpineParser.AT)


                pass
            elif token in [67]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1009
                self.match(kernSpineParser.CHAR_X)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SlurStartContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LEFT_PARENTHESIS(self):
            return self.getToken(kernSpineParser.LEFT_PARENTHESIS, 0)

        def AMPERSAND(self, i:int=None):
            if i is None:
                return self.getTokens(kernSpineParser.AMPERSAND)
            else:
                return self.getToken(kernSpineParser.AMPERSAND, i)

        def staffChange(self):
            return self.getTypedRuleContext(kernSpineParser.StaffChangeContext,0)


        def getRuleIndex(self):
            return kernSpineParser.RULE_slurStart

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSlurStart" ):
                listener.enterSlurStart(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSlurStart" ):
                listener.exitSlurStart(self)




    def slurStart(self):

        localctx = kernSpineParser.SlurStartContext(self, self._ctx, self.state)
        self.enterRule(localctx, 236, self.RULE_slurStart)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1015
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==42:
                self.state = 1012
                self.match(kernSpineParser.AMPERSAND)
                self.state = 1017
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1018
            self.match(kernSpineParser.LEFT_PARENTHESIS)
            self.state = 1020
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,101,self._ctx)
            if la_ == 1:
                self.state = 1019
                self.staffChange()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LigatureTieStartContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ANGLE_BRACKET_OPEN(self):
            return self.getToken(kernSpineParser.ANGLE_BRACKET_OPEN, 0)

        def LEFT_BRACKET(self):
            return self.getToken(kernSpineParser.LEFT_BRACKET, 0)

        def CHAR_y(self):
            return self.getToken(kernSpineParser.CHAR_y, 0)

        def getRuleIndex(self):
            return kernSpineParser.RULE_ligatureTieStart

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLigatureTieStart" ):
                listener.enterLigatureTieStart(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLigatureTieStart" ):
                listener.exitLigatureTieStart(self)




    def ligatureTieStart(self):

        localctx = kernSpineParser.LigatureTieStartContext(self, self._ctx, self.state)
        self.enterRule(localctx, 238, self.RULE_ligatureTieStart)
        try:
            self.state = 1027
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [127]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1022
                self.match(kernSpineParser.ANGLE_BRACKET_OPEN)
                pass
            elif token in [114]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1023
                self.match(kernSpineParser.LEFT_BRACKET)
                self.state = 1025
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,102,self._ctx)
                if la_ == 1:
                    self.state = 1024
                    self.match(kernSpineParser.CHAR_y)


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TieContinueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def UNDERSCORE(self):
            return self.getToken(kernSpineParser.UNDERSCORE, 0)

        def getRuleIndex(self):
            return kernSpineParser.RULE_tieContinue

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTieContinue" ):
                listener.enterTieContinue(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTieContinue" ):
                listener.exitTieContinue(self)




    def tieContinue(self):

        localctx = kernSpineParser.TieContinueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 240, self.RULE_tieContinue)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1029
            self.match(kernSpineParser.UNDERSCORE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LigatureTieEndContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ANGLE_BRACKET_CLOSE(self):
            return self.getToken(kernSpineParser.ANGLE_BRACKET_CLOSE, 0)

        def RIGHT_BRACKET(self):
            return self.getToken(kernSpineParser.RIGHT_BRACKET, 0)

        def getRuleIndex(self):
            return kernSpineParser.RULE_ligatureTieEnd

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLigatureTieEnd" ):
                listener.enterLigatureTieEnd(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLigatureTieEnd" ):
                listener.exitLigatureTieEnd(self)




    def ligatureTieEnd(self):

        localctx = kernSpineParser.LigatureTieEndContext(self, self._ctx, self.state)
        self.enterRule(localctx, 242, self.RULE_ligatureTieEnd)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1031
            _la = self._input.LA(1)
            if not(_la==115 or _la==128):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SlurEndContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RIGHT_PARENTHESIS(self):
            return self.getToken(kernSpineParser.RIGHT_PARENTHESIS, 0)

        def AMPERSAND(self, i:int=None):
            if i is None:
                return self.getTokens(kernSpineParser.AMPERSAND)
            else:
                return self.getToken(kernSpineParser.AMPERSAND, i)

        def getRuleIndex(self):
            return kernSpineParser.RULE_slurEnd

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSlurEnd" ):
                listener.enterSlurEnd(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSlurEnd" ):
                listener.exitSlurEnd(self)




    def slurEnd(self):

        localctx = kernSpineParser.SlurEndContext(self, self._ctx, self.state)
        self.enterRule(localctx, 244, self.RULE_slurEnd)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1036
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==42:
                self.state = 1033
                self.match(kernSpineParser.AMPERSAND)
                self.state = 1038
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1039
            self.match(kernSpineParser.RIGHT_PARENTHESIS)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BarLineCrossedNoteStartContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CHAR_T(self):
            return self.getToken(kernSpineParser.CHAR_T, 0)

        def getRuleIndex(self):
            return kernSpineParser.RULE_barLineCrossedNoteStart

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBarLineCrossedNoteStart" ):
                listener.enterBarLineCrossedNoteStart(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBarLineCrossedNoteStart" ):
                listener.exitBarLineCrossedNoteStart(self)




    def barLineCrossedNoteStart(self):

        localctx = kernSpineParser.BarLineCrossedNoteStartContext(self, self._ctx, self.state)
        self.enterRule(localctx, 246, self.RULE_barLineCrossedNoteStart)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1041
            self.match(kernSpineParser.CHAR_T)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BarLineCrossedNoteEndContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CHAR_t(self):
            return self.getToken(kernSpineParser.CHAR_t, 0)

        def getRuleIndex(self):
            return kernSpineParser.RULE_barLineCrossedNoteEnd

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBarLineCrossedNoteEnd" ):
                listener.enterBarLineCrossedNoteEnd(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBarLineCrossedNoteEnd" ):
                listener.exitBarLineCrossedNoteEnd(self)




    def barLineCrossedNoteEnd(self):

        localctx = kernSpineParser.BarLineCrossedNoteEndContext(self, self._ctx, self.state)
        self.enterRule(localctx, 248, self.RULE_barLineCrossedNoteEnd)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1043
            self.match(kernSpineParser.CHAR_t)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SLASH(self):
            return self.getToken(kernSpineParser.SLASH, 0)

        def BACKSLASH(self):
            return self.getToken(kernSpineParser.BACKSLASH, 0)

        def getRuleIndex(self):
            return kernSpineParser.RULE_stem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStem" ):
                listener.enterStem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStem" ):
                listener.exitStem(self)




    def stem(self):

        localctx = kernSpineParser.StemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 250, self.RULE_stem)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1045
            _la = self._input.LA(1)
            if not(_la==129 or _la==130):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BeamContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CHAR_L(self, i:int=None):
            if i is None:
                return self.getTokens(kernSpineParser.CHAR_L)
            else:
                return self.getToken(kernSpineParser.CHAR_L, i)

        def CHAR_J(self, i:int=None):
            if i is None:
                return self.getTokens(kernSpineParser.CHAR_J)
            else:
                return self.getToken(kernSpineParser.CHAR_J, i)

        def CHAR_K(self, i:int=None):
            if i is None:
                return self.getTokens(kernSpineParser.CHAR_K)
            else:
                return self.getToken(kernSpineParser.CHAR_K, i)

        def CHAR_k(self, i:int=None):
            if i is None:
                return self.getTokens(kernSpineParser.CHAR_k)
            else:
                return self.getToken(kernSpineParser.CHAR_k, i)

        def staffChange(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(kernSpineParser.StaffChangeContext)
            else:
                return self.getTypedRuleContext(kernSpineParser.StaffChangeContext,i)


        def getRuleIndex(self):
            return kernSpineParser.RULE_beam

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBeam" ):
                listener.enterBeam(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBeam" ):
                listener.exitBeam(self)




    def beam(self):

        localctx = kernSpineParser.BeamContext(self, self._ctx, self.state)
        self.enterRule(localctx, 252, self.RULE_beam)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1051 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 1047
                    _la = self._input.LA(1)
                    if not(((((_la - 53)) & ~0x3f) == 0 and ((1 << (_la - 53)) & 134217735) != 0)):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 1049
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,105,self._ctx)
                    if la_ == 1:
                        self.state = 1048
                        self.staffChange()



                else:
                    raise NoViableAltException(self)
                self.state = 1053 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,106,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MordentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CHAR_M(self):
            return self.getToken(kernSpineParser.CHAR_M, 0)

        def CHAR_m(self):
            return self.getToken(kernSpineParser.CHAR_m, 0)

        def CHAR_W(self):
            return self.getToken(kernSpineParser.CHAR_W, 0)

        def CHAR_w(self):
            return self.getToken(kernSpineParser.CHAR_w, 0)

        def getRuleIndex(self):
            return kernSpineParser.RULE_mordent

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMordent" ):
                listener.enterMordent(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMordent" ):
                listener.exitMordent(self)




    def mordent(self):

        localctx = kernSpineParser.MordentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 254, self.RULE_mordent)
        try:
            self.state = 1062
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [56]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1055
                self.match(kernSpineParser.CHAR_M)
                pass
            elif token in [82]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1056
                self.match(kernSpineParser.CHAR_m)
                pass
            elif token in [66]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1057
                self.match(kernSpineParser.CHAR_W)
                self.state = 1059
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,107,self._ctx)
                if la_ == 1:
                    self.state = 1058
                    self.match(kernSpineParser.CHAR_w)


                pass
            elif token in [92]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1061
                self.match(kernSpineParser.CHAR_w)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TrillContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CHAR_T(self, i:int=None):
            if i is None:
                return self.getTokens(kernSpineParser.CHAR_T)
            else:
                return self.getToken(kernSpineParser.CHAR_T, i)

        def CHAR_t(self):
            return self.getToken(kernSpineParser.CHAR_t, 0)

        def getRuleIndex(self):
            return kernSpineParser.RULE_trill

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTrill" ):
                listener.enterTrill(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTrill" ):
                listener.exitTrill(self)




    def trill(self):

        localctx = kernSpineParser.TrillContext(self, self._ctx, self.state)
        self.enterRule(localctx, 256, self.RULE_trill)
        try:
            self.state = 1069
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [63]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1064
                self.match(kernSpineParser.CHAR_T)
                self.state = 1066
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,109,self._ctx)
                if la_ == 1:
                    self.state = 1065
                    self.match(kernSpineParser.CHAR_T)


                pass
            elif token in [89]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1068
                self.match(kernSpineParser.CHAR_t)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FootnoteContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def QUESTION_MARK(self, i:int=None):
            if i is None:
                return self.getTokens(kernSpineParser.QUESTION_MARK)
            else:
                return self.getToken(kernSpineParser.QUESTION_MARK, i)

        def getRuleIndex(self):
            return kernSpineParser.RULE_footnote

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFootnote" ):
                listener.enterFootnote(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFootnote" ):
                listener.exitFootnote(self)




    def footnote(self):

        localctx = kernSpineParser.FootnoteContext(self, self._ctx, self.state)
        self.enterRule(localctx, 258, self.RULE_footnote)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1072 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 1071
                    self.match(kernSpineParser.QUESTION_MARK)

                else:
                    raise NoViableAltException(self)
                self.state = 1074 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,111,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx





