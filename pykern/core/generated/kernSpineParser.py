# Generated from kernSpineParser.g4 by ANTLR 4.13.1
# encoding: utf-8
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
	from typing import TextIO
else:
	from typing.io import TextIO

def serializedATN():
    return [
        4,1,148,1210,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,
        7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,
        13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,
        20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,
        26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,
        33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,
        39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,
        46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,52,7,
        52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,58,2,
        59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,2,64,7,64,2,65,7,
        65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,2,71,7,71,2,
        72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,2,78,7,
        78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,7,84,2,
        85,7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,2,91,7,
        91,2,92,7,92,2,93,7,93,2,94,7,94,2,95,7,95,2,96,7,96,2,97,7,97,2,
        98,7,98,2,99,7,99,2,100,7,100,2,101,7,101,2,102,7,102,2,103,7,103,
        2,104,7,104,2,105,7,105,2,106,7,106,2,107,7,107,2,108,7,108,2,109,
        7,109,2,110,7,110,2,111,7,111,2,112,7,112,2,113,7,113,2,114,7,114,
        2,115,7,115,2,116,7,116,2,117,7,117,2,118,7,118,2,119,7,119,2,120,
        7,120,2,121,7,121,2,122,7,122,2,123,7,123,2,124,7,124,2,125,7,125,
        2,126,7,126,2,127,7,127,2,128,7,128,2,129,7,129,2,130,7,130,2,131,
        7,131,2,132,7,132,2,133,7,133,2,134,7,134,2,135,7,135,2,136,7,136,
        2,137,7,137,2,138,7,138,2,139,7,139,2,140,7,140,2,141,7,141,2,142,
        7,142,2,143,7,143,2,144,7,144,2,145,7,145,2,146,7,146,2,147,7,147,
        2,148,7,148,2,149,7,149,2,150,7,150,2,151,7,151,2,152,7,152,2,153,
        7,153,1,0,1,0,3,0,311,8,0,1,1,1,1,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,
        2,1,2,3,2,324,8,2,1,3,1,3,1,3,3,3,329,8,3,1,4,1,4,1,5,1,5,3,5,335,
        8,5,1,6,1,6,1,6,1,6,3,6,341,8,6,1,7,1,7,1,7,3,7,346,8,7,1,8,1,8,
        3,8,350,8,8,1,9,5,9,353,8,9,10,9,12,9,356,9,9,1,9,3,9,359,8,9,1,
        9,1,9,5,9,363,8,9,10,9,12,9,366,9,9,1,10,1,10,3,10,370,8,10,1,11,
        1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,3,11,383,8,11,
        1,12,1,12,3,12,387,8,12,1,12,1,12,1,12,3,12,392,8,12,4,12,394,8,
        12,11,12,12,12,395,1,13,5,13,399,8,13,10,13,12,13,402,9,13,1,13,
        3,13,405,8,13,1,13,5,13,408,8,13,10,13,12,13,411,9,13,1,13,1,13,
        5,13,415,8,13,10,13,12,13,418,9,13,1,13,3,13,421,8,13,1,13,5,13,
        424,8,13,10,13,12,13,427,9,13,1,14,1,14,1,14,1,14,1,14,1,14,1,14,
        1,14,1,14,1,14,1,14,3,14,440,8,14,1,15,1,15,1,15,1,15,1,15,1,15,
        1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,17,1,17,1,18,1,18,1,19,
        1,19,1,20,1,20,1,21,5,21,465,8,21,10,21,12,21,468,9,21,1,22,1,22,
        1,22,1,22,1,22,1,22,1,22,1,22,1,22,3,22,479,8,22,1,23,1,23,1,24,
        1,24,1,24,5,24,486,8,24,10,24,12,24,489,9,24,1,25,1,25,1,26,1,26,
        1,27,1,27,1,28,1,28,1,29,1,29,1,30,1,30,1,31,1,31,1,32,1,32,1,32,
        1,32,1,32,3,32,510,8,32,1,33,1,33,1,34,1,34,1,35,1,35,1,36,1,36,
        3,36,520,8,36,1,36,1,36,1,36,1,36,1,36,3,36,527,8,36,1,37,1,37,1,
        37,5,37,532,8,37,10,37,12,37,535,9,37,1,38,1,38,1,38,1,38,1,38,1,
        38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,
        38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,
        38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,
        38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,4,38,591,8,38,11,
        38,12,38,592,1,39,1,39,1,39,3,39,598,8,39,1,39,1,39,1,39,3,39,603,
        8,39,1,39,1,39,1,40,1,40,1,41,1,41,1,42,4,42,612,8,42,11,42,12,42,
        613,1,43,1,43,1,44,1,44,1,45,1,45,1,45,1,46,1,46,1,47,1,47,1,48,
        1,48,1,49,1,49,1,49,1,50,1,50,1,50,1,51,1,51,3,51,637,8,51,1,51,
        1,51,1,51,3,51,642,8,51,1,52,1,52,1,52,1,53,1,53,3,53,649,8,53,1,
        53,3,53,652,8,53,1,54,1,54,1,55,1,55,1,56,1,56,3,56,660,8,56,1,56,
        1,56,1,56,3,56,665,8,56,1,56,3,56,668,8,56,1,57,1,57,1,57,5,57,673,
        8,57,10,57,12,57,676,9,57,1,57,1,57,3,57,680,8,57,1,58,1,58,1,59,
        1,59,1,60,1,60,1,60,3,60,689,8,60,1,61,1,61,1,61,1,61,3,61,695,8,
        61,1,62,1,62,3,62,699,8,62,1,62,1,62,3,62,703,8,62,1,62,3,62,706,
        8,62,3,62,708,8,62,1,63,1,63,3,63,712,8,63,1,64,1,64,3,64,716,8,
        64,1,65,1,65,1,65,1,65,1,65,1,65,1,65,3,65,725,8,65,1,66,1,66,1,
        66,1,66,1,67,1,67,1,67,1,67,1,68,1,68,1,68,1,68,1,69,1,69,1,69,1,
        69,1,70,1,70,1,70,1,70,1,71,1,71,1,71,1,71,1,72,1,72,1,72,1,72,1,
        73,1,73,1,73,1,73,1,73,1,73,3,73,761,8,73,1,73,1,73,3,73,765,8,73,
        1,74,1,74,1,75,1,75,1,76,1,76,1,76,1,76,1,77,1,77,1,77,4,77,778,
        8,77,11,77,12,77,779,1,77,1,77,1,77,1,78,1,78,1,78,4,78,788,8,78,
        11,78,12,78,789,1,79,1,79,1,79,4,79,795,8,79,11,79,12,79,796,1,80,
        1,80,1,80,3,80,802,8,80,1,81,1,81,1,81,1,81,1,82,1,82,1,82,1,82,
        3,82,812,8,82,1,82,1,82,1,83,1,83,1,83,3,83,819,8,83,1,84,4,84,822,
        8,84,11,84,12,84,823,1,85,1,85,1,85,1,85,3,85,830,8,85,1,86,1,86,
        1,87,1,87,3,87,836,8,87,1,87,3,87,839,8,87,1,87,3,87,842,8,87,1,
        87,3,87,845,8,87,1,87,3,87,848,8,87,1,87,3,87,851,8,87,1,87,3,87,
        854,8,87,1,87,3,87,857,8,87,1,87,3,87,860,8,87,1,87,3,87,863,8,87,
        1,88,1,88,1,88,1,88,1,88,3,88,870,8,88,1,88,1,88,1,88,1,88,1,88,
        1,88,3,88,878,8,88,1,88,1,88,1,88,1,88,1,88,1,88,3,88,886,8,88,1,
        88,1,88,1,88,1,88,1,88,1,88,1,88,3,88,895,8,88,1,89,1,89,1,90,1,
        90,5,90,901,8,90,10,90,12,90,904,9,90,1,90,1,90,3,90,908,8,90,1,
        91,1,91,1,92,1,92,1,92,3,92,915,8,92,1,93,1,93,1,94,1,94,3,94,921,
        8,94,1,95,1,95,1,96,3,96,926,8,96,1,97,1,97,3,97,930,8,97,1,98,1,
        98,1,99,1,99,1,100,1,100,1,100,3,100,939,8,100,1,100,3,100,942,8,
        100,1,101,1,101,1,101,1,101,1,101,1,101,1,101,1,101,1,101,1,101,
        1,101,1,101,1,101,1,101,1,101,1,101,1,101,1,101,1,101,1,101,1,101,
        1,101,1,101,1,101,1,101,1,101,1,101,1,101,1,101,1,101,3,101,974,
        8,101,1,102,1,102,3,102,978,8,102,1,103,1,103,1,104,1,104,3,104,
        984,8,104,1,105,4,105,987,8,105,11,105,12,105,988,1,106,4,106,992,
        8,106,11,106,12,106,993,1,107,1,107,1,107,3,107,999,8,107,3,107,
        1001,8,107,1,107,1,107,1,107,3,107,1006,8,107,3,107,1008,8,107,1,
        107,3,107,1011,8,107,1,108,1,108,1,108,1,108,1,108,1,108,1,108,1,
        108,3,108,1021,8,108,1,108,1,108,3,108,1025,8,108,3,108,1027,8,108,
        1,109,1,109,1,110,1,110,1,111,1,111,1,112,1,112,1,112,1,112,1,112,
        1,112,3,112,1041,8,112,1,113,1,113,1,114,1,114,1,115,1,115,1,116,
        1,116,1,117,1,117,1,118,1,118,1,119,1,119,5,119,1057,8,119,10,119,
        12,119,1060,9,119,1,119,3,119,1063,8,119,1,119,3,119,1066,8,119,
        1,120,5,120,1069,8,120,10,120,12,120,1072,9,120,1,120,1,120,3,120,
        1076,8,120,1,121,1,121,1,121,3,121,1081,8,121,3,121,1083,8,121,1,
        122,1,122,1,123,1,123,1,124,5,124,1090,8,124,10,124,12,124,1093,
        9,124,1,124,1,124,1,125,1,125,1,126,1,126,1,127,1,127,1,128,1,128,
        3,128,1105,8,128,4,128,1107,8,128,11,128,12,128,1108,1,129,1,129,
        1,129,1,130,1,130,1,131,1,131,1,131,1,131,3,131,1120,8,131,1,131,
        3,131,1123,8,131,1,132,1,132,3,132,1127,8,132,1,132,3,132,1130,8,
        132,1,133,4,133,1133,8,133,11,133,12,133,1134,1,134,1,134,1,135,
        1,135,1,136,1,136,3,136,1143,8,136,1,137,1,137,3,137,1147,8,137,
        1,138,1,138,1,139,1,139,1,140,1,140,1,141,1,141,1,141,1,142,1,142,
        1,142,1,142,1,143,1,143,1,143,1,143,1,143,1,144,1,144,1,145,1,145,
        1,145,1,146,1,146,1,146,1,146,1,147,1,147,1,147,1,147,1,147,1,148,
        1,148,1,148,1,149,1,149,1,149,1,150,1,150,1,150,1,150,1,150,1,150,
        1,150,1,150,1,150,3,150,1196,8,150,1,151,1,151,1,151,1,152,1,152,
        3,152,1203,8,152,1,152,3,152,1206,8,152,1,153,1,153,1,153,0,0,154,
        0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,
        46,48,50,52,54,56,58,60,62,64,66,68,70,72,74,76,78,80,82,84,86,88,
        90,92,94,96,98,100,102,104,106,108,110,112,114,116,118,120,122,124,
        126,128,130,132,134,136,138,140,142,144,146,148,150,152,154,156,
        158,160,162,164,166,168,170,172,174,176,178,180,182,184,186,188,
        190,192,194,196,198,200,202,204,206,208,210,212,214,216,218,220,
        222,224,226,228,230,232,234,236,238,240,242,244,246,248,250,252,
        254,256,258,260,262,264,266,268,270,272,274,276,278,280,282,284,
        286,288,290,292,294,296,298,300,302,304,306,0,25,1,0,136,136,3,0,
        1,1,40,40,144,144,1,0,16,17,1,0,24,25,1,0,26,27,1,0,28,29,1,0,34,
        37,2,0,21,21,23,23,1,0,18,20,1,0,98,107,1,0,71,77,1,0,45,51,4,0,
        47,47,50,51,60,60,64,64,1,0,99,103,2,0,12,12,33,33,6,0,47,47,59,
        59,88,88,100,101,123,124,130,130,2,0,121,121,123,123,1,0,128,129,
        2,0,60,60,86,86,1,0,117,118,2,0,63,63,133,133,2,0,116,116,129,129,
        1,0,130,131,2,0,54,56,81,81,2,0,56,56,63,63,1322,0,310,1,0,0,0,2,
        312,1,0,0,0,4,323,1,0,0,0,6,328,1,0,0,0,8,330,1,0,0,0,10,334,1,0,
        0,0,12,340,1,0,0,0,14,345,1,0,0,0,16,349,1,0,0,0,18,354,1,0,0,0,
        20,367,1,0,0,0,22,382,1,0,0,0,24,386,1,0,0,0,26,400,1,0,0,0,28,439,
        1,0,0,0,30,441,1,0,0,0,32,447,1,0,0,0,34,455,1,0,0,0,36,457,1,0,
        0,0,38,459,1,0,0,0,40,461,1,0,0,0,42,466,1,0,0,0,44,478,1,0,0,0,
        46,480,1,0,0,0,48,482,1,0,0,0,50,490,1,0,0,0,52,492,1,0,0,0,54,494,
        1,0,0,0,56,496,1,0,0,0,58,498,1,0,0,0,60,500,1,0,0,0,62,502,1,0,
        0,0,64,504,1,0,0,0,66,511,1,0,0,0,68,513,1,0,0,0,70,515,1,0,0,0,
        72,517,1,0,0,0,74,528,1,0,0,0,76,590,1,0,0,0,78,594,1,0,0,0,80,606,
        1,0,0,0,82,608,1,0,0,0,84,611,1,0,0,0,86,615,1,0,0,0,88,617,1,0,
        0,0,90,619,1,0,0,0,92,622,1,0,0,0,94,624,1,0,0,0,96,626,1,0,0,0,
        98,628,1,0,0,0,100,631,1,0,0,0,102,634,1,0,0,0,104,643,1,0,0,0,106,
        646,1,0,0,0,108,653,1,0,0,0,110,655,1,0,0,0,112,667,1,0,0,0,114,
        669,1,0,0,0,116,681,1,0,0,0,118,683,1,0,0,0,120,688,1,0,0,0,122,
        690,1,0,0,0,124,696,1,0,0,0,126,709,1,0,0,0,128,713,1,0,0,0,130,
        724,1,0,0,0,132,726,1,0,0,0,134,730,1,0,0,0,136,734,1,0,0,0,138,
        738,1,0,0,0,140,742,1,0,0,0,142,746,1,0,0,0,144,750,1,0,0,0,146,
        754,1,0,0,0,148,766,1,0,0,0,150,768,1,0,0,0,152,770,1,0,0,0,154,
        774,1,0,0,0,156,784,1,0,0,0,158,791,1,0,0,0,160,798,1,0,0,0,162,
        803,1,0,0,0,164,807,1,0,0,0,166,818,1,0,0,0,168,821,1,0,0,0,170,
        825,1,0,0,0,172,831,1,0,0,0,174,833,1,0,0,0,176,894,1,0,0,0,178,
        896,1,0,0,0,180,898,1,0,0,0,182,909,1,0,0,0,184,911,1,0,0,0,186,
        916,1,0,0,0,188,918,1,0,0,0,190,922,1,0,0,0,192,925,1,0,0,0,194,
        927,1,0,0,0,196,931,1,0,0,0,198,933,1,0,0,0,200,938,1,0,0,0,202,
        973,1,0,0,0,204,975,1,0,0,0,206,979,1,0,0,0,208,983,1,0,0,0,210,
        986,1,0,0,0,212,991,1,0,0,0,214,1010,1,0,0,0,216,1026,1,0,0,0,218,
        1028,1,0,0,0,220,1030,1,0,0,0,222,1032,1,0,0,0,224,1040,1,0,0,0,
        226,1042,1,0,0,0,228,1044,1,0,0,0,230,1046,1,0,0,0,232,1048,1,0,
        0,0,234,1050,1,0,0,0,236,1052,1,0,0,0,238,1065,1,0,0,0,240,1070,
        1,0,0,0,242,1082,1,0,0,0,244,1084,1,0,0,0,246,1086,1,0,0,0,248,1091,
        1,0,0,0,250,1096,1,0,0,0,252,1098,1,0,0,0,254,1100,1,0,0,0,256,1106,
        1,0,0,0,258,1110,1,0,0,0,260,1113,1,0,0,0,262,1122,1,0,0,0,264,1129,
        1,0,0,0,266,1132,1,0,0,0,268,1136,1,0,0,0,270,1138,1,0,0,0,272,1140,
        1,0,0,0,274,1144,1,0,0,0,276,1148,1,0,0,0,278,1150,1,0,0,0,280,1152,
        1,0,0,0,282,1154,1,0,0,0,284,1157,1,0,0,0,286,1161,1,0,0,0,288,1166,
        1,0,0,0,290,1168,1,0,0,0,292,1171,1,0,0,0,294,1175,1,0,0,0,296,1180,
        1,0,0,0,298,1183,1,0,0,0,300,1195,1,0,0,0,302,1197,1,0,0,0,304,1200,
        1,0,0,0,306,1207,1,0,0,0,308,311,3,2,1,0,309,311,3,4,2,0,310,308,
        1,0,0,0,310,309,1,0,0,0,311,1,1,0,0,0,312,313,5,143,0,0,313,3,1,
        0,0,0,314,324,3,6,3,0,315,324,3,8,4,0,316,324,3,10,5,0,317,324,3,
        174,87,0,318,324,3,16,8,0,319,324,3,44,22,0,320,324,3,46,23,0,321,
        324,3,28,14,0,322,324,3,30,15,0,323,314,1,0,0,0,323,315,1,0,0,0,
        323,316,1,0,0,0,323,317,1,0,0,0,323,318,1,0,0,0,323,319,1,0,0,0,
        323,320,1,0,0,0,323,321,1,0,0,0,323,322,1,0,0,0,324,5,1,0,0,0,325,
        329,3,26,13,0,326,329,3,18,9,0,327,329,3,24,12,0,328,325,1,0,0,0,
        328,326,1,0,0,0,328,327,1,0,0,0,329,7,1,0,0,0,330,331,3,102,51,0,
        331,9,1,0,0,0,332,335,3,12,6,0,333,335,3,14,7,0,334,332,1,0,0,0,
        334,333,1,0,0,0,335,11,1,0,0,0,336,341,3,104,52,0,337,341,3,146,
        73,0,338,341,3,164,82,0,339,341,3,114,57,0,340,336,1,0,0,0,340,337,
        1,0,0,0,340,338,1,0,0,0,340,339,1,0,0,0,341,13,1,0,0,0,342,346,3,
        52,26,0,343,346,3,122,61,0,344,346,3,170,85,0,345,342,1,0,0,0,345,
        343,1,0,0,0,345,344,1,0,0,0,346,15,1,0,0,0,347,350,3,172,86,0,348,
        350,3,50,25,0,349,347,1,0,0,0,349,348,1,0,0,0,350,17,1,0,0,0,351,
        353,3,22,11,0,352,351,1,0,0,0,353,356,1,0,0,0,354,352,1,0,0,0,354,
        355,1,0,0,0,355,358,1,0,0,0,356,354,1,0,0,0,357,359,3,180,90,0,358,
        357,1,0,0,0,358,359,1,0,0,0,359,360,1,0,0,0,360,364,3,20,10,0,361,
        363,3,22,11,0,362,361,1,0,0,0,363,366,1,0,0,0,364,362,1,0,0,0,364,
        365,1,0,0,0,365,19,1,0,0,0,366,364,1,0,0,0,367,369,5,88,0,0,368,
        370,5,88,0,0,369,368,1,0,0,0,369,370,1,0,0,0,370,21,1,0,0,0,371,
        383,3,240,120,0,372,383,3,194,97,0,373,383,3,190,95,0,374,383,3,
        178,89,0,375,383,3,182,91,0,376,383,3,238,119,0,377,383,3,248,124,
        0,378,383,3,236,118,0,379,383,3,206,103,0,380,383,3,186,93,0,381,
        383,5,80,0,0,382,371,1,0,0,0,382,372,1,0,0,0,382,373,1,0,0,0,382,
        374,1,0,0,0,382,375,1,0,0,0,382,376,1,0,0,0,382,377,1,0,0,0,382,
        378,1,0,0,0,382,379,1,0,0,0,382,380,1,0,0,0,382,381,1,0,0,0,383,
        23,1,0,0,0,384,387,3,26,13,0,385,387,3,18,9,0,386,384,1,0,0,0,386,
        385,1,0,0,0,387,393,1,0,0,0,388,391,3,192,96,0,389,392,3,26,13,0,
        390,392,3,18,9,0,391,389,1,0,0,0,391,390,1,0,0,0,392,394,1,0,0,0,
        393,388,1,0,0,0,394,395,1,0,0,0,395,393,1,0,0,0,395,396,1,0,0,0,
        396,25,1,0,0,0,397,399,3,202,101,0,398,397,1,0,0,0,399,402,1,0,0,
        0,400,398,1,0,0,0,400,401,1,0,0,0,401,404,1,0,0,0,402,400,1,0,0,
        0,403,405,3,180,90,0,404,403,1,0,0,0,404,405,1,0,0,0,405,409,1,0,
        0,0,406,408,3,202,101,0,407,406,1,0,0,0,408,411,1,0,0,0,409,407,
        1,0,0,0,409,410,1,0,0,0,410,412,1,0,0,0,411,409,1,0,0,0,412,416,
        3,208,104,0,413,415,3,202,101,0,414,413,1,0,0,0,415,418,1,0,0,0,
        416,414,1,0,0,0,416,417,1,0,0,0,417,420,1,0,0,0,418,416,1,0,0,0,
        419,421,3,188,94,0,420,419,1,0,0,0,420,421,1,0,0,0,421,425,1,0,0,
        0,422,424,3,202,101,0,423,422,1,0,0,0,424,427,1,0,0,0,425,423,1,
        0,0,0,425,426,1,0,0,0,426,27,1,0,0,0,427,425,1,0,0,0,428,440,3,98,
        49,0,429,440,3,94,47,0,430,440,3,92,46,0,431,440,3,96,48,0,432,440,
        3,100,50,0,433,440,3,80,40,0,434,440,3,82,41,0,435,440,3,78,39,0,
        436,440,3,72,36,0,437,440,3,54,27,0,438,440,3,62,31,0,439,428,1,
        0,0,0,439,429,1,0,0,0,439,430,1,0,0,0,439,431,1,0,0,0,439,432,1,
        0,0,0,439,433,1,0,0,0,439,434,1,0,0,0,439,435,1,0,0,0,439,436,1,
        0,0,0,439,437,1,0,0,0,439,438,1,0,0,0,440,29,1,0,0,0,441,442,5,39,
        0,0,442,443,5,121,0,0,443,444,3,42,21,0,444,445,5,136,0,0,445,446,
        3,32,16,0,446,31,1,0,0,0,447,448,3,34,17,0,448,449,5,138,0,0,449,
        450,3,36,18,0,450,451,5,138,0,0,451,452,3,38,19,0,452,453,5,138,
        0,0,453,454,3,40,20,0,454,33,1,0,0,0,455,456,3,84,42,0,456,35,1,
        0,0,0,457,458,3,84,42,0,458,37,1,0,0,0,459,460,3,84,42,0,460,39,
        1,0,0,0,461,462,3,84,42,0,462,41,1,0,0,0,463,465,8,0,0,0,464,463,
        1,0,0,0,465,468,1,0,0,0,466,464,1,0,0,0,466,467,1,0,0,0,467,43,1,
        0,0,0,468,466,1,0,0,0,469,479,3,70,35,0,470,479,3,58,29,0,471,479,
        3,60,30,0,472,479,3,64,32,0,473,479,3,66,33,0,474,479,3,68,34,0,
        475,479,3,56,28,0,476,479,5,30,0,0,477,479,5,31,0,0,478,469,1,0,
        0,0,478,470,1,0,0,0,478,471,1,0,0,0,478,472,1,0,0,0,478,473,1,0,
        0,0,478,474,1,0,0,0,478,475,1,0,0,0,478,476,1,0,0,0,478,477,1,0,
        0,0,479,45,1,0,0,0,480,481,7,1,0,0,481,47,1,0,0,0,482,487,3,84,42,
        0,483,484,5,138,0,0,484,486,3,48,24,0,485,483,1,0,0,0,486,489,1,
        0,0,0,487,485,1,0,0,0,487,488,1,0,0,0,488,49,1,0,0,0,489,487,1,0,
        0,0,490,491,5,123,0,0,491,51,1,0,0,0,492,493,5,41,0,0,493,53,1,0,
        0,0,494,495,7,2,0,0,495,55,1,0,0,0,496,497,7,3,0,0,497,57,1,0,0,
        0,498,499,7,4,0,0,499,59,1,0,0,0,500,501,7,5,0,0,501,61,1,0,0,0,
        502,503,7,6,0,0,503,63,1,0,0,0,504,505,5,32,0,0,505,506,5,136,0,
        0,506,509,3,84,42,0,507,508,5,130,0,0,508,510,3,84,42,0,509,507,
        1,0,0,0,509,510,1,0,0,0,510,65,1,0,0,0,511,512,7,7,0,0,512,67,1,
        0,0,0,513,514,5,22,0,0,514,69,1,0,0,0,515,516,7,8,0,0,516,71,1,0,
        0,0,517,526,5,14,0,0,518,520,5,15,0,0,519,518,1,0,0,0,519,520,1,
        0,0,0,520,521,1,0,0,0,521,522,5,115,0,0,522,523,3,74,37,0,523,524,
        5,116,0,0,524,527,1,0,0,0,525,527,3,76,38,0,526,519,1,0,0,0,526,
        525,1,0,0,0,527,73,1,0,0,0,528,533,3,76,38,0,529,530,5,138,0,0,530,
        532,3,76,38,0,531,529,1,0,0,0,532,535,1,0,0,0,533,531,1,0,0,0,533,
        534,1,0,0,0,534,75,1,0,0,0,535,533,1,0,0,0,536,591,5,45,0,0,537,
        591,5,46,0,0,538,591,5,47,0,0,539,591,5,48,0,0,540,591,5,49,0,0,
        541,591,5,50,0,0,542,591,5,51,0,0,543,591,5,52,0,0,544,591,5,53,
        0,0,545,591,5,54,0,0,546,591,5,55,0,0,547,591,5,56,0,0,548,591,5,
        57,0,0,549,591,5,58,0,0,550,591,5,59,0,0,551,591,5,60,0,0,552,591,
        5,61,0,0,553,591,5,62,0,0,554,591,5,63,0,0,555,591,5,64,0,0,556,
        591,5,65,0,0,557,591,5,66,0,0,558,591,5,67,0,0,559,591,5,68,0,0,
        560,591,5,69,0,0,561,591,5,70,0,0,562,591,5,71,0,0,563,591,5,72,
        0,0,564,591,5,73,0,0,565,591,5,74,0,0,566,591,5,75,0,0,567,591,5,
        76,0,0,568,591,5,77,0,0,569,591,5,78,0,0,570,591,5,79,0,0,571,591,
        5,80,0,0,572,591,5,81,0,0,573,591,5,82,0,0,574,591,5,83,0,0,575,
        591,5,84,0,0,576,591,5,85,0,0,577,591,5,86,0,0,578,591,5,87,0,0,
        579,591,5,88,0,0,580,591,5,89,0,0,581,591,5,90,0,0,582,591,5,91,
        0,0,583,591,5,92,0,0,584,591,5,93,0,0,585,591,5,94,0,0,586,591,5,
        95,0,0,587,591,5,96,0,0,588,591,5,140,0,0,589,591,3,84,42,0,590,
        536,1,0,0,0,590,537,1,0,0,0,590,538,1,0,0,0,590,539,1,0,0,0,590,
        540,1,0,0,0,590,541,1,0,0,0,590,542,1,0,0,0,590,543,1,0,0,0,590,
        544,1,0,0,0,590,545,1,0,0,0,590,546,1,0,0,0,590,547,1,0,0,0,590,
        548,1,0,0,0,590,549,1,0,0,0,590,550,1,0,0,0,590,551,1,0,0,0,590,
        552,1,0,0,0,590,553,1,0,0,0,590,554,1,0,0,0,590,555,1,0,0,0,590,
        556,1,0,0,0,590,557,1,0,0,0,590,558,1,0,0,0,590,559,1,0,0,0,590,
        560,1,0,0,0,590,561,1,0,0,0,590,562,1,0,0,0,590,563,1,0,0,0,590,
        564,1,0,0,0,590,565,1,0,0,0,590,566,1,0,0,0,590,567,1,0,0,0,590,
        568,1,0,0,0,590,569,1,0,0,0,590,570,1,0,0,0,590,571,1,0,0,0,590,
        572,1,0,0,0,590,573,1,0,0,0,590,574,1,0,0,0,590,575,1,0,0,0,590,
        576,1,0,0,0,590,577,1,0,0,0,590,578,1,0,0,0,590,579,1,0,0,0,590,
        580,1,0,0,0,590,581,1,0,0,0,590,582,1,0,0,0,590,583,1,0,0,0,590,
        584,1,0,0,0,590,585,1,0,0,0,590,586,1,0,0,0,590,587,1,0,0,0,590,
        588,1,0,0,0,590,589,1,0,0,0,591,592,1,0,0,0,592,590,1,0,0,0,592,
        593,1,0,0,0,593,77,1,0,0,0,594,595,5,9,0,0,595,597,5,74,0,0,596,
        598,5,121,0,0,597,596,1,0,0,0,597,598,1,0,0,0,598,599,1,0,0,0,599,
        600,3,84,42,0,600,602,5,73,0,0,601,603,5,121,0,0,602,601,1,0,0,0,
        602,603,1,0,0,0,603,604,1,0,0,0,604,605,3,84,42,0,605,79,1,0,0,0,
        606,607,5,142,0,0,607,81,1,0,0,0,608,609,5,141,0,0,609,83,1,0,0,
        0,610,612,7,9,0,0,611,610,1,0,0,0,612,613,1,0,0,0,613,611,1,0,0,
        0,613,614,1,0,0,0,614,85,1,0,0,0,615,616,7,10,0,0,616,87,1,0,0,0,
        617,618,7,11,0,0,618,89,1,0,0,0,619,620,3,86,43,0,620,621,3,214,
        107,0,621,91,1,0,0,0,622,623,5,5,0,0,623,93,1,0,0,0,624,625,5,6,
        0,0,625,95,1,0,0,0,626,627,5,7,0,0,627,97,1,0,0,0,628,629,5,38,0,
        0,629,630,3,84,42,0,630,99,1,0,0,0,631,632,5,4,0,0,632,633,3,84,
        42,0,633,101,1,0,0,0,634,636,5,8,0,0,635,637,5,120,0,0,636,635,1,
        0,0,0,636,637,1,0,0,0,637,638,1,0,0,0,638,641,3,84,42,0,639,640,
        5,130,0,0,640,642,3,84,42,0,641,639,1,0,0,0,641,642,1,0,0,0,642,
        103,1,0,0,0,643,644,5,10,0,0,644,645,3,106,53,0,645,105,1,0,0,0,
        646,648,3,108,54,0,647,649,3,110,55,0,648,647,1,0,0,0,648,649,1,
        0,0,0,649,651,1,0,0,0,650,652,3,112,56,0,651,650,1,0,0,0,651,652,
        1,0,0,0,652,107,1,0,0,0,653,654,7,12,0,0,654,109,1,0,0,0,655,656,
        7,13,0,0,656,111,1,0,0,0,657,659,5,92,0,0,658,660,5,92,0,0,659,658,
        1,0,0,0,659,660,1,0,0,0,660,661,1,0,0,0,661,668,5,100,0,0,662,664,
        5,126,0,0,663,665,5,126,0,0,664,663,1,0,0,0,664,665,1,0,0,0,665,
        666,1,0,0,0,666,668,5,100,0,0,667,657,1,0,0,0,667,662,1,0,0,0,668,
        113,1,0,0,0,669,670,5,11,0,0,670,674,5,115,0,0,671,673,3,116,58,
        0,672,671,1,0,0,0,673,676,1,0,0,0,674,672,1,0,0,0,674,675,1,0,0,
        0,675,677,1,0,0,0,676,674,1,0,0,0,677,679,5,116,0,0,678,680,3,118,
        59,0,679,678,1,0,0,0,679,680,1,0,0,0,680,115,1,0,0,0,681,682,3,90,
        45,0,682,117,1,0,0,0,683,684,5,68,0,0,684,119,1,0,0,0,685,689,3,
        126,63,0,686,689,3,128,64,0,687,689,5,139,0,0,688,685,1,0,0,0,688,
        686,1,0,0,0,688,687,1,0,0,0,689,121,1,0,0,0,690,691,5,112,0,0,691,
        694,3,124,62,0,692,693,5,130,0,0,693,695,3,124,62,0,694,692,1,0,
        0,0,694,695,1,0,0,0,695,123,1,0,0,0,696,698,3,120,60,0,697,699,3,
        118,59,0,698,697,1,0,0,0,698,699,1,0,0,0,699,707,1,0,0,0,700,702,
        5,136,0,0,701,703,3,130,65,0,702,701,1,0,0,0,702,703,1,0,0,0,703,
        708,1,0,0,0,704,706,3,84,42,0,705,704,1,0,0,0,705,706,1,0,0,0,706,
        708,1,0,0,0,707,700,1,0,0,0,707,705,1,0,0,0,708,125,1,0,0,0,709,
        711,3,86,43,0,710,712,3,214,107,0,711,710,1,0,0,0,711,712,1,0,0,
        0,712,127,1,0,0,0,713,715,3,88,44,0,714,716,3,214,107,0,715,714,
        1,0,0,0,715,716,1,0,0,0,716,129,1,0,0,0,717,725,3,144,72,0,718,725,
        3,142,71,0,719,725,3,140,70,0,720,725,3,138,69,0,721,725,3,136,68,
        0,722,725,3,134,67,0,723,725,3,132,66,0,724,717,1,0,0,0,724,718,
        1,0,0,0,724,719,1,0,0,0,724,720,1,0,0,0,724,721,1,0,0,0,724,722,
        1,0,0,0,724,723,1,0,0,0,725,131,1,0,0,0,726,727,5,82,0,0,727,728,
        5,85,0,0,728,729,5,73,0,0,729,133,1,0,0,0,730,731,5,79,0,0,731,732,
        5,85,0,0,732,733,5,84,0,0,733,135,1,0,0,0,734,735,5,71,0,0,735,736,
        5,75,0,0,736,737,5,85,0,0,737,137,1,0,0,0,738,739,5,83,0,0,739,740,
        5,79,0,0,740,741,5,94,0,0,741,139,1,0,0,0,742,743,5,82,0,0,743,744,
        5,95,0,0,744,745,5,74,0,0,745,141,1,0,0,0,746,747,5,86,0,0,747,748,
        5,78,0,0,748,749,5,88,0,0,749,143,1,0,0,0,750,751,5,74,0,0,751,752,
        5,85,0,0,752,753,5,88,0,0,753,145,1,0,0,0,754,760,5,33,0,0,755,761,
        3,152,76,0,756,761,3,154,77,0,757,761,3,156,78,0,758,761,3,158,79,
        0,759,761,3,162,81,0,760,755,1,0,0,0,760,756,1,0,0,0,760,757,1,0,
        0,0,760,758,1,0,0,0,760,759,1,0,0,0,761,764,1,0,0,0,762,763,5,42,
        0,0,763,765,5,100,0,0,764,762,1,0,0,0,764,765,1,0,0,0,765,147,1,
        0,0,0,766,767,3,84,42,0,767,149,1,0,0,0,768,769,3,84,42,0,769,151,
        1,0,0,0,770,771,3,148,74,0,771,772,5,130,0,0,772,773,3,150,75,0,
        773,153,1,0,0,0,774,777,3,148,74,0,775,776,5,120,0,0,776,778,3,148,
        74,0,777,775,1,0,0,0,778,779,1,0,0,0,779,777,1,0,0,0,779,780,1,0,
        0,0,780,781,1,0,0,0,781,782,5,130,0,0,782,783,3,150,75,0,783,155,
        1,0,0,0,784,787,3,152,76,0,785,786,5,120,0,0,786,788,3,152,76,0,
        787,785,1,0,0,0,788,789,1,0,0,0,789,787,1,0,0,0,789,790,1,0,0,0,
        790,157,1,0,0,0,791,794,3,160,80,0,792,793,5,136,0,0,793,795,3,160,
        80,0,794,792,1,0,0,0,795,796,1,0,0,0,796,794,1,0,0,0,796,797,1,0,
        0,0,797,159,1,0,0,0,798,801,3,152,76,0,799,800,5,137,0,0,800,802,
        3,84,42,0,801,799,1,0,0,0,801,802,1,0,0,0,802,161,1,0,0,0,803,804,
        3,152,76,0,804,805,5,124,0,0,805,806,3,152,76,0,806,163,1,0,0,0,
        807,808,7,14,0,0,808,811,5,134,0,0,809,812,3,166,83,0,810,812,3,
        168,84,0,811,809,1,0,0,0,811,810,1,0,0,0,812,813,1,0,0,0,813,814,
        5,135,0,0,814,165,1,0,0,0,815,819,5,73,0,0,816,817,5,73,0,0,817,
        819,5,124,0,0,818,815,1,0,0,0,818,816,1,0,0,0,819,167,1,0,0,0,820,
        822,7,15,0,0,821,820,1,0,0,0,822,823,1,0,0,0,823,821,1,0,0,0,823,
        824,1,0,0,0,824,169,1,0,0,0,825,826,5,13,0,0,826,829,3,84,42,0,827,
        828,7,16,0,0,828,830,3,84,42,0,829,827,1,0,0,0,829,830,1,0,0,0,830,
        171,1,0,0,0,831,832,5,112,0,0,832,173,1,0,0,0,833,835,5,122,0,0,
        834,836,5,122,0,0,835,834,1,0,0,0,835,836,1,0,0,0,836,838,1,0,0,
        0,837,839,3,84,42,0,838,837,1,0,0,0,838,839,1,0,0,0,839,841,1,0,
        0,0,840,842,5,71,0,0,841,840,1,0,0,0,841,842,1,0,0,0,842,844,1,0,
        0,0,843,845,5,72,0,0,844,843,1,0,0,0,844,845,1,0,0,0,845,847,1,0,
        0,0,846,848,5,121,0,0,847,846,1,0,0,0,847,848,1,0,0,0,848,850,1,
        0,0,0,849,851,3,176,88,0,850,849,1,0,0,0,850,851,1,0,0,0,851,853,
        1,0,0,0,852,854,3,182,91,0,853,852,1,0,0,0,853,854,1,0,0,0,854,856,
        1,0,0,0,855,857,5,80,0,0,856,855,1,0,0,0,856,857,1,0,0,0,857,859,
        1,0,0,0,858,860,5,123,0,0,859,858,1,0,0,0,859,860,1,0,0,0,860,862,
        1,0,0,0,861,863,3,266,133,0,862,861,1,0,0,0,862,863,1,0,0,0,863,
        175,1,0,0,0,864,865,5,124,0,0,865,895,5,124,0,0,866,867,5,124,0,
        0,867,869,5,1,0,0,868,870,5,136,0,0,869,868,1,0,0,0,869,870,1,0,
        0,0,870,895,1,0,0,0,871,872,5,124,0,0,872,895,5,136,0,0,873,874,
        5,1,0,0,874,875,5,124,0,0,875,895,5,136,0,0,876,878,5,122,0,0,877,
        876,1,0,0,0,877,878,1,0,0,0,878,879,1,0,0,0,879,880,5,136,0,0,880,
        881,5,124,0,0,881,895,5,1,0,0,882,883,5,136,0,0,883,885,5,124,0,
        0,884,886,5,1,0,0,885,884,1,0,0,0,885,886,1,0,0,0,886,887,1,0,0,
        0,887,888,5,124,0,0,888,895,5,136,0,0,889,890,5,136,0,0,890,891,
        5,1,0,0,891,892,5,1,0,0,892,895,5,136,0,0,893,895,5,122,0,0,894,
        864,1,0,0,0,894,866,1,0,0,0,894,871,1,0,0,0,894,873,1,0,0,0,894,
        877,1,0,0,0,894,882,1,0,0,0,894,889,1,0,0,0,894,893,1,0,0,0,895,
        177,1,0,0,0,896,897,3,208,104,0,897,179,1,0,0,0,898,902,3,184,92,
        0,899,901,3,186,93,0,900,899,1,0,0,0,901,904,1,0,0,0,902,900,1,0,
        0,0,902,903,1,0,0,0,903,907,1,0,0,0,904,902,1,0,0,0,905,908,3,194,
        97,0,906,908,3,196,98,0,907,905,1,0,0,0,907,906,1,0,0,0,907,908,
        1,0,0,0,908,181,1,0,0,0,909,910,5,137,0,0,910,183,1,0,0,0,911,914,
        3,84,42,0,912,913,5,42,0,0,913,915,3,84,42,0,914,912,1,0,0,0,914,
        915,1,0,0,0,915,185,1,0,0,0,916,917,5,123,0,0,917,187,1,0,0,0,918,
        920,3,214,107,0,919,921,3,216,108,0,920,919,1,0,0,0,920,921,1,0,
        0,0,921,189,1,0,0,0,922,923,7,17,0,0,923,191,1,0,0,0,924,926,5,140,
        0,0,925,924,1,0,0,0,925,926,1,0,0,0,926,193,1,0,0,0,927,929,5,87,
        0,0,928,930,5,87,0,0,929,928,1,0,0,0,929,930,1,0,0,0,930,195,1,0,
        0,0,931,932,3,198,99,0,932,197,1,0,0,0,933,934,7,18,0,0,934,199,
        1,0,0,0,935,939,3,242,121,0,936,939,3,246,123,0,937,939,3,244,122,
        0,938,935,1,0,0,0,938,936,1,0,0,0,938,937,1,0,0,0,939,941,1,0,0,
        0,940,942,3,190,95,0,941,940,1,0,0,0,941,942,1,0,0,0,942,201,1,0,
        0,0,943,974,3,226,113,0,944,974,3,196,98,0,945,974,3,224,112,0,946,
        974,3,250,125,0,947,974,3,256,128,0,948,974,3,238,119,0,949,974,
        3,182,91,0,950,974,3,266,133,0,951,974,3,222,111,0,952,974,3,194,
        97,0,953,974,3,200,100,0,954,974,3,262,131,0,955,974,3,186,93,0,
        956,974,3,206,103,0,957,974,3,300,150,0,958,974,3,240,120,0,959,
        974,3,248,124,0,960,974,3,190,95,0,961,974,3,254,127,0,962,974,3,
        218,109,0,963,974,3,264,132,0,964,974,3,220,110,0,965,974,5,58,0,
        0,966,974,5,80,0,0,967,974,5,68,0,0,968,974,5,70,0,0,969,974,5,59,
        0,0,970,974,5,82,0,0,971,974,5,66,0,0,972,974,3,204,102,0,973,943,
        1,0,0,0,973,944,1,0,0,0,973,945,1,0,0,0,973,946,1,0,0,0,973,947,
        1,0,0,0,973,948,1,0,0,0,973,949,1,0,0,0,973,950,1,0,0,0,973,951,
        1,0,0,0,973,952,1,0,0,0,973,953,1,0,0,0,973,954,1,0,0,0,973,955,
        1,0,0,0,973,956,1,0,0,0,973,957,1,0,0,0,973,958,1,0,0,0,973,959,
        1,0,0,0,973,960,1,0,0,0,973,961,1,0,0,0,973,962,1,0,0,0,973,963,
        1,0,0,0,973,964,1,0,0,0,973,965,1,0,0,0,973,966,1,0,0,0,973,967,
        1,0,0,0,973,968,1,0,0,0,973,969,1,0,0,0,973,970,1,0,0,0,973,971,
        1,0,0,0,973,972,1,0,0,0,974,203,1,0,0,0,975,977,5,94,0,0,976,978,
        5,94,0,0,977,976,1,0,0,0,977,978,1,0,0,0,978,205,1,0,0,0,979,980,
        7,19,0,0,980,207,1,0,0,0,981,984,3,212,106,0,982,984,3,210,105,0,
        983,981,1,0,0,0,983,982,1,0,0,0,984,209,1,0,0,0,985,987,3,86,43,
        0,986,985,1,0,0,0,987,988,1,0,0,0,988,986,1,0,0,0,988,989,1,0,0,
        0,989,211,1,0,0,0,990,992,3,88,44,0,991,990,1,0,0,0,992,993,1,0,
        0,0,993,991,1,0,0,0,993,994,1,0,0,0,994,213,1,0,0,0,995,1000,5,119,
        0,0,996,998,5,119,0,0,997,999,5,119,0,0,998,997,1,0,0,0,998,999,
        1,0,0,0,999,1001,1,0,0,0,1000,996,1,0,0,0,1000,1001,1,0,0,0,1001,
        1011,1,0,0,0,1002,1007,5,121,0,0,1003,1005,5,121,0,0,1004,1006,5,
        121,0,0,1005,1004,1,0,0,0,1005,1006,1,0,0,0,1006,1008,1,0,0,0,1007,
        1003,1,0,0,0,1007,1008,1,0,0,0,1008,1011,1,0,0,0,1009,1011,5,84,
        0,0,1010,995,1,0,0,0,1010,1002,1,0,0,0,1010,1009,1,0,0,0,1011,215,
        1,0,0,0,1012,1027,5,94,0,0,1013,1027,5,68,0,0,1014,1027,5,79,0,0,
        1015,1027,5,53,0,0,1016,1027,5,80,0,0,1017,1027,5,70,0,0,1018,1020,
        5,95,0,0,1019,1021,5,95,0,0,1020,1019,1,0,0,0,1020,1021,1,0,0,0,
        1021,1027,1,0,0,0,1022,1024,5,69,0,0,1023,1025,5,69,0,0,1024,1023,
        1,0,0,0,1024,1025,1,0,0,0,1025,1027,1,0,0,0,1026,1012,1,0,0,0,1026,
        1013,1,0,0,0,1026,1014,1,0,0,0,1026,1015,1,0,0,0,1026,1016,1,0,0,
        0,1026,1017,1,0,0,0,1026,1018,1,0,0,0,1026,1022,1,0,0,0,1027,217,
        1,0,0,0,1028,1029,7,20,0,0,1029,219,1,0,0,0,1030,1031,5,79,0,0,1031,
        221,1,0,0,0,1032,1033,5,136,0,0,1033,223,1,0,0,0,1034,1041,3,236,
        118,0,1035,1041,3,234,117,0,1036,1041,3,232,116,0,1037,1041,3,230,
        115,0,1038,1041,3,228,114,0,1039,1041,3,226,113,0,1040,1034,1,0,
        0,0,1040,1035,1,0,0,0,1040,1036,1,0,0,0,1040,1037,1,0,0,0,1040,1038,
        1,0,0,0,1040,1039,1,0,0,0,1041,225,1,0,0,0,1042,1043,5,126,0,0,1043,
        227,1,0,0,0,1044,1045,5,127,0,0,1045,229,1,0,0,0,1046,1047,5,125,
        0,0,1047,231,1,0,0,0,1048,1049,5,113,0,0,1049,233,1,0,0,0,1050,1051,
        5,89,0,0,1051,235,1,0,0,0,1052,1053,5,114,0,0,1053,237,1,0,0,0,1054,
        1058,5,95,0,0,1055,1057,5,95,0,0,1056,1055,1,0,0,0,1057,1060,1,0,
        0,0,1058,1056,1,0,0,0,1058,1059,1,0,0,0,1059,1062,1,0,0,0,1060,1058,
        1,0,0,0,1061,1063,5,44,0,0,1062,1061,1,0,0,0,1062,1063,1,0,0,0,1063,
        1066,1,0,0,0,1064,1066,5,68,0,0,1065,1054,1,0,0,0,1065,1064,1,0,
        0,0,1066,239,1,0,0,0,1067,1069,5,43,0,0,1068,1067,1,0,0,0,1069,1072,
        1,0,0,0,1070,1068,1,0,0,0,1070,1071,1,0,0,0,1071,1073,1,0,0,0,1072,
        1070,1,0,0,0,1073,1075,5,134,0,0,1074,1076,3,190,95,0,1075,1074,
        1,0,0,0,1075,1076,1,0,0,0,1076,241,1,0,0,0,1077,1083,5,128,0,0,1078,
        1080,5,115,0,0,1079,1081,5,95,0,0,1080,1079,1,0,0,0,1080,1081,1,
        0,0,0,1081,1083,1,0,0,0,1082,1077,1,0,0,0,1082,1078,1,0,0,0,1083,
        243,1,0,0,0,1084,1085,5,132,0,0,1085,245,1,0,0,0,1086,1087,7,21,
        0,0,1087,247,1,0,0,0,1088,1090,5,43,0,0,1089,1088,1,0,0,0,1090,1093,
        1,0,0,0,1091,1089,1,0,0,0,1091,1092,1,0,0,0,1092,1094,1,0,0,0,1093,
        1091,1,0,0,0,1094,1095,5,135,0,0,1095,249,1,0,0,0,1096,1097,5,64,
        0,0,1097,251,1,0,0,0,1098,1099,5,90,0,0,1099,253,1,0,0,0,1100,1101,
        7,22,0,0,1101,255,1,0,0,0,1102,1104,7,23,0,0,1103,1105,3,190,95,
        0,1104,1103,1,0,0,0,1104,1105,1,0,0,0,1105,1107,1,0,0,0,1106,1102,
        1,0,0,0,1107,1108,1,0,0,0,1108,1106,1,0,0,0,1108,1109,1,0,0,0,1109,
        257,1,0,0,0,1110,1111,3,260,130,0,1111,1112,3,84,42,0,1112,259,1,
        0,0,0,1113,1114,7,24,0,0,1114,261,1,0,0,0,1115,1123,5,57,0,0,1116,
        1123,5,83,0,0,1117,1119,5,67,0,0,1118,1120,5,93,0,0,1119,1118,1,
        0,0,0,1119,1120,1,0,0,0,1120,1123,1,0,0,0,1121,1123,5,93,0,0,1122,
        1115,1,0,0,0,1122,1116,1,0,0,0,1122,1117,1,0,0,0,1122,1121,1,0,0,
        0,1123,263,1,0,0,0,1124,1126,5,64,0,0,1125,1127,5,64,0,0,1126,1125,
        1,0,0,0,1126,1127,1,0,0,0,1127,1130,1,0,0,0,1128,1130,5,90,0,0,1129,
        1124,1,0,0,0,1129,1128,1,0,0,0,1130,265,1,0,0,0,1131,1133,5,139,
        0,0,1132,1131,1,0,0,0,1133,1134,1,0,0,0,1134,1132,1,0,0,0,1134,1135,
        1,0,0,0,1135,267,1,0,0,0,1136,1137,5,128,0,0,1137,269,1,0,0,0,1138,
        1139,5,129,0,0,1139,271,1,0,0,0,1140,1142,5,115,0,0,1141,1143,5,
        115,0,0,1142,1141,1,0,0,0,1142,1143,1,0,0,0,1143,273,1,0,0,0,1144,
        1146,5,116,0,0,1145,1147,5,116,0,0,1146,1145,1,0,0,0,1146,1147,1,
        0,0,0,1147,275,1,0,0,0,1148,1149,5,134,0,0,1149,277,1,0,0,0,1150,
        1151,5,135,0,0,1151,279,1,0,0,0,1152,1153,5,86,0,0,1153,281,1,0,
        0,0,1154,1155,5,86,0,0,1155,1156,5,86,0,0,1156,283,1,0,0,0,1157,
        1158,5,86,0,0,1158,1159,5,86,0,0,1159,1160,5,86,0,0,1160,285,1,0,
        0,0,1161,1162,5,86,0,0,1162,1163,5,86,0,0,1163,1164,5,86,0,0,1164,
        1165,5,86,0,0,1165,287,1,0,0,0,1166,1167,5,76,0,0,1167,289,1,0,0,
        0,1168,1169,5,76,0,0,1169,1170,5,76,0,0,1170,291,1,0,0,0,1171,1172,
        5,76,0,0,1172,1173,5,76,0,0,1173,1174,5,76,0,0,1174,293,1,0,0,0,
        1175,1176,5,76,0,0,1176,1177,5,76,0,0,1177,1178,5,76,0,0,1178,1179,
        5,76,0,0,1179,295,1,0,0,0,1180,1181,5,83,0,0,1181,1182,5,86,0,0,
        1182,297,1,0,0,0,1183,1184,5,83,0,0,1184,1185,5,76,0,0,1185,299,
        1,0,0,0,1186,1187,5,89,0,0,1187,1196,5,76,0,0,1188,1189,5,76,0,0,
        1189,1196,5,96,0,0,1190,1191,5,89,0,0,1191,1192,5,76,0,0,1192,1196,
        5,96,0,0,1193,1196,5,96,0,0,1194,1196,5,70,0,0,1195,1186,1,0,0,0,
        1195,1188,1,0,0,0,1195,1190,1,0,0,0,1195,1193,1,0,0,0,1195,1194,
        1,0,0,0,1196,301,1,0,0,0,1197,1198,5,76,0,0,1198,1199,5,86,0,0,1199,
        303,1,0,0,0,1200,1202,5,88,0,0,1201,1203,5,76,0,0,1202,1201,1,0,
        0,0,1202,1203,1,0,0,0,1203,1205,1,0,0,0,1204,1206,5,96,0,0,1205,
        1204,1,0,0,0,1205,1206,1,0,0,0,1206,305,1,0,0,0,1207,1208,5,89,0,
        0,1208,307,1,0,0,0,118,310,323,328,334,340,345,349,354,358,364,369,
        382,386,391,395,400,404,409,416,420,425,439,466,478,487,509,519,
        526,533,590,592,597,602,613,636,641,648,651,659,664,667,674,679,
        688,694,698,702,705,707,711,715,724,760,764,779,789,796,801,811,
        818,823,829,835,838,841,844,847,850,853,856,859,862,869,877,885,
        894,902,907,914,920,925,929,938,941,973,977,983,988,993,998,1000,
        1005,1007,1010,1020,1024,1026,1040,1058,1062,1065,1070,1075,1080,
        1082,1091,1104,1108,1119,1122,1126,1129,1134,1142,1146,1195,1202,
        1205
    ]

class kernSpineParser ( Parser ):

    grammarFileName = "kernSpineParser.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "'!'", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "'norep'", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "'%'", "'&'", "'@'", "'A'", "'B'", "'C'", "'D'", "'E'", 
                     "'F'", "'G'", "'H'", "'I'", "'J'", "'K'", "'L'", "'M'", 
                     "'N'", "'O'", "'P'", "'Q'", "'R'", "'S'", "'T'", "'U'", 
                     "'V'", "'W'", "'X'", "'Y'", "'Z'", "'a'", "'b'", "'c'", 
                     "'d'", "'e'", "'f'", "'g'", "'h'", "'i'", "'j'", "'k'", 
                     "'l'", "'m'", "'n'", "'o'", "'p'", "'q'", "'r'", "'s'", 
                     "'t'", "'u'", "'v'", "'w'", "'x'", "'y'", "'z'", "<INVALID>", 
                     "'0'", "'1'", "'2'", "'3'", "'4'", "'5'", "'6'", "'7'", 
                     "'8'", "'9'", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "'\"'", "'''", "'['", "']'", 
                     "'{'", "'}'", "'#'", "'+'", "'-'", "'='", "'.'", "'|'", 
                     "'`'", "'^'", "'~'", "'<'", "'>'", "'/'", "'\\'", "'_'", 
                     "'$'", "'('", "')'", "':'", "';'", "','", "'?'", "' '", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "'\\t'" ]

    symbolicNames = [ "<INVALID>", "EXCLAMATION", "TANDEM_COL_START", "TANDEM_COL_END", 
                      "TANDEM_PART", "TANDEM_ACCOMP", "TANDEM_SOLO", "TANDEM_STROPHE", 
                      "TANDEM_STAFF", "TANDEM_TRANSPOSITION", "TANDEM_CLEF", 
                      "TANDEM_KEY_SIGNATURE", "TANDEM_MET", "METRONOME", 
                      "TANDEM_SECTION", "NO_REPEAT", "TANDEM_LEFT_HAND", 
                      "TANDEM_RIGHT_HAND", "TANDEM_ABOVE", "TANDEM_BELOW", 
                      "TANDEM_CENTERED", "TANDEM_PEDAL_START", "TANDEM_ELA", 
                      "TANDEM_PEDAL_END", "TANDEM_TUPLET_START", "TANDEM_TUPLET_END", 
                      "TANDEM_CUE_START", "TANDEM_CUE_END", "TANDEM_TREMOLO_START", 
                      "TANDEM_TREMOLO_END", "TANDEM_TSTART", "TANDEM_TEND", 
                      "TANDEM_RSCALE", "TANDEM_TIMESIGNATURE", "TANDEM_SIC", 
                      "TANDEM_OSSIA", "TANDEM_FIN", "TANDEM_SMINUS", "TANDEM_TIMEBASE", 
                      "TANDEM_BOUNDING_BOX", "LAYOUT", "OCTAVE_SHIFT", "PERCENT", 
                      "AMPERSAND", "AT", "CHAR_A", "CHAR_B", "CHAR_C", "CHAR_D", 
                      "CHAR_E", "CHAR_F", "CHAR_G", "CHAR_H", "CHAR_I", 
                      "CHAR_J", "CHAR_K", "CHAR_L", "CHAR_M", "CHAR_N", 
                      "CHAR_O", "CHAR_P", "CHAR_Q", "CHAR_R", "CHAR_S", 
                      "CHAR_T", "CHAR_U", "CHAR_V", "CHAR_W", "CHAR_X", 
                      "CHAR_Y", "CHAR_Z", "CHAR_a", "CHAR_b", "CHAR_c", 
                      "CHAR_d", "CHAR_e", "CHAR_f", "CHAR_g", "CHAR_h", 
                      "CHAR_i", "CHAR_j", "CHAR_k", "CHAR_l", "CHAR_m", 
                      "CHAR_n", "CHAR_o", "CHAR_p", "CHAR_q", "CHAR_r", 
                      "CHAR_s", "CHAR_t", "CHAR_u", "CHAR_v", "CHAR_w", 
                      "CHAR_x", "CHAR_y", "CHAR_z", "NON_ENGLISH", "DIGIT_0", 
                      "DIGIT_1", "DIGIT_2", "DIGIT_3", "DIGIT_4", "DIGIT_5", 
                      "DIGIT_6", "DIGIT_7", "DIGIT_8", "DIGIT_9", "SPINE_TERMINATOR", 
                      "SPINE_ADD", "SPINE_SPLIT", "SPINE_JOIN", "ASTERISK", 
                      "QUOTATION_MARK", "APOSTROPHE", "LEFT_BRACKET", "RIGHT_BRACKET", 
                      "LEFT_CURLY_BRACES", "RIGHT_CURLY_BRACES", "OCTOTHORPE", 
                      "PLUS", "MINUS", "EQUAL", "DOT", "PIPE", "GRAVE_ACCENT", 
                      "CIRCUMFLEX", "TILDE", "ANGLE_BRACKET_OPEN", "ANGLE_BRACKET_CLOSE", 
                      "SLASH", "BACKSLASH", "UNDERSCORE", "DOLLAR", "LEFT_PARENTHESIS", 
                      "RIGHT_PARENTHESIS", "COLON", "SEMICOLON", "COMMA", 
                      "QUESTION_MARK", "SPACE", "INSTRUMENT_TITLE", "INSTRUMENT", 
                      "METACOMMENT", "FIELDCOMMENT", "ANY", "FIELD_TEXT", 
                      "FREE_TEXT_TAB", "FREE_TEXT_EOL" ]

    RULE_start = 0
    RULE_metacomment = 1
    RULE_field = 2
    RULE_notes_rests_chords = 3
    RULE_structural = 4
    RULE_contextual = 5
    RULE_signatures = 6
    RULE_otherContextual = 7
    RULE_empty = 8
    RULE_rest = 9
    RULE_restChar_r = 10
    RULE_restDecoration = 11
    RULE_chord = 12
    RULE_note = 13
    RULE_nonVisualTandemInterpretation = 14
    RULE_boundingBox = 15
    RULE_xywh = 16
    RULE_x = 17
    RULE_y = 18
    RULE_w = 19
    RULE_h = 20
    RULE_pageNumber = 21
    RULE_visualTandemInterpretation = 22
    RULE_fieldComment = 23
    RULE_associatedIDS = 24
    RULE_placeHolder = 25
    RULE_octaveShift = 26
    RULE_pianoHand = 27
    RULE_tandemTuplet = 28
    RULE_tandemCue = 29
    RULE_tandemTremolo = 30
    RULE_ossia = 31
    RULE_rscale = 32
    RULE_pedal = 33
    RULE_ela = 34
    RULE_dynamics_position = 35
    RULE_sections = 36
    RULE_sectionNames = 37
    RULE_sectionName = 38
    RULE_transposition = 39
    RULE_instrument = 40
    RULE_instrumentTitle = 41
    RULE_number = 42
    RULE_lowerCasePitch = 43
    RULE_upperCasePitch = 44
    RULE_pitchClass = 45
    RULE_accomp = 46
    RULE_solo = 47
    RULE_strophe = 48
    RULE_timebase = 49
    RULE_part = 50
    RULE_staff = 51
    RULE_clef = 52
    RULE_clefValue = 53
    RULE_clefSign = 54
    RULE_clefLine = 55
    RULE_clefOctave = 56
    RULE_keySignature = 57
    RULE_keySignaturePitchClass = 58
    RULE_keySignatureCancel = 59
    RULE_keyMode = 60
    RULE_key = 61
    RULE_singleKey = 62
    RULE_minorKey = 63
    RULE_majorKey = 64
    RULE_modal = 65
    RULE_locrian = 66
    RULE_ionian = 67
    RULE_aeolian = 68
    RULE_mixolydian = 69
    RULE_lydian = 70
    RULE_phrygian = 71
    RULE_dorian = 72
    RULE_timeSignature = 73
    RULE_numerator = 74
    RULE_denominator = 75
    RULE_standardTimeSignature = 76
    RULE_additiveTimeSignature = 77
    RULE_mixedTimeSignature = 78
    RULE_alternatingTimeSignature = 79
    RULE_alternatingTimeSignatureItem = 80
    RULE_interchangingTimeSignature = 81
    RULE_meterSymbol = 82
    RULE_modernMeterSymbolSign = 83
    RULE_mensuration = 84
    RULE_metronome = 85
    RULE_nullInterpretation = 86
    RULE_barline = 87
    RULE_barLineType = 88
    RULE_restPosition = 89
    RULE_duration = 90
    RULE_fermata = 91
    RULE_modernDuration = 92
    RULE_augmentationDot = 93
    RULE_alteration = 94
    RULE_staffChange = 95
    RULE_chordSpace = 96
    RULE_graceNote = 97
    RULE_appoggiatura = 98
    RULE_appoggiaturaMode = 99
    RULE_ligatureTie = 100
    RULE_noteDecoration = 101
    RULE_noteDecorationCharX = 102
    RULE_phrase = 103
    RULE_diatonicPitchAndOctave = 104
    RULE_trebleNotes = 105
    RULE_bassNotes = 106
    RULE_accidental = 107
    RULE_alterationDisplay = 108
    RULE_turn = 109
    RULE_userAssignable = 110
    RULE_glissando = 111
    RULE_articulation = 112
    RULE_accent = 113
    RULE_tenuto = 114
    RULE_staccatissimo = 115
    RULE_pizzicato = 116
    RULE_spiccato = 117
    RULE_staccato = 118
    RULE_editorialIntervention = 119
    RULE_slurStart = 120
    RULE_ligatureTieStart = 121
    RULE_tieContinue = 122
    RULE_ligatureTieEnd = 123
    RULE_slurEnd = 124
    RULE_barLineCrossedNoteStart = 125
    RULE_barLineCrossedNoteEnd = 126
    RULE_stem = 127
    RULE_beam = 128
    RULE_staffPosition = 129
    RULE_lineSpace = 130
    RULE_mordent = 131
    RULE_trill = 132
    RULE_footnote = 133
    RULE_crescendoBegin = 134
    RULE_diminuendoBegin = 135
    RULE_crescendoEnd = 136
    RULE_diminuendoEnd = 137
    RULE_crescendoContinue = 138
    RULE_diminuendoContinue = 139
    RULE_piano = 140
    RULE_pianissimo = 141
    RULE_triplePiano = 142
    RULE_quadruplePiano = 143
    RULE_forte = 144
    RULE_fortissimo = 145
    RULE_tripleForte = 146
    RULE_quadrupleForte = 147
    RULE_mezzoPiano = 148
    RULE_mezzoForte = 149
    RULE_sforzando = 150
    RULE_fortePiano = 151
    RULE_rinforzando = 152
    RULE_subito = 153

    ruleNames =  [ "start", "metacomment", "field", "notes_rests_chords", 
                   "structural", "contextual", "signatures", "otherContextual", 
                   "empty", "rest", "restChar_r", "restDecoration", "chord", 
                   "note", "nonVisualTandemInterpretation", "boundingBox", 
                   "xywh", "x", "y", "w", "h", "pageNumber", "visualTandemInterpretation", 
                   "fieldComment", "associatedIDS", "placeHolder", "octaveShift", 
                   "pianoHand", "tandemTuplet", "tandemCue", "tandemTremolo", 
                   "ossia", "rscale", "pedal", "ela", "dynamics_position", 
                   "sections", "sectionNames", "sectionName", "transposition", 
                   "instrument", "instrumentTitle", "number", "lowerCasePitch", 
                   "upperCasePitch", "pitchClass", "accomp", "solo", "strophe", 
                   "timebase", "part", "staff", "clef", "clefValue", "clefSign", 
                   "clefLine", "clefOctave", "keySignature", "keySignaturePitchClass", 
                   "keySignatureCancel", "keyMode", "key", "singleKey", 
                   "minorKey", "majorKey", "modal", "locrian", "ionian", 
                   "aeolian", "mixolydian", "lydian", "phrygian", "dorian", 
                   "timeSignature", "numerator", "denominator", "standardTimeSignature", 
                   "additiveTimeSignature", "mixedTimeSignature", "alternatingTimeSignature", 
                   "alternatingTimeSignatureItem", "interchangingTimeSignature", 
                   "meterSymbol", "modernMeterSymbolSign", "mensuration", 
                   "metronome", "nullInterpretation", "barline", "barLineType", 
                   "restPosition", "duration", "fermata", "modernDuration", 
                   "augmentationDot", "alteration", "staffChange", "chordSpace", 
                   "graceNote", "appoggiatura", "appoggiaturaMode", "ligatureTie", 
                   "noteDecoration", "noteDecorationCharX", "phrase", "diatonicPitchAndOctave", 
                   "trebleNotes", "bassNotes", "accidental", "alterationDisplay", 
                   "turn", "userAssignable", "glissando", "articulation", 
                   "accent", "tenuto", "staccatissimo", "pizzicato", "spiccato", 
                   "staccato", "editorialIntervention", "slurStart", "ligatureTieStart", 
                   "tieContinue", "ligatureTieEnd", "slurEnd", "barLineCrossedNoteStart", 
                   "barLineCrossedNoteEnd", "stem", "beam", "staffPosition", 
                   "lineSpace", "mordent", "trill", "footnote", "crescendoBegin", 
                   "diminuendoBegin", "crescendoEnd", "diminuendoEnd", "crescendoContinue", 
                   "diminuendoContinue", "piano", "pianissimo", "triplePiano", 
                   "quadruplePiano", "forte", "fortissimo", "tripleForte", 
                   "quadrupleForte", "mezzoPiano", "mezzoForte", "sforzando", 
                   "fortePiano", "rinforzando", "subito" ]

    EOF = Token.EOF
    EXCLAMATION=1
    TANDEM_COL_START=2
    TANDEM_COL_END=3
    TANDEM_PART=4
    TANDEM_ACCOMP=5
    TANDEM_SOLO=6
    TANDEM_STROPHE=7
    TANDEM_STAFF=8
    TANDEM_TRANSPOSITION=9
    TANDEM_CLEF=10
    TANDEM_KEY_SIGNATURE=11
    TANDEM_MET=12
    METRONOME=13
    TANDEM_SECTION=14
    NO_REPEAT=15
    TANDEM_LEFT_HAND=16
    TANDEM_RIGHT_HAND=17
    TANDEM_ABOVE=18
    TANDEM_BELOW=19
    TANDEM_CENTERED=20
    TANDEM_PEDAL_START=21
    TANDEM_ELA=22
    TANDEM_PEDAL_END=23
    TANDEM_TUPLET_START=24
    TANDEM_TUPLET_END=25
    TANDEM_CUE_START=26
    TANDEM_CUE_END=27
    TANDEM_TREMOLO_START=28
    TANDEM_TREMOLO_END=29
    TANDEM_TSTART=30
    TANDEM_TEND=31
    TANDEM_RSCALE=32
    TANDEM_TIMESIGNATURE=33
    TANDEM_SIC=34
    TANDEM_OSSIA=35
    TANDEM_FIN=36
    TANDEM_SMINUS=37
    TANDEM_TIMEBASE=38
    TANDEM_BOUNDING_BOX=39
    LAYOUT=40
    OCTAVE_SHIFT=41
    PERCENT=42
    AMPERSAND=43
    AT=44
    CHAR_A=45
    CHAR_B=46
    CHAR_C=47
    CHAR_D=48
    CHAR_E=49
    CHAR_F=50
    CHAR_G=51
    CHAR_H=52
    CHAR_I=53
    CHAR_J=54
    CHAR_K=55
    CHAR_L=56
    CHAR_M=57
    CHAR_N=58
    CHAR_O=59
    CHAR_P=60
    CHAR_Q=61
    CHAR_R=62
    CHAR_S=63
    CHAR_T=64
    CHAR_U=65
    CHAR_V=66
    CHAR_W=67
    CHAR_X=68
    CHAR_Y=69
    CHAR_Z=70
    CHAR_a=71
    CHAR_b=72
    CHAR_c=73
    CHAR_d=74
    CHAR_e=75
    CHAR_f=76
    CHAR_g=77
    CHAR_h=78
    CHAR_i=79
    CHAR_j=80
    CHAR_k=81
    CHAR_l=82
    CHAR_m=83
    CHAR_n=84
    CHAR_o=85
    CHAR_p=86
    CHAR_q=87
    CHAR_r=88
    CHAR_s=89
    CHAR_t=90
    CHAR_u=91
    CHAR_v=92
    CHAR_w=93
    CHAR_x=94
    CHAR_y=95
    CHAR_z=96
    NON_ENGLISH=97
    DIGIT_0=98
    DIGIT_1=99
    DIGIT_2=100
    DIGIT_3=101
    DIGIT_4=102
    DIGIT_5=103
    DIGIT_6=104
    DIGIT_7=105
    DIGIT_8=106
    DIGIT_9=107
    SPINE_TERMINATOR=108
    SPINE_ADD=109
    SPINE_SPLIT=110
    SPINE_JOIN=111
    ASTERISK=112
    QUOTATION_MARK=113
    APOSTROPHE=114
    LEFT_BRACKET=115
    RIGHT_BRACKET=116
    LEFT_CURLY_BRACES=117
    RIGHT_CURLY_BRACES=118
    OCTOTHORPE=119
    PLUS=120
    MINUS=121
    EQUAL=122
    DOT=123
    PIPE=124
    GRAVE_ACCENT=125
    CIRCUMFLEX=126
    TILDE=127
    ANGLE_BRACKET_OPEN=128
    ANGLE_BRACKET_CLOSE=129
    SLASH=130
    BACKSLASH=131
    UNDERSCORE=132
    DOLLAR=133
    LEFT_PARENTHESIS=134
    RIGHT_PARENTHESIS=135
    COLON=136
    SEMICOLON=137
    COMMA=138
    QUESTION_MARK=139
    SPACE=140
    INSTRUMENT_TITLE=141
    INSTRUMENT=142
    METACOMMENT=143
    FIELDCOMMENT=144
    ANY=145
    FIELD_TEXT=146
    FREE_TEXT_TAB=147
    FREE_TEXT_EOL=148

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.1")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None




    class StartContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def metacomment(self):
            return self.getTypedRuleContext(kernSpineParser.MetacommentContext,0)


        def field(self):
            return self.getTypedRuleContext(kernSpineParser.FieldContext,0)


        def getRuleIndex(self):
            return kernSpineParser.RULE_start

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStart" ):
                listener.enterStart(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStart" ):
                listener.exitStart(self)




    def start(self):

        localctx = kernSpineParser.StartContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_start)
        try:
            self.state = 310
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [143]:
                self.enterOuterAlt(localctx, 1)
                self.state = 308
                self.metacomment()
                pass
            elif token in [1, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 43, 45, 46, 47, 48, 49, 50, 51, 54, 55, 56, 57, 58, 59, 60, 63, 64, 66, 67, 68, 70, 71, 72, 73, 74, 75, 76, 77, 79, 80, 81, 82, 83, 86, 87, 88, 89, 90, 93, 94, 95, 96, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 112, 113, 114, 115, 116, 117, 118, 122, 123, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 139, 141, 142, 144]:
                self.enterOuterAlt(localctx, 2)
                self.state = 309
                self.field()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MetacommentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def METACOMMENT(self):
            return self.getToken(kernSpineParser.METACOMMENT, 0)

        def getRuleIndex(self):
            return kernSpineParser.RULE_metacomment

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMetacomment" ):
                listener.enterMetacomment(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMetacomment" ):
                listener.exitMetacomment(self)




    def metacomment(self):

        localctx = kernSpineParser.MetacommentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_metacomment)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 312
            self.match(kernSpineParser.METACOMMENT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FieldContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def notes_rests_chords(self):
            return self.getTypedRuleContext(kernSpineParser.Notes_rests_chordsContext,0)


        def structural(self):
            return self.getTypedRuleContext(kernSpineParser.StructuralContext,0)


        def contextual(self):
            return self.getTypedRuleContext(kernSpineParser.ContextualContext,0)


        def barline(self):
            return self.getTypedRuleContext(kernSpineParser.BarlineContext,0)


        def empty(self):
            return self.getTypedRuleContext(kernSpineParser.EmptyContext,0)


        def visualTandemInterpretation(self):
            return self.getTypedRuleContext(kernSpineParser.VisualTandemInterpretationContext,0)


        def fieldComment(self):
            return self.getTypedRuleContext(kernSpineParser.FieldCommentContext,0)


        def nonVisualTandemInterpretation(self):
            return self.getTypedRuleContext(kernSpineParser.NonVisualTandemInterpretationContext,0)


        def boundingBox(self):
            return self.getTypedRuleContext(kernSpineParser.BoundingBoxContext,0)


        def getRuleIndex(self):
            return kernSpineParser.RULE_field

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterField" ):
                listener.enterField(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitField" ):
                listener.exitField(self)




    def field(self):

        localctx = kernSpineParser.FieldContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_field)
        try:
            self.state = 323
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 314
                self.notes_rests_chords()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 315
                self.structural()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 316
                self.contextual()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 317
                self.barline()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 318
                self.empty()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 319
                self.visualTandemInterpretation()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 320
                self.fieldComment()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 321
                self.nonVisualTandemInterpretation()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 322
                self.boundingBox()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Notes_rests_chordsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def note(self):
            return self.getTypedRuleContext(kernSpineParser.NoteContext,0)


        def rest(self):
            return self.getTypedRuleContext(kernSpineParser.RestContext,0)


        def chord(self):
            return self.getTypedRuleContext(kernSpineParser.ChordContext,0)


        def getRuleIndex(self):
            return kernSpineParser.RULE_notes_rests_chords

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNotes_rests_chords" ):
                listener.enterNotes_rests_chords(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNotes_rests_chords" ):
                listener.exitNotes_rests_chords(self)




    def notes_rests_chords(self):

        localctx = kernSpineParser.Notes_rests_chordsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_notes_rests_chords)
        try:
            self.state = 328
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,2,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 325
                self.note()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 326
                self.rest()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 327
                self.chord()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StructuralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def staff(self):
            return self.getTypedRuleContext(kernSpineParser.StaffContext,0)


        def getRuleIndex(self):
            return kernSpineParser.RULE_structural

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStructural" ):
                listener.enterStructural(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStructural" ):
                listener.exitStructural(self)




    def structural(self):

        localctx = kernSpineParser.StructuralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_structural)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 330
            self.staff()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ContextualContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def signatures(self):
            return self.getTypedRuleContext(kernSpineParser.SignaturesContext,0)


        def otherContextual(self):
            return self.getTypedRuleContext(kernSpineParser.OtherContextualContext,0)


        def getRuleIndex(self):
            return kernSpineParser.RULE_contextual

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterContextual" ):
                listener.enterContextual(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitContextual" ):
                listener.exitContextual(self)




    def contextual(self):

        localctx = kernSpineParser.ContextualContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_contextual)
        try:
            self.state = 334
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [10, 11, 12, 33]:
                self.enterOuterAlt(localctx, 1)
                self.state = 332
                self.signatures()
                pass
            elif token in [13, 41, 112]:
                self.enterOuterAlt(localctx, 2)
                self.state = 333
                self.otherContextual()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SignaturesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def clef(self):
            return self.getTypedRuleContext(kernSpineParser.ClefContext,0)


        def timeSignature(self):
            return self.getTypedRuleContext(kernSpineParser.TimeSignatureContext,0)


        def meterSymbol(self):
            return self.getTypedRuleContext(kernSpineParser.MeterSymbolContext,0)


        def keySignature(self):
            return self.getTypedRuleContext(kernSpineParser.KeySignatureContext,0)


        def getRuleIndex(self):
            return kernSpineParser.RULE_signatures

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSignatures" ):
                listener.enterSignatures(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSignatures" ):
                listener.exitSignatures(self)




    def signatures(self):

        localctx = kernSpineParser.SignaturesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_signatures)
        try:
            self.state = 340
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,4,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 336
                self.clef()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 337
                self.timeSignature()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 338
                self.meterSymbol()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 339
                self.keySignature()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OtherContextualContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def octaveShift(self):
            return self.getTypedRuleContext(kernSpineParser.OctaveShiftContext,0)


        def key(self):
            return self.getTypedRuleContext(kernSpineParser.KeyContext,0)


        def metronome(self):
            return self.getTypedRuleContext(kernSpineParser.MetronomeContext,0)


        def getRuleIndex(self):
            return kernSpineParser.RULE_otherContextual

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOtherContextual" ):
                listener.enterOtherContextual(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOtherContextual" ):
                listener.exitOtherContextual(self)




    def otherContextual(self):

        localctx = kernSpineParser.OtherContextualContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_otherContextual)
        try:
            self.state = 345
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [41]:
                self.enterOuterAlt(localctx, 1)
                self.state = 342
                self.octaveShift()
                pass
            elif token in [112]:
                self.enterOuterAlt(localctx, 2)
                self.state = 343
                self.key()
                pass
            elif token in [13]:
                self.enterOuterAlt(localctx, 3)
                self.state = 344
                self.metronome()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EmptyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def nullInterpretation(self):
            return self.getTypedRuleContext(kernSpineParser.NullInterpretationContext,0)


        def placeHolder(self):
            return self.getTypedRuleContext(kernSpineParser.PlaceHolderContext,0)


        def getRuleIndex(self):
            return kernSpineParser.RULE_empty

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEmpty" ):
                listener.enterEmpty(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEmpty" ):
                listener.exitEmpty(self)




    def empty(self):

        localctx = kernSpineParser.EmptyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_empty)
        try:
            self.state = 349
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [112]:
                self.enterOuterAlt(localctx, 1)
                self.state = 347
                self.nullInterpretation()
                pass
            elif token in [123]:
                self.enterOuterAlt(localctx, 2)
                self.state = 348
                self.placeHolder()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RestContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def restChar_r(self):
            return self.getTypedRuleContext(kernSpineParser.RestChar_rContext,0)


        def restDecoration(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(kernSpineParser.RestDecorationContext)
            else:
                return self.getTypedRuleContext(kernSpineParser.RestDecorationContext,i)


        def duration(self):
            return self.getTypedRuleContext(kernSpineParser.DurationContext,0)


        def getRuleIndex(self):
            return kernSpineParser.RULE_rest

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRest" ):
                listener.enterRest(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRest" ):
                listener.exitRest(self)




    def rest(self):

        localctx = kernSpineParser.RestContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_rest)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 354
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 43)) & ~0x3f) == 0 and ((1 << (_la - 43)) & 4521363377226237) != 0) or ((((_la - 114)) & ~0x3f) == 0 and ((1 << (_la - 114)) & 11584025) != 0):
                self.state = 351
                self.restDecoration()
                self.state = 356
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 358
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 98)) & ~0x3f) == 0 and ((1 << (_la - 98)) & 1023) != 0):
                self.state = 357
                self.duration()


            self.state = 360
            self.restChar_r()
            self.state = 364
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,9,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 361
                    self.restDecoration() 
                self.state = 366
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,9,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RestChar_rContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CHAR_r(self, i:int=None):
            if i is None:
                return self.getTokens(kernSpineParser.CHAR_r)
            else:
                return self.getToken(kernSpineParser.CHAR_r, i)

        def getRuleIndex(self):
            return kernSpineParser.RULE_restChar_r

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRestChar_r" ):
                listener.enterRestChar_r(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRestChar_r" ):
                listener.exitRestChar_r(self)




    def restChar_r(self):

        localctx = kernSpineParser.RestChar_rContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_restChar_r)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 367
            self.match(kernSpineParser.CHAR_r)
            self.state = 369
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,10,self._ctx)
            if la_ == 1:
                self.state = 368
                self.match(kernSpineParser.CHAR_r)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RestDecorationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def slurStart(self):
            return self.getTypedRuleContext(kernSpineParser.SlurStartContext,0)


        def graceNote(self):
            return self.getTypedRuleContext(kernSpineParser.GraceNoteContext,0)


        def staffChange(self):
            return self.getTypedRuleContext(kernSpineParser.StaffChangeContext,0)


        def restPosition(self):
            return self.getTypedRuleContext(kernSpineParser.RestPositionContext,0)


        def fermata(self):
            return self.getTypedRuleContext(kernSpineParser.FermataContext,0)


        def editorialIntervention(self):
            return self.getTypedRuleContext(kernSpineParser.EditorialInterventionContext,0)


        def slurEnd(self):
            return self.getTypedRuleContext(kernSpineParser.SlurEndContext,0)


        def staccato(self):
            return self.getTypedRuleContext(kernSpineParser.StaccatoContext,0)


        def phrase(self):
            return self.getTypedRuleContext(kernSpineParser.PhraseContext,0)


        def augmentationDot(self):
            return self.getTypedRuleContext(kernSpineParser.AugmentationDotContext,0)


        def CHAR_j(self):
            return self.getToken(kernSpineParser.CHAR_j, 0)

        def getRuleIndex(self):
            return kernSpineParser.RULE_restDecoration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRestDecoration" ):
                listener.enterRestDecoration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRestDecoration" ):
                listener.exitRestDecoration(self)




    def restDecoration(self):

        localctx = kernSpineParser.RestDecorationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_restDecoration)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 382
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,11,self._ctx)
            if la_ == 1:
                self.state = 371
                self.slurStart()
                pass

            elif la_ == 2:
                self.state = 372
                self.graceNote()
                pass

            elif la_ == 3:
                self.state = 373
                self.staffChange()
                pass

            elif la_ == 4:
                self.state = 374
                self.restPosition()
                pass

            elif la_ == 5:
                self.state = 375
                self.fermata()
                pass

            elif la_ == 6:
                self.state = 376
                self.editorialIntervention()
                pass

            elif la_ == 7:
                self.state = 377
                self.slurEnd()
                pass

            elif la_ == 8:
                self.state = 378
                self.staccato()
                pass

            elif la_ == 9:
                self.state = 379
                self.phrase()
                pass

            elif la_ == 10:
                self.state = 380
                self.augmentationDot()
                pass

            elif la_ == 11:
                self.state = 381
                self.match(kernSpineParser.CHAR_j)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ChordContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def note(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(kernSpineParser.NoteContext)
            else:
                return self.getTypedRuleContext(kernSpineParser.NoteContext,i)


        def rest(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(kernSpineParser.RestContext)
            else:
                return self.getTypedRuleContext(kernSpineParser.RestContext,i)


        def chordSpace(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(kernSpineParser.ChordSpaceContext)
            else:
                return self.getTypedRuleContext(kernSpineParser.ChordSpaceContext,i)


        def getRuleIndex(self):
            return kernSpineParser.RULE_chord

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterChord" ):
                listener.enterChord(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitChord" ):
                listener.exitChord(self)




    def chord(self):

        localctx = kernSpineParser.ChordContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_chord)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 386
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,12,self._ctx)
            if la_ == 1:
                self.state = 384
                self.note()
                pass

            elif la_ == 2:
                self.state = 385
                self.rest()
                pass


            self.state = 393 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 388
                self.chordSpace()
                self.state = 391
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,13,self._ctx)
                if la_ == 1:
                    self.state = 389
                    self.note()
                    pass

                elif la_ == 2:
                    self.state = 390
                    self.rest()
                    pass


                self.state = 395 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (((((_la - 43)) & ~0x3f) == 0 and ((1 << (_la - 43)) & -18865454941210115) != 0) or ((((_la - 107)) & ~0x3f) == 0 and ((1 << (_la - 107)) & 15032192961) != 0)):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NoteContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def diatonicPitchAndOctave(self):
            return self.getTypedRuleContext(kernSpineParser.DiatonicPitchAndOctaveContext,0)


        def noteDecoration(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(kernSpineParser.NoteDecorationContext)
            else:
                return self.getTypedRuleContext(kernSpineParser.NoteDecorationContext,i)


        def duration(self):
            return self.getTypedRuleContext(kernSpineParser.DurationContext,0)


        def alteration(self):
            return self.getTypedRuleContext(kernSpineParser.AlterationContext,0)


        def getRuleIndex(self):
            return kernSpineParser.RULE_note

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNote" ):
                listener.enterNote(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNote" ):
                listener.exitNote(self)




    def note(self):

        localctx = kernSpineParser.NoteContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_note)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 400
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,15,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 397
                    self.noteDecoration() 
                self.state = 402
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,15,self._ctx)

            self.state = 404
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 98)) & ~0x3f) == 0 and ((1 << (_la - 98)) & 1023) != 0):
                self.state = 403
                self.duration()


            self.state = 409
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,17,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 406
                    self.noteDecoration() 
                self.state = 411
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,17,self._ctx)

            self.state = 412
            self.diatonicPitchAndOctave()
            self.state = 416
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,18,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 413
                    self.noteDecoration() 
                self.state = 418
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,18,self._ctx)

            self.state = 420
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 84)) & ~0x3f) == 0 and ((1 << (_la - 84)) & 171798691841) != 0):
                self.state = 419
                self.alteration()


            self.state = 425
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,20,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 422
                    self.noteDecoration() 
                self.state = 427
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,20,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NonVisualTandemInterpretationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def timebase(self):
            return self.getTypedRuleContext(kernSpineParser.TimebaseContext,0)


        def solo(self):
            return self.getTypedRuleContext(kernSpineParser.SoloContext,0)


        def accomp(self):
            return self.getTypedRuleContext(kernSpineParser.AccompContext,0)


        def strophe(self):
            return self.getTypedRuleContext(kernSpineParser.StropheContext,0)


        def part(self):
            return self.getTypedRuleContext(kernSpineParser.PartContext,0)


        def instrument(self):
            return self.getTypedRuleContext(kernSpineParser.InstrumentContext,0)


        def instrumentTitle(self):
            return self.getTypedRuleContext(kernSpineParser.InstrumentTitleContext,0)


        def transposition(self):
            return self.getTypedRuleContext(kernSpineParser.TranspositionContext,0)


        def sections(self):
            return self.getTypedRuleContext(kernSpineParser.SectionsContext,0)


        def pianoHand(self):
            return self.getTypedRuleContext(kernSpineParser.PianoHandContext,0)


        def ossia(self):
            return self.getTypedRuleContext(kernSpineParser.OssiaContext,0)


        def getRuleIndex(self):
            return kernSpineParser.RULE_nonVisualTandemInterpretation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNonVisualTandemInterpretation" ):
                listener.enterNonVisualTandemInterpretation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNonVisualTandemInterpretation" ):
                listener.exitNonVisualTandemInterpretation(self)




    def nonVisualTandemInterpretation(self):

        localctx = kernSpineParser.NonVisualTandemInterpretationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_nonVisualTandemInterpretation)
        try:
            self.state = 439
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [38]:
                self.enterOuterAlt(localctx, 1)
                self.state = 428
                self.timebase()
                pass
            elif token in [6]:
                self.enterOuterAlt(localctx, 2)
                self.state = 429
                self.solo()
                pass
            elif token in [5]:
                self.enterOuterAlt(localctx, 3)
                self.state = 430
                self.accomp()
                pass
            elif token in [7]:
                self.enterOuterAlt(localctx, 4)
                self.state = 431
                self.strophe()
                pass
            elif token in [4]:
                self.enterOuterAlt(localctx, 5)
                self.state = 432
                self.part()
                pass
            elif token in [142]:
                self.enterOuterAlt(localctx, 6)
                self.state = 433
                self.instrument()
                pass
            elif token in [141]:
                self.enterOuterAlt(localctx, 7)
                self.state = 434
                self.instrumentTitle()
                pass
            elif token in [9]:
                self.enterOuterAlt(localctx, 8)
                self.state = 435
                self.transposition()
                pass
            elif token in [14]:
                self.enterOuterAlt(localctx, 9)
                self.state = 436
                self.sections()
                pass
            elif token in [16, 17]:
                self.enterOuterAlt(localctx, 10)
                self.state = 437
                self.pianoHand()
                pass
            elif token in [34, 35, 36, 37]:
                self.enterOuterAlt(localctx, 11)
                self.state = 438
                self.ossia()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BoundingBoxContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TANDEM_BOUNDING_BOX(self):
            return self.getToken(kernSpineParser.TANDEM_BOUNDING_BOX, 0)

        def MINUS(self):
            return self.getToken(kernSpineParser.MINUS, 0)

        def pageNumber(self):
            return self.getTypedRuleContext(kernSpineParser.PageNumberContext,0)


        def COLON(self):
            return self.getToken(kernSpineParser.COLON, 0)

        def xywh(self):
            return self.getTypedRuleContext(kernSpineParser.XywhContext,0)


        def getRuleIndex(self):
            return kernSpineParser.RULE_boundingBox

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBoundingBox" ):
                listener.enterBoundingBox(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBoundingBox" ):
                listener.exitBoundingBox(self)




    def boundingBox(self):

        localctx = kernSpineParser.BoundingBoxContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_boundingBox)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 441
            self.match(kernSpineParser.TANDEM_BOUNDING_BOX)
            self.state = 442
            self.match(kernSpineParser.MINUS)
            self.state = 443
            self.pageNumber()
            self.state = 444
            self.match(kernSpineParser.COLON)
            self.state = 445
            self.xywh()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class XywhContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def x(self):
            return self.getTypedRuleContext(kernSpineParser.XContext,0)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(kernSpineParser.COMMA)
            else:
                return self.getToken(kernSpineParser.COMMA, i)

        def y(self):
            return self.getTypedRuleContext(kernSpineParser.YContext,0)


        def w(self):
            return self.getTypedRuleContext(kernSpineParser.WContext,0)


        def h(self):
            return self.getTypedRuleContext(kernSpineParser.HContext,0)


        def getRuleIndex(self):
            return kernSpineParser.RULE_xywh

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXywh" ):
                listener.enterXywh(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXywh" ):
                listener.exitXywh(self)




    def xywh(self):

        localctx = kernSpineParser.XywhContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_xywh)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 447
            self.x()
            self.state = 448
            self.match(kernSpineParser.COMMA)
            self.state = 449
            self.y()
            self.state = 450
            self.match(kernSpineParser.COMMA)
            self.state = 451
            self.w()
            self.state = 452
            self.match(kernSpineParser.COMMA)
            self.state = 453
            self.h()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class XContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def number(self):
            return self.getTypedRuleContext(kernSpineParser.NumberContext,0)


        def getRuleIndex(self):
            return kernSpineParser.RULE_x

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterX" ):
                listener.enterX(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitX" ):
                listener.exitX(self)




    def x(self):

        localctx = kernSpineParser.XContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_x)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 455
            self.number()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class YContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def number(self):
            return self.getTypedRuleContext(kernSpineParser.NumberContext,0)


        def getRuleIndex(self):
            return kernSpineParser.RULE_y

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterY" ):
                listener.enterY(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitY" ):
                listener.exitY(self)




    def y(self):

        localctx = kernSpineParser.YContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_y)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 457
            self.number()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def number(self):
            return self.getTypedRuleContext(kernSpineParser.NumberContext,0)


        def getRuleIndex(self):
            return kernSpineParser.RULE_w

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterW" ):
                listener.enterW(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitW" ):
                listener.exitW(self)




    def w(self):

        localctx = kernSpineParser.WContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_w)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 459
            self.number()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class HContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def number(self):
            return self.getTypedRuleContext(kernSpineParser.NumberContext,0)


        def getRuleIndex(self):
            return kernSpineParser.RULE_h

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterH" ):
                listener.enterH(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitH" ):
                listener.exitH(self)




    def h(self):

        localctx = kernSpineParser.HContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_h)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 461
            self.number()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PageNumberContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COLON(self, i:int=None):
            if i is None:
                return self.getTokens(kernSpineParser.COLON)
            else:
                return self.getToken(kernSpineParser.COLON, i)

        def getRuleIndex(self):
            return kernSpineParser.RULE_pageNumber

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPageNumber" ):
                listener.enterPageNumber(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPageNumber" ):
                listener.exitPageNumber(self)




    def pageNumber(self):

        localctx = kernSpineParser.PageNumberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_pageNumber)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 466
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & -2) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & -1) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & 2096895) != 0):
                self.state = 463
                _la = self._input.LA(1)
                if _la <= 0 or _la==136:
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 468
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VisualTandemInterpretationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def dynamics_position(self):
            return self.getTypedRuleContext(kernSpineParser.Dynamics_positionContext,0)


        def tandemCue(self):
            return self.getTypedRuleContext(kernSpineParser.TandemCueContext,0)


        def tandemTremolo(self):
            return self.getTypedRuleContext(kernSpineParser.TandemTremoloContext,0)


        def rscale(self):
            return self.getTypedRuleContext(kernSpineParser.RscaleContext,0)


        def pedal(self):
            return self.getTypedRuleContext(kernSpineParser.PedalContext,0)


        def ela(self):
            return self.getTypedRuleContext(kernSpineParser.ElaContext,0)


        def tandemTuplet(self):
            return self.getTypedRuleContext(kernSpineParser.TandemTupletContext,0)


        def TANDEM_TSTART(self):
            return self.getToken(kernSpineParser.TANDEM_TSTART, 0)

        def TANDEM_TEND(self):
            return self.getToken(kernSpineParser.TANDEM_TEND, 0)

        def getRuleIndex(self):
            return kernSpineParser.RULE_visualTandemInterpretation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVisualTandemInterpretation" ):
                listener.enterVisualTandemInterpretation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVisualTandemInterpretation" ):
                listener.exitVisualTandemInterpretation(self)




    def visualTandemInterpretation(self):

        localctx = kernSpineParser.VisualTandemInterpretationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_visualTandemInterpretation)
        try:
            self.state = 478
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [18, 19, 20]:
                self.enterOuterAlt(localctx, 1)
                self.state = 469
                self.dynamics_position()
                pass
            elif token in [26, 27]:
                self.enterOuterAlt(localctx, 2)
                self.state = 470
                self.tandemCue()
                pass
            elif token in [28, 29]:
                self.enterOuterAlt(localctx, 3)
                self.state = 471
                self.tandemTremolo()
                pass
            elif token in [32]:
                self.enterOuterAlt(localctx, 4)
                self.state = 472
                self.rscale()
                pass
            elif token in [21, 23]:
                self.enterOuterAlt(localctx, 5)
                self.state = 473
                self.pedal()
                pass
            elif token in [22]:
                self.enterOuterAlt(localctx, 6)
                self.state = 474
                self.ela()
                pass
            elif token in [24, 25]:
                self.enterOuterAlt(localctx, 7)
                self.state = 475
                self.tandemTuplet()
                pass
            elif token in [30]:
                self.enterOuterAlt(localctx, 8)
                self.state = 476
                self.match(kernSpineParser.TANDEM_TSTART)
                pass
            elif token in [31]:
                self.enterOuterAlt(localctx, 9)
                self.state = 477
                self.match(kernSpineParser.TANDEM_TEND)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FieldCommentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LAYOUT(self):
            return self.getToken(kernSpineParser.LAYOUT, 0)

        def FIELDCOMMENT(self):
            return self.getToken(kernSpineParser.FIELDCOMMENT, 0)

        def EXCLAMATION(self):
            return self.getToken(kernSpineParser.EXCLAMATION, 0)

        def getRuleIndex(self):
            return kernSpineParser.RULE_fieldComment

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFieldComment" ):
                listener.enterFieldComment(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFieldComment" ):
                listener.exitFieldComment(self)




    def fieldComment(self):

        localctx = kernSpineParser.FieldCommentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_fieldComment)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 480
            _la = self._input.LA(1)
            if not(_la==1 or _la==40 or _la==144):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AssociatedIDSContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def number(self):
            return self.getTypedRuleContext(kernSpineParser.NumberContext,0)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(kernSpineParser.COMMA)
            else:
                return self.getToken(kernSpineParser.COMMA, i)

        def associatedIDS(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(kernSpineParser.AssociatedIDSContext)
            else:
                return self.getTypedRuleContext(kernSpineParser.AssociatedIDSContext,i)


        def getRuleIndex(self):
            return kernSpineParser.RULE_associatedIDS

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssociatedIDS" ):
                listener.enterAssociatedIDS(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssociatedIDS" ):
                listener.exitAssociatedIDS(self)




    def associatedIDS(self):

        localctx = kernSpineParser.AssociatedIDSContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_associatedIDS)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 482
            self.number()
            self.state = 487
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,24,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 483
                    self.match(kernSpineParser.COMMA)
                    self.state = 484
                    self.associatedIDS() 
                self.state = 489
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,24,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PlaceHolderContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DOT(self):
            return self.getToken(kernSpineParser.DOT, 0)

        def getRuleIndex(self):
            return kernSpineParser.RULE_placeHolder

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPlaceHolder" ):
                listener.enterPlaceHolder(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPlaceHolder" ):
                listener.exitPlaceHolder(self)




    def placeHolder(self):

        localctx = kernSpineParser.PlaceHolderContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_placeHolder)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 490
            self.match(kernSpineParser.DOT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OctaveShiftContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OCTAVE_SHIFT(self):
            return self.getToken(kernSpineParser.OCTAVE_SHIFT, 0)

        def getRuleIndex(self):
            return kernSpineParser.RULE_octaveShift

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOctaveShift" ):
                listener.enterOctaveShift(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOctaveShift" ):
                listener.exitOctaveShift(self)




    def octaveShift(self):

        localctx = kernSpineParser.OctaveShiftContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_octaveShift)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 492
            self.match(kernSpineParser.OCTAVE_SHIFT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PianoHandContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TANDEM_LEFT_HAND(self):
            return self.getToken(kernSpineParser.TANDEM_LEFT_HAND, 0)

        def TANDEM_RIGHT_HAND(self):
            return self.getToken(kernSpineParser.TANDEM_RIGHT_HAND, 0)

        def getRuleIndex(self):
            return kernSpineParser.RULE_pianoHand

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPianoHand" ):
                listener.enterPianoHand(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPianoHand" ):
                listener.exitPianoHand(self)




    def pianoHand(self):

        localctx = kernSpineParser.PianoHandContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_pianoHand)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 494
            _la = self._input.LA(1)
            if not(_la==16 or _la==17):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TandemTupletContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TANDEM_TUPLET_START(self):
            return self.getToken(kernSpineParser.TANDEM_TUPLET_START, 0)

        def TANDEM_TUPLET_END(self):
            return self.getToken(kernSpineParser.TANDEM_TUPLET_END, 0)

        def getRuleIndex(self):
            return kernSpineParser.RULE_tandemTuplet

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTandemTuplet" ):
                listener.enterTandemTuplet(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTandemTuplet" ):
                listener.exitTandemTuplet(self)




    def tandemTuplet(self):

        localctx = kernSpineParser.TandemTupletContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_tandemTuplet)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 496
            _la = self._input.LA(1)
            if not(_la==24 or _la==25):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TandemCueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TANDEM_CUE_START(self):
            return self.getToken(kernSpineParser.TANDEM_CUE_START, 0)

        def TANDEM_CUE_END(self):
            return self.getToken(kernSpineParser.TANDEM_CUE_END, 0)

        def getRuleIndex(self):
            return kernSpineParser.RULE_tandemCue

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTandemCue" ):
                listener.enterTandemCue(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTandemCue" ):
                listener.exitTandemCue(self)




    def tandemCue(self):

        localctx = kernSpineParser.TandemCueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_tandemCue)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 498
            _la = self._input.LA(1)
            if not(_la==26 or _la==27):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TandemTremoloContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TANDEM_TREMOLO_START(self):
            return self.getToken(kernSpineParser.TANDEM_TREMOLO_START, 0)

        def TANDEM_TREMOLO_END(self):
            return self.getToken(kernSpineParser.TANDEM_TREMOLO_END, 0)

        def getRuleIndex(self):
            return kernSpineParser.RULE_tandemTremolo

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTandemTremolo" ):
                listener.enterTandemTremolo(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTandemTremolo" ):
                listener.exitTandemTremolo(self)




    def tandemTremolo(self):

        localctx = kernSpineParser.TandemTremoloContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_tandemTremolo)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 500
            _la = self._input.LA(1)
            if not(_la==28 or _la==29):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OssiaContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TANDEM_SIC(self):
            return self.getToken(kernSpineParser.TANDEM_SIC, 0)

        def TANDEM_OSSIA(self):
            return self.getToken(kernSpineParser.TANDEM_OSSIA, 0)

        def TANDEM_FIN(self):
            return self.getToken(kernSpineParser.TANDEM_FIN, 0)

        def TANDEM_SMINUS(self):
            return self.getToken(kernSpineParser.TANDEM_SMINUS, 0)

        def getRuleIndex(self):
            return kernSpineParser.RULE_ossia

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOssia" ):
                listener.enterOssia(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOssia" ):
                listener.exitOssia(self)




    def ossia(self):

        localctx = kernSpineParser.OssiaContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_ossia)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 502
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 257698037760) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RscaleContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TANDEM_RSCALE(self):
            return self.getToken(kernSpineParser.TANDEM_RSCALE, 0)

        def COLON(self):
            return self.getToken(kernSpineParser.COLON, 0)

        def number(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(kernSpineParser.NumberContext)
            else:
                return self.getTypedRuleContext(kernSpineParser.NumberContext,i)


        def SLASH(self):
            return self.getToken(kernSpineParser.SLASH, 0)

        def getRuleIndex(self):
            return kernSpineParser.RULE_rscale

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRscale" ):
                listener.enterRscale(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRscale" ):
                listener.exitRscale(self)




    def rscale(self):

        localctx = kernSpineParser.RscaleContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_rscale)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 504
            self.match(kernSpineParser.TANDEM_RSCALE)
            self.state = 505
            self.match(kernSpineParser.COLON)
            self.state = 506
            self.number()
            self.state = 509
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==130:
                self.state = 507
                self.match(kernSpineParser.SLASH)
                self.state = 508
                self.number()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PedalContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TANDEM_PEDAL_START(self):
            return self.getToken(kernSpineParser.TANDEM_PEDAL_START, 0)

        def TANDEM_PEDAL_END(self):
            return self.getToken(kernSpineParser.TANDEM_PEDAL_END, 0)

        def getRuleIndex(self):
            return kernSpineParser.RULE_pedal

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPedal" ):
                listener.enterPedal(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPedal" ):
                listener.exitPedal(self)




    def pedal(self):

        localctx = kernSpineParser.PedalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_pedal)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 511
            _la = self._input.LA(1)
            if not(_la==21 or _la==23):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ElaContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TANDEM_ELA(self):
            return self.getToken(kernSpineParser.TANDEM_ELA, 0)

        def getRuleIndex(self):
            return kernSpineParser.RULE_ela

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEla" ):
                listener.enterEla(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEla" ):
                listener.exitEla(self)




    def ela(self):

        localctx = kernSpineParser.ElaContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_ela)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 513
            self.match(kernSpineParser.TANDEM_ELA)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Dynamics_positionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TANDEM_ABOVE(self):
            return self.getToken(kernSpineParser.TANDEM_ABOVE, 0)

        def TANDEM_BELOW(self):
            return self.getToken(kernSpineParser.TANDEM_BELOW, 0)

        def TANDEM_CENTERED(self):
            return self.getToken(kernSpineParser.TANDEM_CENTERED, 0)

        def getRuleIndex(self):
            return kernSpineParser.RULE_dynamics_position

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDynamics_position" ):
                listener.enterDynamics_position(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDynamics_position" ):
                listener.exitDynamics_position(self)




    def dynamics_position(self):

        localctx = kernSpineParser.Dynamics_positionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_dynamics_position)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 515
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 1835008) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SectionsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TANDEM_SECTION(self):
            return self.getToken(kernSpineParser.TANDEM_SECTION, 0)

        def LEFT_BRACKET(self):
            return self.getToken(kernSpineParser.LEFT_BRACKET, 0)

        def sectionNames(self):
            return self.getTypedRuleContext(kernSpineParser.SectionNamesContext,0)


        def RIGHT_BRACKET(self):
            return self.getToken(kernSpineParser.RIGHT_BRACKET, 0)

        def sectionName(self):
            return self.getTypedRuleContext(kernSpineParser.SectionNameContext,0)


        def NO_REPEAT(self):
            return self.getToken(kernSpineParser.NO_REPEAT, 0)

        def getRuleIndex(self):
            return kernSpineParser.RULE_sections

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSections" ):
                listener.enterSections(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSections" ):
                listener.exitSections(self)




    def sections(self):

        localctx = kernSpineParser.SectionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_sections)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 517
            self.match(kernSpineParser.TANDEM_SECTION)
            self.state = 526
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [15, 115]:
                self.state = 519
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==15:
                    self.state = 518
                    self.match(kernSpineParser.NO_REPEAT)


                self.state = 521
                self.match(kernSpineParser.LEFT_BRACKET)
                self.state = 522
                self.sectionNames()
                self.state = 523
                self.match(kernSpineParser.RIGHT_BRACKET)
                pass
            elif token in [45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 140]:
                self.state = 525
                self.sectionName()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SectionNamesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def sectionName(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(kernSpineParser.SectionNameContext)
            else:
                return self.getTypedRuleContext(kernSpineParser.SectionNameContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(kernSpineParser.COMMA)
            else:
                return self.getToken(kernSpineParser.COMMA, i)

        def getRuleIndex(self):
            return kernSpineParser.RULE_sectionNames

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSectionNames" ):
                listener.enterSectionNames(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSectionNames" ):
                listener.exitSectionNames(self)




    def sectionNames(self):

        localctx = kernSpineParser.SectionNamesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_sectionNames)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 528
            self.sectionName()
            self.state = 533
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==138:
                self.state = 529
                self.match(kernSpineParser.COMMA)
                self.state = 530
                self.sectionName()
                self.state = 535
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SectionNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CHAR_A(self, i:int=None):
            if i is None:
                return self.getTokens(kernSpineParser.CHAR_A)
            else:
                return self.getToken(kernSpineParser.CHAR_A, i)

        def CHAR_B(self, i:int=None):
            if i is None:
                return self.getTokens(kernSpineParser.CHAR_B)
            else:
                return self.getToken(kernSpineParser.CHAR_B, i)

        def CHAR_C(self, i:int=None):
            if i is None:
                return self.getTokens(kernSpineParser.CHAR_C)
            else:
                return self.getToken(kernSpineParser.CHAR_C, i)

        def CHAR_D(self, i:int=None):
            if i is None:
                return self.getTokens(kernSpineParser.CHAR_D)
            else:
                return self.getToken(kernSpineParser.CHAR_D, i)

        def CHAR_E(self, i:int=None):
            if i is None:
                return self.getTokens(kernSpineParser.CHAR_E)
            else:
                return self.getToken(kernSpineParser.CHAR_E, i)

        def CHAR_F(self, i:int=None):
            if i is None:
                return self.getTokens(kernSpineParser.CHAR_F)
            else:
                return self.getToken(kernSpineParser.CHAR_F, i)

        def CHAR_G(self, i:int=None):
            if i is None:
                return self.getTokens(kernSpineParser.CHAR_G)
            else:
                return self.getToken(kernSpineParser.CHAR_G, i)

        def CHAR_H(self, i:int=None):
            if i is None:
                return self.getTokens(kernSpineParser.CHAR_H)
            else:
                return self.getToken(kernSpineParser.CHAR_H, i)

        def CHAR_I(self, i:int=None):
            if i is None:
                return self.getTokens(kernSpineParser.CHAR_I)
            else:
                return self.getToken(kernSpineParser.CHAR_I, i)

        def CHAR_J(self, i:int=None):
            if i is None:
                return self.getTokens(kernSpineParser.CHAR_J)
            else:
                return self.getToken(kernSpineParser.CHAR_J, i)

        def CHAR_K(self, i:int=None):
            if i is None:
                return self.getTokens(kernSpineParser.CHAR_K)
            else:
                return self.getToken(kernSpineParser.CHAR_K, i)

        def CHAR_L(self, i:int=None):
            if i is None:
                return self.getTokens(kernSpineParser.CHAR_L)
            else:
                return self.getToken(kernSpineParser.CHAR_L, i)

        def CHAR_M(self, i:int=None):
            if i is None:
                return self.getTokens(kernSpineParser.CHAR_M)
            else:
                return self.getToken(kernSpineParser.CHAR_M, i)

        def CHAR_N(self, i:int=None):
            if i is None:
                return self.getTokens(kernSpineParser.CHAR_N)
            else:
                return self.getToken(kernSpineParser.CHAR_N, i)

        def CHAR_O(self, i:int=None):
            if i is None:
                return self.getTokens(kernSpineParser.CHAR_O)
            else:
                return self.getToken(kernSpineParser.CHAR_O, i)

        def CHAR_P(self, i:int=None):
            if i is None:
                return self.getTokens(kernSpineParser.CHAR_P)
            else:
                return self.getToken(kernSpineParser.CHAR_P, i)

        def CHAR_Q(self, i:int=None):
            if i is None:
                return self.getTokens(kernSpineParser.CHAR_Q)
            else:
                return self.getToken(kernSpineParser.CHAR_Q, i)

        def CHAR_R(self, i:int=None):
            if i is None:
                return self.getTokens(kernSpineParser.CHAR_R)
            else:
                return self.getToken(kernSpineParser.CHAR_R, i)

        def CHAR_S(self, i:int=None):
            if i is None:
                return self.getTokens(kernSpineParser.CHAR_S)
            else:
                return self.getToken(kernSpineParser.CHAR_S, i)

        def CHAR_T(self, i:int=None):
            if i is None:
                return self.getTokens(kernSpineParser.CHAR_T)
            else:
                return self.getToken(kernSpineParser.CHAR_T, i)

        def CHAR_U(self, i:int=None):
            if i is None:
                return self.getTokens(kernSpineParser.CHAR_U)
            else:
                return self.getToken(kernSpineParser.CHAR_U, i)

        def CHAR_V(self, i:int=None):
            if i is None:
                return self.getTokens(kernSpineParser.CHAR_V)
            else:
                return self.getToken(kernSpineParser.CHAR_V, i)

        def CHAR_W(self, i:int=None):
            if i is None:
                return self.getTokens(kernSpineParser.CHAR_W)
            else:
                return self.getToken(kernSpineParser.CHAR_W, i)

        def CHAR_X(self, i:int=None):
            if i is None:
                return self.getTokens(kernSpineParser.CHAR_X)
            else:
                return self.getToken(kernSpineParser.CHAR_X, i)

        def CHAR_Y(self, i:int=None):
            if i is None:
                return self.getTokens(kernSpineParser.CHAR_Y)
            else:
                return self.getToken(kernSpineParser.CHAR_Y, i)

        def CHAR_Z(self, i:int=None):
            if i is None:
                return self.getTokens(kernSpineParser.CHAR_Z)
            else:
                return self.getToken(kernSpineParser.CHAR_Z, i)

        def CHAR_a(self, i:int=None):
            if i is None:
                return self.getTokens(kernSpineParser.CHAR_a)
            else:
                return self.getToken(kernSpineParser.CHAR_a, i)

        def CHAR_b(self, i:int=None):
            if i is None:
                return self.getTokens(kernSpineParser.CHAR_b)
            else:
                return self.getToken(kernSpineParser.CHAR_b, i)

        def CHAR_c(self, i:int=None):
            if i is None:
                return self.getTokens(kernSpineParser.CHAR_c)
            else:
                return self.getToken(kernSpineParser.CHAR_c, i)

        def CHAR_d(self, i:int=None):
            if i is None:
                return self.getTokens(kernSpineParser.CHAR_d)
            else:
                return self.getToken(kernSpineParser.CHAR_d, i)

        def CHAR_e(self, i:int=None):
            if i is None:
                return self.getTokens(kernSpineParser.CHAR_e)
            else:
                return self.getToken(kernSpineParser.CHAR_e, i)

        def CHAR_f(self, i:int=None):
            if i is None:
                return self.getTokens(kernSpineParser.CHAR_f)
            else:
                return self.getToken(kernSpineParser.CHAR_f, i)

        def CHAR_g(self, i:int=None):
            if i is None:
                return self.getTokens(kernSpineParser.CHAR_g)
            else:
                return self.getToken(kernSpineParser.CHAR_g, i)

        def CHAR_h(self, i:int=None):
            if i is None:
                return self.getTokens(kernSpineParser.CHAR_h)
            else:
                return self.getToken(kernSpineParser.CHAR_h, i)

        def CHAR_i(self, i:int=None):
            if i is None:
                return self.getTokens(kernSpineParser.CHAR_i)
            else:
                return self.getToken(kernSpineParser.CHAR_i, i)

        def CHAR_j(self, i:int=None):
            if i is None:
                return self.getTokens(kernSpineParser.CHAR_j)
            else:
                return self.getToken(kernSpineParser.CHAR_j, i)

        def CHAR_k(self, i:int=None):
            if i is None:
                return self.getTokens(kernSpineParser.CHAR_k)
            else:
                return self.getToken(kernSpineParser.CHAR_k, i)

        def CHAR_l(self, i:int=None):
            if i is None:
                return self.getTokens(kernSpineParser.CHAR_l)
            else:
                return self.getToken(kernSpineParser.CHAR_l, i)

        def CHAR_m(self, i:int=None):
            if i is None:
                return self.getTokens(kernSpineParser.CHAR_m)
            else:
                return self.getToken(kernSpineParser.CHAR_m, i)

        def CHAR_n(self, i:int=None):
            if i is None:
                return self.getTokens(kernSpineParser.CHAR_n)
            else:
                return self.getToken(kernSpineParser.CHAR_n, i)

        def CHAR_o(self, i:int=None):
            if i is None:
                return self.getTokens(kernSpineParser.CHAR_o)
            else:
                return self.getToken(kernSpineParser.CHAR_o, i)

        def CHAR_p(self, i:int=None):
            if i is None:
                return self.getTokens(kernSpineParser.CHAR_p)
            else:
                return self.getToken(kernSpineParser.CHAR_p, i)

        def CHAR_q(self, i:int=None):
            if i is None:
                return self.getTokens(kernSpineParser.CHAR_q)
            else:
                return self.getToken(kernSpineParser.CHAR_q, i)

        def CHAR_r(self, i:int=None):
            if i is None:
                return self.getTokens(kernSpineParser.CHAR_r)
            else:
                return self.getToken(kernSpineParser.CHAR_r, i)

        def CHAR_s(self, i:int=None):
            if i is None:
                return self.getTokens(kernSpineParser.CHAR_s)
            else:
                return self.getToken(kernSpineParser.CHAR_s, i)

        def CHAR_t(self, i:int=None):
            if i is None:
                return self.getTokens(kernSpineParser.CHAR_t)
            else:
                return self.getToken(kernSpineParser.CHAR_t, i)

        def CHAR_u(self, i:int=None):
            if i is None:
                return self.getTokens(kernSpineParser.CHAR_u)
            else:
                return self.getToken(kernSpineParser.CHAR_u, i)

        def CHAR_v(self, i:int=None):
            if i is None:
                return self.getTokens(kernSpineParser.CHAR_v)
            else:
                return self.getToken(kernSpineParser.CHAR_v, i)

        def CHAR_w(self, i:int=None):
            if i is None:
                return self.getTokens(kernSpineParser.CHAR_w)
            else:
                return self.getToken(kernSpineParser.CHAR_w, i)

        def CHAR_x(self, i:int=None):
            if i is None:
                return self.getTokens(kernSpineParser.CHAR_x)
            else:
                return self.getToken(kernSpineParser.CHAR_x, i)

        def CHAR_y(self, i:int=None):
            if i is None:
                return self.getTokens(kernSpineParser.CHAR_y)
            else:
                return self.getToken(kernSpineParser.CHAR_y, i)

        def CHAR_z(self, i:int=None):
            if i is None:
                return self.getTokens(kernSpineParser.CHAR_z)
            else:
                return self.getToken(kernSpineParser.CHAR_z, i)

        def SPACE(self, i:int=None):
            if i is None:
                return self.getTokens(kernSpineParser.SPACE)
            else:
                return self.getToken(kernSpineParser.SPACE, i)

        def number(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(kernSpineParser.NumberContext)
            else:
                return self.getTypedRuleContext(kernSpineParser.NumberContext,i)


        def getRuleIndex(self):
            return kernSpineParser.RULE_sectionName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSectionName" ):
                listener.enterSectionName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSectionName" ):
                listener.exitSectionName(self)




    def sectionName(self):

        localctx = kernSpineParser.SectionNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_sectionName)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 590 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 590
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [45]:
                    self.state = 536
                    self.match(kernSpineParser.CHAR_A)
                    pass
                elif token in [46]:
                    self.state = 537
                    self.match(kernSpineParser.CHAR_B)
                    pass
                elif token in [47]:
                    self.state = 538
                    self.match(kernSpineParser.CHAR_C)
                    pass
                elif token in [48]:
                    self.state = 539
                    self.match(kernSpineParser.CHAR_D)
                    pass
                elif token in [49]:
                    self.state = 540
                    self.match(kernSpineParser.CHAR_E)
                    pass
                elif token in [50]:
                    self.state = 541
                    self.match(kernSpineParser.CHAR_F)
                    pass
                elif token in [51]:
                    self.state = 542
                    self.match(kernSpineParser.CHAR_G)
                    pass
                elif token in [52]:
                    self.state = 543
                    self.match(kernSpineParser.CHAR_H)
                    pass
                elif token in [53]:
                    self.state = 544
                    self.match(kernSpineParser.CHAR_I)
                    pass
                elif token in [54]:
                    self.state = 545
                    self.match(kernSpineParser.CHAR_J)
                    pass
                elif token in [55]:
                    self.state = 546
                    self.match(kernSpineParser.CHAR_K)
                    pass
                elif token in [56]:
                    self.state = 547
                    self.match(kernSpineParser.CHAR_L)
                    pass
                elif token in [57]:
                    self.state = 548
                    self.match(kernSpineParser.CHAR_M)
                    pass
                elif token in [58]:
                    self.state = 549
                    self.match(kernSpineParser.CHAR_N)
                    pass
                elif token in [59]:
                    self.state = 550
                    self.match(kernSpineParser.CHAR_O)
                    pass
                elif token in [60]:
                    self.state = 551
                    self.match(kernSpineParser.CHAR_P)
                    pass
                elif token in [61]:
                    self.state = 552
                    self.match(kernSpineParser.CHAR_Q)
                    pass
                elif token in [62]:
                    self.state = 553
                    self.match(kernSpineParser.CHAR_R)
                    pass
                elif token in [63]:
                    self.state = 554
                    self.match(kernSpineParser.CHAR_S)
                    pass
                elif token in [64]:
                    self.state = 555
                    self.match(kernSpineParser.CHAR_T)
                    pass
                elif token in [65]:
                    self.state = 556
                    self.match(kernSpineParser.CHAR_U)
                    pass
                elif token in [66]:
                    self.state = 557
                    self.match(kernSpineParser.CHAR_V)
                    pass
                elif token in [67]:
                    self.state = 558
                    self.match(kernSpineParser.CHAR_W)
                    pass
                elif token in [68]:
                    self.state = 559
                    self.match(kernSpineParser.CHAR_X)
                    pass
                elif token in [69]:
                    self.state = 560
                    self.match(kernSpineParser.CHAR_Y)
                    pass
                elif token in [70]:
                    self.state = 561
                    self.match(kernSpineParser.CHAR_Z)
                    pass
                elif token in [71]:
                    self.state = 562
                    self.match(kernSpineParser.CHAR_a)
                    pass
                elif token in [72]:
                    self.state = 563
                    self.match(kernSpineParser.CHAR_b)
                    pass
                elif token in [73]:
                    self.state = 564
                    self.match(kernSpineParser.CHAR_c)
                    pass
                elif token in [74]:
                    self.state = 565
                    self.match(kernSpineParser.CHAR_d)
                    pass
                elif token in [75]:
                    self.state = 566
                    self.match(kernSpineParser.CHAR_e)
                    pass
                elif token in [76]:
                    self.state = 567
                    self.match(kernSpineParser.CHAR_f)
                    pass
                elif token in [77]:
                    self.state = 568
                    self.match(kernSpineParser.CHAR_g)
                    pass
                elif token in [78]:
                    self.state = 569
                    self.match(kernSpineParser.CHAR_h)
                    pass
                elif token in [79]:
                    self.state = 570
                    self.match(kernSpineParser.CHAR_i)
                    pass
                elif token in [80]:
                    self.state = 571
                    self.match(kernSpineParser.CHAR_j)
                    pass
                elif token in [81]:
                    self.state = 572
                    self.match(kernSpineParser.CHAR_k)
                    pass
                elif token in [82]:
                    self.state = 573
                    self.match(kernSpineParser.CHAR_l)
                    pass
                elif token in [83]:
                    self.state = 574
                    self.match(kernSpineParser.CHAR_m)
                    pass
                elif token in [84]:
                    self.state = 575
                    self.match(kernSpineParser.CHAR_n)
                    pass
                elif token in [85]:
                    self.state = 576
                    self.match(kernSpineParser.CHAR_o)
                    pass
                elif token in [86]:
                    self.state = 577
                    self.match(kernSpineParser.CHAR_p)
                    pass
                elif token in [87]:
                    self.state = 578
                    self.match(kernSpineParser.CHAR_q)
                    pass
                elif token in [88]:
                    self.state = 579
                    self.match(kernSpineParser.CHAR_r)
                    pass
                elif token in [89]:
                    self.state = 580
                    self.match(kernSpineParser.CHAR_s)
                    pass
                elif token in [90]:
                    self.state = 581
                    self.match(kernSpineParser.CHAR_t)
                    pass
                elif token in [91]:
                    self.state = 582
                    self.match(kernSpineParser.CHAR_u)
                    pass
                elif token in [92]:
                    self.state = 583
                    self.match(kernSpineParser.CHAR_v)
                    pass
                elif token in [93]:
                    self.state = 584
                    self.match(kernSpineParser.CHAR_w)
                    pass
                elif token in [94]:
                    self.state = 585
                    self.match(kernSpineParser.CHAR_x)
                    pass
                elif token in [95]:
                    self.state = 586
                    self.match(kernSpineParser.CHAR_y)
                    pass
                elif token in [96]:
                    self.state = 587
                    self.match(kernSpineParser.CHAR_z)
                    pass
                elif token in [140]:
                    self.state = 588
                    self.match(kernSpineParser.SPACE)
                    pass
                elif token in [98, 99, 100, 101, 102, 103, 104, 105, 106, 107]:
                    self.state = 589
                    self.number()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 592 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (((((_la - 45)) & ~0x3f) == 0 and ((1 << (_la - 45)) & 9218868437227405311) != 0) or _la==140):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TranspositionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TANDEM_TRANSPOSITION(self):
            return self.getToken(kernSpineParser.TANDEM_TRANSPOSITION, 0)

        def CHAR_d(self):
            return self.getToken(kernSpineParser.CHAR_d, 0)

        def number(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(kernSpineParser.NumberContext)
            else:
                return self.getTypedRuleContext(kernSpineParser.NumberContext,i)


        def CHAR_c(self):
            return self.getToken(kernSpineParser.CHAR_c, 0)

        def MINUS(self, i:int=None):
            if i is None:
                return self.getTokens(kernSpineParser.MINUS)
            else:
                return self.getToken(kernSpineParser.MINUS, i)

        def getRuleIndex(self):
            return kernSpineParser.RULE_transposition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTransposition" ):
                listener.enterTransposition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTransposition" ):
                listener.exitTransposition(self)




    def transposition(self):

        localctx = kernSpineParser.TranspositionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_transposition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 594
            self.match(kernSpineParser.TANDEM_TRANSPOSITION)
            self.state = 595
            self.match(kernSpineParser.CHAR_d)
            self.state = 597
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==121:
                self.state = 596
                self.match(kernSpineParser.MINUS)


            self.state = 599
            self.number()
            self.state = 600
            self.match(kernSpineParser.CHAR_c)
            self.state = 602
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==121:
                self.state = 601
                self.match(kernSpineParser.MINUS)


            self.state = 604
            self.number()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InstrumentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INSTRUMENT(self):
            return self.getToken(kernSpineParser.INSTRUMENT, 0)

        def getRuleIndex(self):
            return kernSpineParser.RULE_instrument

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInstrument" ):
                listener.enterInstrument(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInstrument" ):
                listener.exitInstrument(self)




    def instrument(self):

        localctx = kernSpineParser.InstrumentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_instrument)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 606
            self.match(kernSpineParser.INSTRUMENT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InstrumentTitleContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INSTRUMENT_TITLE(self):
            return self.getToken(kernSpineParser.INSTRUMENT_TITLE, 0)

        def getRuleIndex(self):
            return kernSpineParser.RULE_instrumentTitle

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInstrumentTitle" ):
                listener.enterInstrumentTitle(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInstrumentTitle" ):
                listener.exitInstrumentTitle(self)




    def instrumentTitle(self):

        localctx = kernSpineParser.InstrumentTitleContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_instrumentTitle)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 608
            self.match(kernSpineParser.INSTRUMENT_TITLE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NumberContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DIGIT_0(self, i:int=None):
            if i is None:
                return self.getTokens(kernSpineParser.DIGIT_0)
            else:
                return self.getToken(kernSpineParser.DIGIT_0, i)

        def DIGIT_1(self, i:int=None):
            if i is None:
                return self.getTokens(kernSpineParser.DIGIT_1)
            else:
                return self.getToken(kernSpineParser.DIGIT_1, i)

        def DIGIT_2(self, i:int=None):
            if i is None:
                return self.getTokens(kernSpineParser.DIGIT_2)
            else:
                return self.getToken(kernSpineParser.DIGIT_2, i)

        def DIGIT_3(self, i:int=None):
            if i is None:
                return self.getTokens(kernSpineParser.DIGIT_3)
            else:
                return self.getToken(kernSpineParser.DIGIT_3, i)

        def DIGIT_4(self, i:int=None):
            if i is None:
                return self.getTokens(kernSpineParser.DIGIT_4)
            else:
                return self.getToken(kernSpineParser.DIGIT_4, i)

        def DIGIT_5(self, i:int=None):
            if i is None:
                return self.getTokens(kernSpineParser.DIGIT_5)
            else:
                return self.getToken(kernSpineParser.DIGIT_5, i)

        def DIGIT_6(self, i:int=None):
            if i is None:
                return self.getTokens(kernSpineParser.DIGIT_6)
            else:
                return self.getToken(kernSpineParser.DIGIT_6, i)

        def DIGIT_7(self, i:int=None):
            if i is None:
                return self.getTokens(kernSpineParser.DIGIT_7)
            else:
                return self.getToken(kernSpineParser.DIGIT_7, i)

        def DIGIT_8(self, i:int=None):
            if i is None:
                return self.getTokens(kernSpineParser.DIGIT_8)
            else:
                return self.getToken(kernSpineParser.DIGIT_8, i)

        def DIGIT_9(self, i:int=None):
            if i is None:
                return self.getTokens(kernSpineParser.DIGIT_9)
            else:
                return self.getToken(kernSpineParser.DIGIT_9, i)

        def getRuleIndex(self):
            return kernSpineParser.RULE_number

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNumber" ):
                listener.enterNumber(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNumber" ):
                listener.exitNumber(self)




    def number(self):

        localctx = kernSpineParser.NumberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_number)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 611 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 610
                    _la = self._input.LA(1)
                    if not(((((_la - 98)) & ~0x3f) == 0 and ((1 << (_la - 98)) & 1023) != 0)):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()

                else:
                    raise NoViableAltException(self)
                self.state = 613 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,33,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LowerCasePitchContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CHAR_a(self):
            return self.getToken(kernSpineParser.CHAR_a, 0)

        def CHAR_b(self):
            return self.getToken(kernSpineParser.CHAR_b, 0)

        def CHAR_c(self):
            return self.getToken(kernSpineParser.CHAR_c, 0)

        def CHAR_d(self):
            return self.getToken(kernSpineParser.CHAR_d, 0)

        def CHAR_e(self):
            return self.getToken(kernSpineParser.CHAR_e, 0)

        def CHAR_f(self):
            return self.getToken(kernSpineParser.CHAR_f, 0)

        def CHAR_g(self):
            return self.getToken(kernSpineParser.CHAR_g, 0)

        def getRuleIndex(self):
            return kernSpineParser.RULE_lowerCasePitch

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLowerCasePitch" ):
                listener.enterLowerCasePitch(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLowerCasePitch" ):
                listener.exitLowerCasePitch(self)




    def lowerCasePitch(self):

        localctx = kernSpineParser.LowerCasePitchContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_lowerCasePitch)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 615
            _la = self._input.LA(1)
            if not(((((_la - 71)) & ~0x3f) == 0 and ((1 << (_la - 71)) & 127) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UpperCasePitchContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CHAR_A(self):
            return self.getToken(kernSpineParser.CHAR_A, 0)

        def CHAR_B(self):
            return self.getToken(kernSpineParser.CHAR_B, 0)

        def CHAR_C(self):
            return self.getToken(kernSpineParser.CHAR_C, 0)

        def CHAR_D(self):
            return self.getToken(kernSpineParser.CHAR_D, 0)

        def CHAR_E(self):
            return self.getToken(kernSpineParser.CHAR_E, 0)

        def CHAR_F(self):
            return self.getToken(kernSpineParser.CHAR_F, 0)

        def CHAR_G(self):
            return self.getToken(kernSpineParser.CHAR_G, 0)

        def getRuleIndex(self):
            return kernSpineParser.RULE_upperCasePitch

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUpperCasePitch" ):
                listener.enterUpperCasePitch(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUpperCasePitch" ):
                listener.exitUpperCasePitch(self)




    def upperCasePitch(self):

        localctx = kernSpineParser.UpperCasePitchContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_upperCasePitch)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 617
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 4468415255281664) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PitchClassContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def lowerCasePitch(self):
            return self.getTypedRuleContext(kernSpineParser.LowerCasePitchContext,0)


        def accidental(self):
            return self.getTypedRuleContext(kernSpineParser.AccidentalContext,0)


        def getRuleIndex(self):
            return kernSpineParser.RULE_pitchClass

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPitchClass" ):
                listener.enterPitchClass(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPitchClass" ):
                listener.exitPitchClass(self)




    def pitchClass(self):

        localctx = kernSpineParser.PitchClassContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_pitchClass)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 619
            self.lowerCasePitch()
            self.state = 620
            self.accidental()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AccompContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TANDEM_ACCOMP(self):
            return self.getToken(kernSpineParser.TANDEM_ACCOMP, 0)

        def getRuleIndex(self):
            return kernSpineParser.RULE_accomp

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAccomp" ):
                listener.enterAccomp(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAccomp" ):
                listener.exitAccomp(self)




    def accomp(self):

        localctx = kernSpineParser.AccompContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_accomp)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 622
            self.match(kernSpineParser.TANDEM_ACCOMP)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SoloContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TANDEM_SOLO(self):
            return self.getToken(kernSpineParser.TANDEM_SOLO, 0)

        def getRuleIndex(self):
            return kernSpineParser.RULE_solo

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSolo" ):
                listener.enterSolo(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSolo" ):
                listener.exitSolo(self)




    def solo(self):

        localctx = kernSpineParser.SoloContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_solo)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 624
            self.match(kernSpineParser.TANDEM_SOLO)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StropheContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TANDEM_STROPHE(self):
            return self.getToken(kernSpineParser.TANDEM_STROPHE, 0)

        def getRuleIndex(self):
            return kernSpineParser.RULE_strophe

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStrophe" ):
                listener.enterStrophe(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStrophe" ):
                listener.exitStrophe(self)




    def strophe(self):

        localctx = kernSpineParser.StropheContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_strophe)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 626
            self.match(kernSpineParser.TANDEM_STROPHE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TimebaseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TANDEM_TIMEBASE(self):
            return self.getToken(kernSpineParser.TANDEM_TIMEBASE, 0)

        def number(self):
            return self.getTypedRuleContext(kernSpineParser.NumberContext,0)


        def getRuleIndex(self):
            return kernSpineParser.RULE_timebase

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTimebase" ):
                listener.enterTimebase(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTimebase" ):
                listener.exitTimebase(self)




    def timebase(self):

        localctx = kernSpineParser.TimebaseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_timebase)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 628
            self.match(kernSpineParser.TANDEM_TIMEBASE)
            self.state = 629
            self.number()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PartContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TANDEM_PART(self):
            return self.getToken(kernSpineParser.TANDEM_PART, 0)

        def number(self):
            return self.getTypedRuleContext(kernSpineParser.NumberContext,0)


        def getRuleIndex(self):
            return kernSpineParser.RULE_part

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPart" ):
                listener.enterPart(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPart" ):
                listener.exitPart(self)




    def part(self):

        localctx = kernSpineParser.PartContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_part)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 631
            self.match(kernSpineParser.TANDEM_PART)
            self.state = 632
            self.number()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StaffContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TANDEM_STAFF(self):
            return self.getToken(kernSpineParser.TANDEM_STAFF, 0)

        def number(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(kernSpineParser.NumberContext)
            else:
                return self.getTypedRuleContext(kernSpineParser.NumberContext,i)


        def PLUS(self):
            return self.getToken(kernSpineParser.PLUS, 0)

        def SLASH(self):
            return self.getToken(kernSpineParser.SLASH, 0)

        def getRuleIndex(self):
            return kernSpineParser.RULE_staff

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStaff" ):
                listener.enterStaff(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStaff" ):
                listener.exitStaff(self)




    def staff(self):

        localctx = kernSpineParser.StaffContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_staff)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 634
            self.match(kernSpineParser.TANDEM_STAFF)
            self.state = 636
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==120:
                self.state = 635
                self.match(kernSpineParser.PLUS)


            self.state = 638
            self.number()
            self.state = 641
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==130:
                self.state = 639
                self.match(kernSpineParser.SLASH)
                self.state = 640
                self.number()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ClefContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TANDEM_CLEF(self):
            return self.getToken(kernSpineParser.TANDEM_CLEF, 0)

        def clefValue(self):
            return self.getTypedRuleContext(kernSpineParser.ClefValueContext,0)


        def getRuleIndex(self):
            return kernSpineParser.RULE_clef

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClef" ):
                listener.enterClef(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClef" ):
                listener.exitClef(self)




    def clef(self):

        localctx = kernSpineParser.ClefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_clef)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 643
            self.match(kernSpineParser.TANDEM_CLEF)
            self.state = 644
            self.clefValue()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ClefValueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def clefSign(self):
            return self.getTypedRuleContext(kernSpineParser.ClefSignContext,0)


        def clefLine(self):
            return self.getTypedRuleContext(kernSpineParser.ClefLineContext,0)


        def clefOctave(self):
            return self.getTypedRuleContext(kernSpineParser.ClefOctaveContext,0)


        def getRuleIndex(self):
            return kernSpineParser.RULE_clefValue

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClefValue" ):
                listener.enterClefValue(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClefValue" ):
                listener.exitClefValue(self)




    def clefValue(self):

        localctx = kernSpineParser.ClefValueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_clefValue)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 646
            self.clefSign()
            self.state = 648
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 99)) & ~0x3f) == 0 and ((1 << (_la - 99)) & 31) != 0):
                self.state = 647
                self.clefLine()


            self.state = 651
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==92 or _la==126:
                self.state = 650
                self.clefOctave()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ClefSignContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CHAR_C(self):
            return self.getToken(kernSpineParser.CHAR_C, 0)

        def CHAR_F(self):
            return self.getToken(kernSpineParser.CHAR_F, 0)

        def CHAR_G(self):
            return self.getToken(kernSpineParser.CHAR_G, 0)

        def CHAR_P(self):
            return self.getToken(kernSpineParser.CHAR_P, 0)

        def CHAR_T(self):
            return self.getToken(kernSpineParser.CHAR_T, 0)

        def getRuleIndex(self):
            return kernSpineParser.RULE_clefSign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClefSign" ):
                listener.enterClefSign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClefSign" ):
                listener.exitClefSign(self)




    def clefSign(self):

        localctx = kernSpineParser.ClefSignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_clefSign)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 653
            _la = self._input.LA(1)
            if not(((((_la - 47)) & ~0x3f) == 0 and ((1 << (_la - 47)) & 139289) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ClefLineContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DIGIT_1(self):
            return self.getToken(kernSpineParser.DIGIT_1, 0)

        def DIGIT_2(self):
            return self.getToken(kernSpineParser.DIGIT_2, 0)

        def DIGIT_3(self):
            return self.getToken(kernSpineParser.DIGIT_3, 0)

        def DIGIT_4(self):
            return self.getToken(kernSpineParser.DIGIT_4, 0)

        def DIGIT_5(self):
            return self.getToken(kernSpineParser.DIGIT_5, 0)

        def getRuleIndex(self):
            return kernSpineParser.RULE_clefLine

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClefLine" ):
                listener.enterClefLine(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClefLine" ):
                listener.exitClefLine(self)




    def clefLine(self):

        localctx = kernSpineParser.ClefLineContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_clefLine)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 655
            _la = self._input.LA(1)
            if not(((((_la - 99)) & ~0x3f) == 0 and ((1 << (_la - 99)) & 31) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ClefOctaveContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CHAR_v(self, i:int=None):
            if i is None:
                return self.getTokens(kernSpineParser.CHAR_v)
            else:
                return self.getToken(kernSpineParser.CHAR_v, i)

        def DIGIT_2(self):
            return self.getToken(kernSpineParser.DIGIT_2, 0)

        def CIRCUMFLEX(self, i:int=None):
            if i is None:
                return self.getTokens(kernSpineParser.CIRCUMFLEX)
            else:
                return self.getToken(kernSpineParser.CIRCUMFLEX, i)

        def getRuleIndex(self):
            return kernSpineParser.RULE_clefOctave

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClefOctave" ):
                listener.enterClefOctave(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClefOctave" ):
                listener.exitClefOctave(self)




    def clefOctave(self):

        localctx = kernSpineParser.ClefOctaveContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_clefOctave)
        self._la = 0 # Token type
        try:
            self.state = 667
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [92]:
                self.enterOuterAlt(localctx, 1)
                self.state = 657
                self.match(kernSpineParser.CHAR_v)
                self.state = 659
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==92:
                    self.state = 658
                    self.match(kernSpineParser.CHAR_v)


                self.state = 661
                self.match(kernSpineParser.DIGIT_2)
                pass
            elif token in [126]:
                self.enterOuterAlt(localctx, 2)
                self.state = 662
                self.match(kernSpineParser.CIRCUMFLEX)
                self.state = 664
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==126:
                    self.state = 663
                    self.match(kernSpineParser.CIRCUMFLEX)


                self.state = 666
                self.match(kernSpineParser.DIGIT_2)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class KeySignatureContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TANDEM_KEY_SIGNATURE(self):
            return self.getToken(kernSpineParser.TANDEM_KEY_SIGNATURE, 0)

        def LEFT_BRACKET(self):
            return self.getToken(kernSpineParser.LEFT_BRACKET, 0)

        def RIGHT_BRACKET(self):
            return self.getToken(kernSpineParser.RIGHT_BRACKET, 0)

        def keySignaturePitchClass(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(kernSpineParser.KeySignaturePitchClassContext)
            else:
                return self.getTypedRuleContext(kernSpineParser.KeySignaturePitchClassContext,i)


        def keySignatureCancel(self):
            return self.getTypedRuleContext(kernSpineParser.KeySignatureCancelContext,0)


        def getRuleIndex(self):
            return kernSpineParser.RULE_keySignature

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterKeySignature" ):
                listener.enterKeySignature(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitKeySignature" ):
                listener.exitKeySignature(self)




    def keySignature(self):

        localctx = kernSpineParser.KeySignatureContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_keySignature)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 669
            self.match(kernSpineParser.TANDEM_KEY_SIGNATURE)
            self.state = 670
            self.match(kernSpineParser.LEFT_BRACKET)
            self.state = 674
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 71)) & ~0x3f) == 0 and ((1 << (_la - 71)) & 127) != 0):
                self.state = 671
                self.keySignaturePitchClass()
                self.state = 676
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 677
            self.match(kernSpineParser.RIGHT_BRACKET)
            self.state = 679
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==68:
                self.state = 678
                self.keySignatureCancel()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class KeySignaturePitchClassContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def pitchClass(self):
            return self.getTypedRuleContext(kernSpineParser.PitchClassContext,0)


        def getRuleIndex(self):
            return kernSpineParser.RULE_keySignaturePitchClass

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterKeySignaturePitchClass" ):
                listener.enterKeySignaturePitchClass(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitKeySignaturePitchClass" ):
                listener.exitKeySignaturePitchClass(self)




    def keySignaturePitchClass(self):

        localctx = kernSpineParser.KeySignaturePitchClassContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_keySignaturePitchClass)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 681
            self.pitchClass()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class KeySignatureCancelContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CHAR_X(self):
            return self.getToken(kernSpineParser.CHAR_X, 0)

        def getRuleIndex(self):
            return kernSpineParser.RULE_keySignatureCancel

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterKeySignatureCancel" ):
                listener.enterKeySignatureCancel(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitKeySignatureCancel" ):
                listener.exitKeySignatureCancel(self)




    def keySignatureCancel(self):

        localctx = kernSpineParser.KeySignatureCancelContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_keySignatureCancel)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 683
            self.match(kernSpineParser.CHAR_X)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class KeyModeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def minorKey(self):
            return self.getTypedRuleContext(kernSpineParser.MinorKeyContext,0)


        def majorKey(self):
            return self.getTypedRuleContext(kernSpineParser.MajorKeyContext,0)


        def QUESTION_MARK(self):
            return self.getToken(kernSpineParser.QUESTION_MARK, 0)

        def getRuleIndex(self):
            return kernSpineParser.RULE_keyMode

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterKeyMode" ):
                listener.enterKeyMode(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitKeyMode" ):
                listener.exitKeyMode(self)




    def keyMode(self):

        localctx = kernSpineParser.KeyModeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_keyMode)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 688
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [71, 72, 73, 74, 75, 76, 77]:
                self.state = 685
                self.minorKey()
                pass
            elif token in [45, 46, 47, 48, 49, 50, 51]:
                self.state = 686
                self.majorKey()
                pass
            elif token in [139]:
                self.state = 687
                self.match(kernSpineParser.QUESTION_MARK)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class KeyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ASTERISK(self):
            return self.getToken(kernSpineParser.ASTERISK, 0)

        def singleKey(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(kernSpineParser.SingleKeyContext)
            else:
                return self.getTypedRuleContext(kernSpineParser.SingleKeyContext,i)


        def SLASH(self):
            return self.getToken(kernSpineParser.SLASH, 0)

        def getRuleIndex(self):
            return kernSpineParser.RULE_key

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterKey" ):
                listener.enterKey(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitKey" ):
                listener.exitKey(self)




    def key(self):

        localctx = kernSpineParser.KeyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_key)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 690
            self.match(kernSpineParser.ASTERISK)
            self.state = 691
            self.singleKey()
            self.state = 694
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==130:
                self.state = 692
                self.match(kernSpineParser.SLASH)
                self.state = 693
                self.singleKey()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SingleKeyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def keyMode(self):
            return self.getTypedRuleContext(kernSpineParser.KeyModeContext,0)


        def keySignatureCancel(self):
            return self.getTypedRuleContext(kernSpineParser.KeySignatureCancelContext,0)


        def COLON(self):
            return self.getToken(kernSpineParser.COLON, 0)

        def number(self):
            return self.getTypedRuleContext(kernSpineParser.NumberContext,0)


        def modal(self):
            return self.getTypedRuleContext(kernSpineParser.ModalContext,0)


        def getRuleIndex(self):
            return kernSpineParser.RULE_singleKey

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSingleKey" ):
                listener.enterSingleKey(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSingleKey" ):
                listener.exitSingleKey(self)




    def singleKey(self):

        localctx = kernSpineParser.SingleKeyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 124, self.RULE_singleKey)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 696
            self.keyMode()
            self.state = 698
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==68:
                self.state = 697
                self.keySignatureCancel()


            self.state = 707
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [136]:
                self.state = 700
                self.match(kernSpineParser.COLON)
                self.state = 702
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 71)) & ~0x3f) == 0 and ((1 << (_la - 71)) & 39177) != 0):
                    self.state = 701
                    self.modal()


                pass
            elif token in [-1, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 130]:
                self.state = 705
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 98)) & ~0x3f) == 0 and ((1 << (_la - 98)) & 1023) != 0):
                    self.state = 704
                    self.number()


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MinorKeyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def lowerCasePitch(self):
            return self.getTypedRuleContext(kernSpineParser.LowerCasePitchContext,0)


        def accidental(self):
            return self.getTypedRuleContext(kernSpineParser.AccidentalContext,0)


        def getRuleIndex(self):
            return kernSpineParser.RULE_minorKey

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMinorKey" ):
                listener.enterMinorKey(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMinorKey" ):
                listener.exitMinorKey(self)




    def minorKey(self):

        localctx = kernSpineParser.MinorKeyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 126, self.RULE_minorKey)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 709
            self.lowerCasePitch()
            self.state = 711
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 84)) & ~0x3f) == 0 and ((1 << (_la - 84)) & 171798691841) != 0):
                self.state = 710
                self.accidental()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MajorKeyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def upperCasePitch(self):
            return self.getTypedRuleContext(kernSpineParser.UpperCasePitchContext,0)


        def accidental(self):
            return self.getTypedRuleContext(kernSpineParser.AccidentalContext,0)


        def getRuleIndex(self):
            return kernSpineParser.RULE_majorKey

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMajorKey" ):
                listener.enterMajorKey(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMajorKey" ):
                listener.exitMajorKey(self)




    def majorKey(self):

        localctx = kernSpineParser.MajorKeyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 128, self.RULE_majorKey)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 713
            self.upperCasePitch()
            self.state = 715
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 84)) & ~0x3f) == 0 and ((1 << (_la - 84)) & 171798691841) != 0):
                self.state = 714
                self.accidental()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ModalContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def dorian(self):
            return self.getTypedRuleContext(kernSpineParser.DorianContext,0)


        def phrygian(self):
            return self.getTypedRuleContext(kernSpineParser.PhrygianContext,0)


        def lydian(self):
            return self.getTypedRuleContext(kernSpineParser.LydianContext,0)


        def mixolydian(self):
            return self.getTypedRuleContext(kernSpineParser.MixolydianContext,0)


        def aeolian(self):
            return self.getTypedRuleContext(kernSpineParser.AeolianContext,0)


        def ionian(self):
            return self.getTypedRuleContext(kernSpineParser.IonianContext,0)


        def locrian(self):
            return self.getTypedRuleContext(kernSpineParser.LocrianContext,0)


        def getRuleIndex(self):
            return kernSpineParser.RULE_modal

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterModal" ):
                listener.enterModal(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitModal" ):
                listener.exitModal(self)




    def modal(self):

        localctx = kernSpineParser.ModalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 130, self.RULE_modal)
        try:
            self.state = 724
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,51,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 717
                self.dorian()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 718
                self.phrygian()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 719
                self.lydian()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 720
                self.mixolydian()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 721
                self.aeolian()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 722
                self.ionian()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 723
                self.locrian()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LocrianContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CHAR_l(self):
            return self.getToken(kernSpineParser.CHAR_l, 0)

        def CHAR_o(self):
            return self.getToken(kernSpineParser.CHAR_o, 0)

        def CHAR_c(self):
            return self.getToken(kernSpineParser.CHAR_c, 0)

        def getRuleIndex(self):
            return kernSpineParser.RULE_locrian

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLocrian" ):
                listener.enterLocrian(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLocrian" ):
                listener.exitLocrian(self)




    def locrian(self):

        localctx = kernSpineParser.LocrianContext(self, self._ctx, self.state)
        self.enterRule(localctx, 132, self.RULE_locrian)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 726
            self.match(kernSpineParser.CHAR_l)
            self.state = 727
            self.match(kernSpineParser.CHAR_o)
            self.state = 728
            self.match(kernSpineParser.CHAR_c)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IonianContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CHAR_i(self):
            return self.getToken(kernSpineParser.CHAR_i, 0)

        def CHAR_o(self):
            return self.getToken(kernSpineParser.CHAR_o, 0)

        def CHAR_n(self):
            return self.getToken(kernSpineParser.CHAR_n, 0)

        def getRuleIndex(self):
            return kernSpineParser.RULE_ionian

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIonian" ):
                listener.enterIonian(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIonian" ):
                listener.exitIonian(self)




    def ionian(self):

        localctx = kernSpineParser.IonianContext(self, self._ctx, self.state)
        self.enterRule(localctx, 134, self.RULE_ionian)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 730
            self.match(kernSpineParser.CHAR_i)
            self.state = 731
            self.match(kernSpineParser.CHAR_o)
            self.state = 732
            self.match(kernSpineParser.CHAR_n)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AeolianContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CHAR_a(self):
            return self.getToken(kernSpineParser.CHAR_a, 0)

        def CHAR_e(self):
            return self.getToken(kernSpineParser.CHAR_e, 0)

        def CHAR_o(self):
            return self.getToken(kernSpineParser.CHAR_o, 0)

        def getRuleIndex(self):
            return kernSpineParser.RULE_aeolian

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAeolian" ):
                listener.enterAeolian(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAeolian" ):
                listener.exitAeolian(self)




    def aeolian(self):

        localctx = kernSpineParser.AeolianContext(self, self._ctx, self.state)
        self.enterRule(localctx, 136, self.RULE_aeolian)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 734
            self.match(kernSpineParser.CHAR_a)
            self.state = 735
            self.match(kernSpineParser.CHAR_e)
            self.state = 736
            self.match(kernSpineParser.CHAR_o)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MixolydianContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CHAR_m(self):
            return self.getToken(kernSpineParser.CHAR_m, 0)

        def CHAR_i(self):
            return self.getToken(kernSpineParser.CHAR_i, 0)

        def CHAR_x(self):
            return self.getToken(kernSpineParser.CHAR_x, 0)

        def getRuleIndex(self):
            return kernSpineParser.RULE_mixolydian

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMixolydian" ):
                listener.enterMixolydian(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMixolydian" ):
                listener.exitMixolydian(self)




    def mixolydian(self):

        localctx = kernSpineParser.MixolydianContext(self, self._ctx, self.state)
        self.enterRule(localctx, 138, self.RULE_mixolydian)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 738
            self.match(kernSpineParser.CHAR_m)
            self.state = 739
            self.match(kernSpineParser.CHAR_i)
            self.state = 740
            self.match(kernSpineParser.CHAR_x)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LydianContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CHAR_l(self):
            return self.getToken(kernSpineParser.CHAR_l, 0)

        def CHAR_y(self):
            return self.getToken(kernSpineParser.CHAR_y, 0)

        def CHAR_d(self):
            return self.getToken(kernSpineParser.CHAR_d, 0)

        def getRuleIndex(self):
            return kernSpineParser.RULE_lydian

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLydian" ):
                listener.enterLydian(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLydian" ):
                listener.exitLydian(self)




    def lydian(self):

        localctx = kernSpineParser.LydianContext(self, self._ctx, self.state)
        self.enterRule(localctx, 140, self.RULE_lydian)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 742
            self.match(kernSpineParser.CHAR_l)
            self.state = 743
            self.match(kernSpineParser.CHAR_y)
            self.state = 744
            self.match(kernSpineParser.CHAR_d)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PhrygianContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CHAR_p(self):
            return self.getToken(kernSpineParser.CHAR_p, 0)

        def CHAR_h(self):
            return self.getToken(kernSpineParser.CHAR_h, 0)

        def CHAR_r(self):
            return self.getToken(kernSpineParser.CHAR_r, 0)

        def getRuleIndex(self):
            return kernSpineParser.RULE_phrygian

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPhrygian" ):
                listener.enterPhrygian(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPhrygian" ):
                listener.exitPhrygian(self)




    def phrygian(self):

        localctx = kernSpineParser.PhrygianContext(self, self._ctx, self.state)
        self.enterRule(localctx, 142, self.RULE_phrygian)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 746
            self.match(kernSpineParser.CHAR_p)
            self.state = 747
            self.match(kernSpineParser.CHAR_h)
            self.state = 748
            self.match(kernSpineParser.CHAR_r)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DorianContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CHAR_d(self):
            return self.getToken(kernSpineParser.CHAR_d, 0)

        def CHAR_o(self):
            return self.getToken(kernSpineParser.CHAR_o, 0)

        def CHAR_r(self):
            return self.getToken(kernSpineParser.CHAR_r, 0)

        def getRuleIndex(self):
            return kernSpineParser.RULE_dorian

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDorian" ):
                listener.enterDorian(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDorian" ):
                listener.exitDorian(self)




    def dorian(self):

        localctx = kernSpineParser.DorianContext(self, self._ctx, self.state)
        self.enterRule(localctx, 144, self.RULE_dorian)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 750
            self.match(kernSpineParser.CHAR_d)
            self.state = 751
            self.match(kernSpineParser.CHAR_o)
            self.state = 752
            self.match(kernSpineParser.CHAR_r)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TimeSignatureContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TANDEM_TIMESIGNATURE(self):
            return self.getToken(kernSpineParser.TANDEM_TIMESIGNATURE, 0)

        def standardTimeSignature(self):
            return self.getTypedRuleContext(kernSpineParser.StandardTimeSignatureContext,0)


        def additiveTimeSignature(self):
            return self.getTypedRuleContext(kernSpineParser.AdditiveTimeSignatureContext,0)


        def mixedTimeSignature(self):
            return self.getTypedRuleContext(kernSpineParser.MixedTimeSignatureContext,0)


        def alternatingTimeSignature(self):
            return self.getTypedRuleContext(kernSpineParser.AlternatingTimeSignatureContext,0)


        def interchangingTimeSignature(self):
            return self.getTypedRuleContext(kernSpineParser.InterchangingTimeSignatureContext,0)


        def PERCENT(self):
            return self.getToken(kernSpineParser.PERCENT, 0)

        def DIGIT_2(self):
            return self.getToken(kernSpineParser.DIGIT_2, 0)

        def getRuleIndex(self):
            return kernSpineParser.RULE_timeSignature

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTimeSignature" ):
                listener.enterTimeSignature(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTimeSignature" ):
                listener.exitTimeSignature(self)




    def timeSignature(self):

        localctx = kernSpineParser.TimeSignatureContext(self, self._ctx, self.state)
        self.enterRule(localctx, 146, self.RULE_timeSignature)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 754
            self.match(kernSpineParser.TANDEM_TIMESIGNATURE)
            self.state = 760
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,52,self._ctx)
            if la_ == 1:
                self.state = 755
                self.standardTimeSignature()
                pass

            elif la_ == 2:
                self.state = 756
                self.additiveTimeSignature()
                pass

            elif la_ == 3:
                self.state = 757
                self.mixedTimeSignature()
                pass

            elif la_ == 4:
                self.state = 758
                self.alternatingTimeSignature()
                pass

            elif la_ == 5:
                self.state = 759
                self.interchangingTimeSignature()
                pass


            self.state = 764
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==42:
                self.state = 762
                self.match(kernSpineParser.PERCENT)
                self.state = 763
                self.match(kernSpineParser.DIGIT_2)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NumeratorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def number(self):
            return self.getTypedRuleContext(kernSpineParser.NumberContext,0)


        def getRuleIndex(self):
            return kernSpineParser.RULE_numerator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNumerator" ):
                listener.enterNumerator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNumerator" ):
                listener.exitNumerator(self)




    def numerator(self):

        localctx = kernSpineParser.NumeratorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 148, self.RULE_numerator)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 766
            self.number()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DenominatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def number(self):
            return self.getTypedRuleContext(kernSpineParser.NumberContext,0)


        def getRuleIndex(self):
            return kernSpineParser.RULE_denominator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDenominator" ):
                listener.enterDenominator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDenominator" ):
                listener.exitDenominator(self)




    def denominator(self):

        localctx = kernSpineParser.DenominatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 150, self.RULE_denominator)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 768
            self.number()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StandardTimeSignatureContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def numerator(self):
            return self.getTypedRuleContext(kernSpineParser.NumeratorContext,0)


        def SLASH(self):
            return self.getToken(kernSpineParser.SLASH, 0)

        def denominator(self):
            return self.getTypedRuleContext(kernSpineParser.DenominatorContext,0)


        def getRuleIndex(self):
            return kernSpineParser.RULE_standardTimeSignature

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStandardTimeSignature" ):
                listener.enterStandardTimeSignature(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStandardTimeSignature" ):
                listener.exitStandardTimeSignature(self)




    def standardTimeSignature(self):

        localctx = kernSpineParser.StandardTimeSignatureContext(self, self._ctx, self.state)
        self.enterRule(localctx, 152, self.RULE_standardTimeSignature)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 770
            self.numerator()
            self.state = 771
            self.match(kernSpineParser.SLASH)
            self.state = 772
            self.denominator()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AdditiveTimeSignatureContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def numerator(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(kernSpineParser.NumeratorContext)
            else:
                return self.getTypedRuleContext(kernSpineParser.NumeratorContext,i)


        def SLASH(self):
            return self.getToken(kernSpineParser.SLASH, 0)

        def denominator(self):
            return self.getTypedRuleContext(kernSpineParser.DenominatorContext,0)


        def PLUS(self, i:int=None):
            if i is None:
                return self.getTokens(kernSpineParser.PLUS)
            else:
                return self.getToken(kernSpineParser.PLUS, i)

        def getRuleIndex(self):
            return kernSpineParser.RULE_additiveTimeSignature

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAdditiveTimeSignature" ):
                listener.enterAdditiveTimeSignature(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAdditiveTimeSignature" ):
                listener.exitAdditiveTimeSignature(self)




    def additiveTimeSignature(self):

        localctx = kernSpineParser.AdditiveTimeSignatureContext(self, self._ctx, self.state)
        self.enterRule(localctx, 154, self.RULE_additiveTimeSignature)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 774
            self.numerator()
            self.state = 777 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 775
                self.match(kernSpineParser.PLUS)
                self.state = 776
                self.numerator()
                self.state = 779 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==120):
                    break

            self.state = 781
            self.match(kernSpineParser.SLASH)
            self.state = 782
            self.denominator()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MixedTimeSignatureContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def standardTimeSignature(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(kernSpineParser.StandardTimeSignatureContext)
            else:
                return self.getTypedRuleContext(kernSpineParser.StandardTimeSignatureContext,i)


        def PLUS(self, i:int=None):
            if i is None:
                return self.getTokens(kernSpineParser.PLUS)
            else:
                return self.getToken(kernSpineParser.PLUS, i)

        def getRuleIndex(self):
            return kernSpineParser.RULE_mixedTimeSignature

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMixedTimeSignature" ):
                listener.enterMixedTimeSignature(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMixedTimeSignature" ):
                listener.exitMixedTimeSignature(self)




    def mixedTimeSignature(self):

        localctx = kernSpineParser.MixedTimeSignatureContext(self, self._ctx, self.state)
        self.enterRule(localctx, 156, self.RULE_mixedTimeSignature)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 784
            self.standardTimeSignature()
            self.state = 787 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 785
                self.match(kernSpineParser.PLUS)
                self.state = 786
                self.standardTimeSignature()
                self.state = 789 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==120):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlternatingTimeSignatureContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def alternatingTimeSignatureItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(kernSpineParser.AlternatingTimeSignatureItemContext)
            else:
                return self.getTypedRuleContext(kernSpineParser.AlternatingTimeSignatureItemContext,i)


        def COLON(self, i:int=None):
            if i is None:
                return self.getTokens(kernSpineParser.COLON)
            else:
                return self.getToken(kernSpineParser.COLON, i)

        def getRuleIndex(self):
            return kernSpineParser.RULE_alternatingTimeSignature

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlternatingTimeSignature" ):
                listener.enterAlternatingTimeSignature(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlternatingTimeSignature" ):
                listener.exitAlternatingTimeSignature(self)




    def alternatingTimeSignature(self):

        localctx = kernSpineParser.AlternatingTimeSignatureContext(self, self._ctx, self.state)
        self.enterRule(localctx, 158, self.RULE_alternatingTimeSignature)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 791
            self.alternatingTimeSignatureItem()
            self.state = 794 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 792
                self.match(kernSpineParser.COLON)
                self.state = 793
                self.alternatingTimeSignatureItem()
                self.state = 796 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==136):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlternatingTimeSignatureItemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def standardTimeSignature(self):
            return self.getTypedRuleContext(kernSpineParser.StandardTimeSignatureContext,0)


        def SEMICOLON(self):
            return self.getToken(kernSpineParser.SEMICOLON, 0)

        def number(self):
            return self.getTypedRuleContext(kernSpineParser.NumberContext,0)


        def getRuleIndex(self):
            return kernSpineParser.RULE_alternatingTimeSignatureItem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlternatingTimeSignatureItem" ):
                listener.enterAlternatingTimeSignatureItem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlternatingTimeSignatureItem" ):
                listener.exitAlternatingTimeSignatureItem(self)




    def alternatingTimeSignatureItem(self):

        localctx = kernSpineParser.AlternatingTimeSignatureItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 160, self.RULE_alternatingTimeSignatureItem)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 798
            self.standardTimeSignature()
            self.state = 801
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==137:
                self.state = 799
                self.match(kernSpineParser.SEMICOLON)
                self.state = 800
                self.number()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InterchangingTimeSignatureContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def standardTimeSignature(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(kernSpineParser.StandardTimeSignatureContext)
            else:
                return self.getTypedRuleContext(kernSpineParser.StandardTimeSignatureContext,i)


        def PIPE(self):
            return self.getToken(kernSpineParser.PIPE, 0)

        def getRuleIndex(self):
            return kernSpineParser.RULE_interchangingTimeSignature

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInterchangingTimeSignature" ):
                listener.enterInterchangingTimeSignature(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInterchangingTimeSignature" ):
                listener.exitInterchangingTimeSignature(self)




    def interchangingTimeSignature(self):

        localctx = kernSpineParser.InterchangingTimeSignatureContext(self, self._ctx, self.state)
        self.enterRule(localctx, 162, self.RULE_interchangingTimeSignature)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 803
            self.standardTimeSignature()
            self.state = 804
            self.match(kernSpineParser.PIPE)
            self.state = 805
            self.standardTimeSignature()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MeterSymbolContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LEFT_PARENTHESIS(self):
            return self.getToken(kernSpineParser.LEFT_PARENTHESIS, 0)

        def RIGHT_PARENTHESIS(self):
            return self.getToken(kernSpineParser.RIGHT_PARENTHESIS, 0)

        def TANDEM_TIMESIGNATURE(self):
            return self.getToken(kernSpineParser.TANDEM_TIMESIGNATURE, 0)

        def TANDEM_MET(self):
            return self.getToken(kernSpineParser.TANDEM_MET, 0)

        def modernMeterSymbolSign(self):
            return self.getTypedRuleContext(kernSpineParser.ModernMeterSymbolSignContext,0)


        def mensuration(self):
            return self.getTypedRuleContext(kernSpineParser.MensurationContext,0)


        def getRuleIndex(self):
            return kernSpineParser.RULE_meterSymbol

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMeterSymbol" ):
                listener.enterMeterSymbol(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMeterSymbol" ):
                listener.exitMeterSymbol(self)




    def meterSymbol(self):

        localctx = kernSpineParser.MeterSymbolContext(self, self._ctx, self.state)
        self.enterRule(localctx, 164, self.RULE_meterSymbol)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 807
            _la = self._input.LA(1)
            if not(_la==12 or _la==33):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 808
            self.match(kernSpineParser.LEFT_PARENTHESIS)
            self.state = 811
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [73]:
                self.state = 809
                self.modernMeterSymbolSign()
                pass
            elif token in [47, 59, 88, 100, 101, 123, 124, 130]:
                self.state = 810
                self.mensuration()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 813
            self.match(kernSpineParser.RIGHT_PARENTHESIS)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ModernMeterSymbolSignContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CHAR_c(self):
            return self.getToken(kernSpineParser.CHAR_c, 0)

        def PIPE(self):
            return self.getToken(kernSpineParser.PIPE, 0)

        def getRuleIndex(self):
            return kernSpineParser.RULE_modernMeterSymbolSign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterModernMeterSymbolSign" ):
                listener.enterModernMeterSymbolSign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitModernMeterSymbolSign" ):
                listener.exitModernMeterSymbolSign(self)




    def modernMeterSymbolSign(self):

        localctx = kernSpineParser.ModernMeterSymbolSignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 166, self.RULE_modernMeterSymbolSign)
        try:
            self.state = 818
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,59,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 815
                self.match(kernSpineParser.CHAR_c)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 816
                self.match(kernSpineParser.CHAR_c)
                self.state = 817
                self.match(kernSpineParser.PIPE)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MensurationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CHAR_C(self, i:int=None):
            if i is None:
                return self.getTokens(kernSpineParser.CHAR_C)
            else:
                return self.getToken(kernSpineParser.CHAR_C, i)

        def CHAR_O(self, i:int=None):
            if i is None:
                return self.getTokens(kernSpineParser.CHAR_O)
            else:
                return self.getToken(kernSpineParser.CHAR_O, i)

        def DOT(self, i:int=None):
            if i is None:
                return self.getTokens(kernSpineParser.DOT)
            else:
                return self.getToken(kernSpineParser.DOT, i)

        def PIPE(self, i:int=None):
            if i is None:
                return self.getTokens(kernSpineParser.PIPE)
            else:
                return self.getToken(kernSpineParser.PIPE, i)

        def SLASH(self, i:int=None):
            if i is None:
                return self.getTokens(kernSpineParser.SLASH)
            else:
                return self.getToken(kernSpineParser.SLASH, i)

        def DIGIT_2(self, i:int=None):
            if i is None:
                return self.getTokens(kernSpineParser.DIGIT_2)
            else:
                return self.getToken(kernSpineParser.DIGIT_2, i)

        def DIGIT_3(self, i:int=None):
            if i is None:
                return self.getTokens(kernSpineParser.DIGIT_3)
            else:
                return self.getToken(kernSpineParser.DIGIT_3, i)

        def CHAR_r(self, i:int=None):
            if i is None:
                return self.getTokens(kernSpineParser.CHAR_r)
            else:
                return self.getToken(kernSpineParser.CHAR_r, i)

        def getRuleIndex(self):
            return kernSpineParser.RULE_mensuration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMensuration" ):
                listener.enterMensuration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMensuration" ):
                listener.exitMensuration(self)




    def mensuration(self):

        localctx = kernSpineParser.MensurationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 168, self.RULE_mensuration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 821 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 820
                _la = self._input.LA(1)
                if not(_la==47 or _la==59 or ((((_la - 88)) & ~0x3f) == 0 and ((1 << (_la - 88)) & 4501125738497) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 823 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==47 or _la==59 or ((((_la - 88)) & ~0x3f) == 0 and ((1 << (_la - 88)) & 4501125738497) != 0)):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MetronomeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def METRONOME(self):
            return self.getToken(kernSpineParser.METRONOME, 0)

        def number(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(kernSpineParser.NumberContext)
            else:
                return self.getTypedRuleContext(kernSpineParser.NumberContext,i)


        def DOT(self):
            return self.getToken(kernSpineParser.DOT, 0)

        def MINUS(self):
            return self.getToken(kernSpineParser.MINUS, 0)

        def getRuleIndex(self):
            return kernSpineParser.RULE_metronome

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMetronome" ):
                listener.enterMetronome(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMetronome" ):
                listener.exitMetronome(self)




    def metronome(self):

        localctx = kernSpineParser.MetronomeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 170, self.RULE_metronome)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 825
            self.match(kernSpineParser.METRONOME)
            self.state = 826
            self.number()
            self.state = 829
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==121 or _la==123:
                self.state = 827
                _la = self._input.LA(1)
                if not(_la==121 or _la==123):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 828
                self.number()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NullInterpretationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ASTERISK(self):
            return self.getToken(kernSpineParser.ASTERISK, 0)

        def getRuleIndex(self):
            return kernSpineParser.RULE_nullInterpretation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNullInterpretation" ):
                listener.enterNullInterpretation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNullInterpretation" ):
                listener.exitNullInterpretation(self)




    def nullInterpretation(self):

        localctx = kernSpineParser.NullInterpretationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 172, self.RULE_nullInterpretation)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 831
            self.match(kernSpineParser.ASTERISK)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BarlineContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EQUAL(self, i:int=None):
            if i is None:
                return self.getTokens(kernSpineParser.EQUAL)
            else:
                return self.getToken(kernSpineParser.EQUAL, i)

        def number(self):
            return self.getTypedRuleContext(kernSpineParser.NumberContext,0)


        def MINUS(self):
            return self.getToken(kernSpineParser.MINUS, 0)

        def barLineType(self):
            return self.getTypedRuleContext(kernSpineParser.BarLineTypeContext,0)


        def fermata(self):
            return self.getTypedRuleContext(kernSpineParser.FermataContext,0)


        def CHAR_j(self):
            return self.getToken(kernSpineParser.CHAR_j, 0)

        def DOT(self):
            return self.getToken(kernSpineParser.DOT, 0)

        def footnote(self):
            return self.getTypedRuleContext(kernSpineParser.FootnoteContext,0)


        def CHAR_a(self):
            return self.getToken(kernSpineParser.CHAR_a, 0)

        def CHAR_b(self):
            return self.getToken(kernSpineParser.CHAR_b, 0)

        def getRuleIndex(self):
            return kernSpineParser.RULE_barline

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBarline" ):
                listener.enterBarline(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBarline" ):
                listener.exitBarline(self)




    def barline(self):

        localctx = kernSpineParser.BarlineContext(self, self._ctx, self.state)
        self.enterRule(localctx, 174, self.RULE_barline)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 833
            self.match(kernSpineParser.EQUAL)
            self.state = 835
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,62,self._ctx)
            if la_ == 1:
                self.state = 834
                self.match(kernSpineParser.EQUAL)


            self.state = 838
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 98)) & ~0x3f) == 0 and ((1 << (_la - 98)) & 1023) != 0):
                self.state = 837
                self.number()


            self.state = 841
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==71:
                self.state = 840
                self.match(kernSpineParser.CHAR_a)


            self.state = 844
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==72:
                self.state = 843
                self.match(kernSpineParser.CHAR_b)


            self.state = 847
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==121:
                self.state = 846
                self.match(kernSpineParser.MINUS)


            self.state = 850
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==1 or ((((_la - 122)) & ~0x3f) == 0 and ((1 << (_la - 122)) & 16389) != 0):
                self.state = 849
                self.barLineType()


            self.state = 853
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==137:
                self.state = 852
                self.fermata()


            self.state = 856
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==80:
                self.state = 855
                self.match(kernSpineParser.CHAR_j)


            self.state = 859
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==123:
                self.state = 858
                self.match(kernSpineParser.DOT)


            self.state = 862
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==139:
                self.state = 861
                self.footnote()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BarLineTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PIPE(self, i:int=None):
            if i is None:
                return self.getTokens(kernSpineParser.PIPE)
            else:
                return self.getToken(kernSpineParser.PIPE, i)

        def EXCLAMATION(self, i:int=None):
            if i is None:
                return self.getTokens(kernSpineParser.EXCLAMATION)
            else:
                return self.getToken(kernSpineParser.EXCLAMATION, i)

        def COLON(self, i:int=None):
            if i is None:
                return self.getTokens(kernSpineParser.COLON)
            else:
                return self.getToken(kernSpineParser.COLON, i)

        def EQUAL(self):
            return self.getToken(kernSpineParser.EQUAL, 0)

        def getRuleIndex(self):
            return kernSpineParser.RULE_barLineType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBarLineType" ):
                listener.enterBarLineType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBarLineType" ):
                listener.exitBarLineType(self)




    def barLineType(self):

        localctx = kernSpineParser.BarLineTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 176, self.RULE_barLineType)
        self._la = 0 # Token type
        try:
            self.state = 894
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,75,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 864
                self.match(kernSpineParser.PIPE)
                self.state = 865
                self.match(kernSpineParser.PIPE)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 866
                self.match(kernSpineParser.PIPE)
                self.state = 867
                self.match(kernSpineParser.EXCLAMATION)
                self.state = 869
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==136:
                    self.state = 868
                    self.match(kernSpineParser.COLON)


                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 871
                self.match(kernSpineParser.PIPE)
                self.state = 872
                self.match(kernSpineParser.COLON)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 873
                self.match(kernSpineParser.EXCLAMATION)
                self.state = 874
                self.match(kernSpineParser.PIPE)
                self.state = 875
                self.match(kernSpineParser.COLON)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 877
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==122:
                    self.state = 876
                    self.match(kernSpineParser.EQUAL)


                self.state = 879
                self.match(kernSpineParser.COLON)
                self.state = 880
                self.match(kernSpineParser.PIPE)
                self.state = 881
                self.match(kernSpineParser.EXCLAMATION)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 882
                self.match(kernSpineParser.COLON)
                self.state = 883
                self.match(kernSpineParser.PIPE)
                self.state = 885
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1:
                    self.state = 884
                    self.match(kernSpineParser.EXCLAMATION)


                self.state = 887
                self.match(kernSpineParser.PIPE)
                self.state = 888
                self.match(kernSpineParser.COLON)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 889
                self.match(kernSpineParser.COLON)
                self.state = 890
                self.match(kernSpineParser.EXCLAMATION)
                self.state = 891
                self.match(kernSpineParser.EXCLAMATION)
                self.state = 892
                self.match(kernSpineParser.COLON)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 893
                self.match(kernSpineParser.EQUAL)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RestPositionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def diatonicPitchAndOctave(self):
            return self.getTypedRuleContext(kernSpineParser.DiatonicPitchAndOctaveContext,0)


        def getRuleIndex(self):
            return kernSpineParser.RULE_restPosition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRestPosition" ):
                listener.enterRestPosition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRestPosition" ):
                listener.exitRestPosition(self)




    def restPosition(self):

        localctx = kernSpineParser.RestPositionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 178, self.RULE_restPosition)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 896
            self.diatonicPitchAndOctave()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DurationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def modernDuration(self):
            return self.getTypedRuleContext(kernSpineParser.ModernDurationContext,0)


        def augmentationDot(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(kernSpineParser.AugmentationDotContext)
            else:
                return self.getTypedRuleContext(kernSpineParser.AugmentationDotContext,i)


        def graceNote(self):
            return self.getTypedRuleContext(kernSpineParser.GraceNoteContext,0)


        def appoggiatura(self):
            return self.getTypedRuleContext(kernSpineParser.AppoggiaturaContext,0)


        def getRuleIndex(self):
            return kernSpineParser.RULE_duration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDuration" ):
                listener.enterDuration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDuration" ):
                listener.exitDuration(self)




    def duration(self):

        localctx = kernSpineParser.DurationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 180, self.RULE_duration)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 898
            self.modernDuration()
            self.state = 902
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,76,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 899
                    self.augmentationDot() 
                self.state = 904
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,76,self._ctx)

            self.state = 907
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,77,self._ctx)
            if la_ == 1:
                self.state = 905
                self.graceNote()

            elif la_ == 2:
                self.state = 906
                self.appoggiatura()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FermataContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SEMICOLON(self):
            return self.getToken(kernSpineParser.SEMICOLON, 0)

        def getRuleIndex(self):
            return kernSpineParser.RULE_fermata

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFermata" ):
                listener.enterFermata(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFermata" ):
                listener.exitFermata(self)




    def fermata(self):

        localctx = kernSpineParser.FermataContext(self, self._ctx, self.state)
        self.enterRule(localctx, 182, self.RULE_fermata)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 909
            self.match(kernSpineParser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ModernDurationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def number(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(kernSpineParser.NumberContext)
            else:
                return self.getTypedRuleContext(kernSpineParser.NumberContext,i)


        def PERCENT(self):
            return self.getToken(kernSpineParser.PERCENT, 0)

        def getRuleIndex(self):
            return kernSpineParser.RULE_modernDuration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterModernDuration" ):
                listener.enterModernDuration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitModernDuration" ):
                listener.exitModernDuration(self)




    def modernDuration(self):

        localctx = kernSpineParser.ModernDurationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 184, self.RULE_modernDuration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 911
            self.number()
            self.state = 914
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==42:
                self.state = 912
                self.match(kernSpineParser.PERCENT)
                self.state = 913
                self.number()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AugmentationDotContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DOT(self):
            return self.getToken(kernSpineParser.DOT, 0)

        def getRuleIndex(self):
            return kernSpineParser.RULE_augmentationDot

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAugmentationDot" ):
                listener.enterAugmentationDot(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAugmentationDot" ):
                listener.exitAugmentationDot(self)




    def augmentationDot(self):

        localctx = kernSpineParser.AugmentationDotContext(self, self._ctx, self.state)
        self.enterRule(localctx, 186, self.RULE_augmentationDot)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 916
            self.match(kernSpineParser.DOT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlterationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def accidental(self):
            return self.getTypedRuleContext(kernSpineParser.AccidentalContext,0)


        def alterationDisplay(self):
            return self.getTypedRuleContext(kernSpineParser.AlterationDisplayContext,0)


        def getRuleIndex(self):
            return kernSpineParser.RULE_alteration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlteration" ):
                listener.enterAlteration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlteration" ):
                listener.exitAlteration(self)




    def alteration(self):

        localctx = kernSpineParser.AlterationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 188, self.RULE_alteration)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 918
            self.accidental()
            self.state = 920
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,79,self._ctx)
            if la_ == 1:
                self.state = 919
                self.alterationDisplay()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StaffChangeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ANGLE_BRACKET_OPEN(self):
            return self.getToken(kernSpineParser.ANGLE_BRACKET_OPEN, 0)

        def ANGLE_BRACKET_CLOSE(self):
            return self.getToken(kernSpineParser.ANGLE_BRACKET_CLOSE, 0)

        def getRuleIndex(self):
            return kernSpineParser.RULE_staffChange

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStaffChange" ):
                listener.enterStaffChange(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStaffChange" ):
                listener.exitStaffChange(self)




    def staffChange(self):

        localctx = kernSpineParser.StaffChangeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 190, self.RULE_staffChange)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 922
            _la = self._input.LA(1)
            if not(_la==128 or _la==129):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ChordSpaceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SPACE(self):
            return self.getToken(kernSpineParser.SPACE, 0)

        def getRuleIndex(self):
            return kernSpineParser.RULE_chordSpace

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterChordSpace" ):
                listener.enterChordSpace(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitChordSpace" ):
                listener.exitChordSpace(self)




    def chordSpace(self):

        localctx = kernSpineParser.ChordSpaceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 192, self.RULE_chordSpace)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 925
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==140:
                self.state = 924
                self.match(kernSpineParser.SPACE)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GraceNoteContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CHAR_q(self, i:int=None):
            if i is None:
                return self.getTokens(kernSpineParser.CHAR_q)
            else:
                return self.getToken(kernSpineParser.CHAR_q, i)

        def getRuleIndex(self):
            return kernSpineParser.RULE_graceNote

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGraceNote" ):
                listener.enterGraceNote(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGraceNote" ):
                listener.exitGraceNote(self)




    def graceNote(self):

        localctx = kernSpineParser.GraceNoteContext(self, self._ctx, self.state)
        self.enterRule(localctx, 194, self.RULE_graceNote)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 927
            self.match(kernSpineParser.CHAR_q)
            self.state = 929
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,81,self._ctx)
            if la_ == 1:
                self.state = 928
                self.match(kernSpineParser.CHAR_q)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AppoggiaturaContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def appoggiaturaMode(self):
            return self.getTypedRuleContext(kernSpineParser.AppoggiaturaModeContext,0)


        def getRuleIndex(self):
            return kernSpineParser.RULE_appoggiatura

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAppoggiatura" ):
                listener.enterAppoggiatura(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAppoggiatura" ):
                listener.exitAppoggiatura(self)




    def appoggiatura(self):

        localctx = kernSpineParser.AppoggiaturaContext(self, self._ctx, self.state)
        self.enterRule(localctx, 196, self.RULE_appoggiatura)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 931
            self.appoggiaturaMode()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AppoggiaturaModeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CHAR_p(self):
            return self.getToken(kernSpineParser.CHAR_p, 0)

        def CHAR_P(self):
            return self.getToken(kernSpineParser.CHAR_P, 0)

        def getRuleIndex(self):
            return kernSpineParser.RULE_appoggiaturaMode

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAppoggiaturaMode" ):
                listener.enterAppoggiaturaMode(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAppoggiaturaMode" ):
                listener.exitAppoggiaturaMode(self)




    def appoggiaturaMode(self):

        localctx = kernSpineParser.AppoggiaturaModeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 198, self.RULE_appoggiaturaMode)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 933
            _la = self._input.LA(1)
            if not(_la==60 or _la==86):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LigatureTieContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ligatureTieStart(self):
            return self.getTypedRuleContext(kernSpineParser.LigatureTieStartContext,0)


        def ligatureTieEnd(self):
            return self.getTypedRuleContext(kernSpineParser.LigatureTieEndContext,0)


        def tieContinue(self):
            return self.getTypedRuleContext(kernSpineParser.TieContinueContext,0)


        def staffChange(self):
            return self.getTypedRuleContext(kernSpineParser.StaffChangeContext,0)


        def getRuleIndex(self):
            return kernSpineParser.RULE_ligatureTie

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLigatureTie" ):
                listener.enterLigatureTie(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLigatureTie" ):
                listener.exitLigatureTie(self)




    def ligatureTie(self):

        localctx = kernSpineParser.LigatureTieContext(self, self._ctx, self.state)
        self.enterRule(localctx, 200, self.RULE_ligatureTie)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 938
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [115, 128]:
                self.state = 935
                self.ligatureTieStart()
                pass
            elif token in [116, 129]:
                self.state = 936
                self.ligatureTieEnd()
                pass
            elif token in [132]:
                self.state = 937
                self.tieContinue()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 941
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,83,self._ctx)
            if la_ == 1:
                self.state = 940
                self.staffChange()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NoteDecorationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def accent(self):
            return self.getTypedRuleContext(kernSpineParser.AccentContext,0)


        def appoggiatura(self):
            return self.getTypedRuleContext(kernSpineParser.AppoggiaturaContext,0)


        def articulation(self):
            return self.getTypedRuleContext(kernSpineParser.ArticulationContext,0)


        def barLineCrossedNoteStart(self):
            return self.getTypedRuleContext(kernSpineParser.BarLineCrossedNoteStartContext,0)


        def beam(self):
            return self.getTypedRuleContext(kernSpineParser.BeamContext,0)


        def editorialIntervention(self):
            return self.getTypedRuleContext(kernSpineParser.EditorialInterventionContext,0)


        def fermata(self):
            return self.getTypedRuleContext(kernSpineParser.FermataContext,0)


        def footnote(self):
            return self.getTypedRuleContext(kernSpineParser.FootnoteContext,0)


        def glissando(self):
            return self.getTypedRuleContext(kernSpineParser.GlissandoContext,0)


        def graceNote(self):
            return self.getTypedRuleContext(kernSpineParser.GraceNoteContext,0)


        def ligatureTie(self):
            return self.getTypedRuleContext(kernSpineParser.LigatureTieContext,0)


        def mordent(self):
            return self.getTypedRuleContext(kernSpineParser.MordentContext,0)


        def augmentationDot(self):
            return self.getTypedRuleContext(kernSpineParser.AugmentationDotContext,0)


        def phrase(self):
            return self.getTypedRuleContext(kernSpineParser.PhraseContext,0)


        def sforzando(self):
            return self.getTypedRuleContext(kernSpineParser.SforzandoContext,0)


        def slurStart(self):
            return self.getTypedRuleContext(kernSpineParser.SlurStartContext,0)


        def slurEnd(self):
            return self.getTypedRuleContext(kernSpineParser.SlurEndContext,0)


        def staffChange(self):
            return self.getTypedRuleContext(kernSpineParser.StaffChangeContext,0)


        def stem(self):
            return self.getTypedRuleContext(kernSpineParser.StemContext,0)


        def turn(self):
            return self.getTypedRuleContext(kernSpineParser.TurnContext,0)


        def trill(self):
            return self.getTypedRuleContext(kernSpineParser.TrillContext,0)


        def userAssignable(self):
            return self.getTypedRuleContext(kernSpineParser.UserAssignableContext,0)


        def CHAR_N(self):
            return self.getToken(kernSpineParser.CHAR_N, 0)

        def CHAR_j(self):
            return self.getToken(kernSpineParser.CHAR_j, 0)

        def CHAR_X(self):
            return self.getToken(kernSpineParser.CHAR_X, 0)

        def CHAR_Z(self):
            return self.getToken(kernSpineParser.CHAR_Z, 0)

        def CHAR_O(self):
            return self.getToken(kernSpineParser.CHAR_O, 0)

        def CHAR_l(self):
            return self.getToken(kernSpineParser.CHAR_l, 0)

        def CHAR_V(self):
            return self.getToken(kernSpineParser.CHAR_V, 0)

        def noteDecorationCharX(self):
            return self.getTypedRuleContext(kernSpineParser.NoteDecorationCharXContext,0)


        def getRuleIndex(self):
            return kernSpineParser.RULE_noteDecoration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNoteDecoration" ):
                listener.enterNoteDecoration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNoteDecoration" ):
                listener.exitNoteDecoration(self)




    def noteDecoration(self):

        localctx = kernSpineParser.NoteDecorationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 202, self.RULE_noteDecoration)
        try:
            self.state = 973
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,84,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 943
                self.accent()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 944
                self.appoggiatura()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 945
                self.articulation()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 946
                self.barLineCrossedNoteStart()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 947
                self.beam()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 948
                self.editorialIntervention()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 949
                self.fermata()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 950
                self.footnote()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 951
                self.glissando()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 952
                self.graceNote()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 953
                self.ligatureTie()
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 954
                self.mordent()
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 955
                self.augmentationDot()
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 956
                self.phrase()
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 957
                self.sforzando()
                pass

            elif la_ == 16:
                self.enterOuterAlt(localctx, 16)
                self.state = 958
                self.slurStart()
                pass

            elif la_ == 17:
                self.enterOuterAlt(localctx, 17)
                self.state = 959
                self.slurEnd()
                pass

            elif la_ == 18:
                self.enterOuterAlt(localctx, 18)
                self.state = 960
                self.staffChange()
                pass

            elif la_ == 19:
                self.enterOuterAlt(localctx, 19)
                self.state = 961
                self.stem()
                pass

            elif la_ == 20:
                self.enterOuterAlt(localctx, 20)
                self.state = 962
                self.turn()
                pass

            elif la_ == 21:
                self.enterOuterAlt(localctx, 21)
                self.state = 963
                self.trill()
                pass

            elif la_ == 22:
                self.enterOuterAlt(localctx, 22)
                self.state = 964
                self.userAssignable()
                pass

            elif la_ == 23:
                self.enterOuterAlt(localctx, 23)
                self.state = 965
                self.match(kernSpineParser.CHAR_N)
                pass

            elif la_ == 24:
                self.enterOuterAlt(localctx, 24)
                self.state = 966
                self.match(kernSpineParser.CHAR_j)
                pass

            elif la_ == 25:
                self.enterOuterAlt(localctx, 25)
                self.state = 967
                self.match(kernSpineParser.CHAR_X)
                pass

            elif la_ == 26:
                self.enterOuterAlt(localctx, 26)
                self.state = 968
                self.match(kernSpineParser.CHAR_Z)
                pass

            elif la_ == 27:
                self.enterOuterAlt(localctx, 27)
                self.state = 969
                self.match(kernSpineParser.CHAR_O)
                pass

            elif la_ == 28:
                self.enterOuterAlt(localctx, 28)
                self.state = 970
                self.match(kernSpineParser.CHAR_l)
                pass

            elif la_ == 29:
                self.enterOuterAlt(localctx, 29)
                self.state = 971
                self.match(kernSpineParser.CHAR_V)
                pass

            elif la_ == 30:
                self.enterOuterAlt(localctx, 30)
                self.state = 972
                self.noteDecorationCharX()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NoteDecorationCharXContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CHAR_x(self, i:int=None):
            if i is None:
                return self.getTokens(kernSpineParser.CHAR_x)
            else:
                return self.getToken(kernSpineParser.CHAR_x, i)

        def getRuleIndex(self):
            return kernSpineParser.RULE_noteDecorationCharX

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNoteDecorationCharX" ):
                listener.enterNoteDecorationCharX(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNoteDecorationCharX" ):
                listener.exitNoteDecorationCharX(self)




    def noteDecorationCharX(self):

        localctx = kernSpineParser.NoteDecorationCharXContext(self, self._ctx, self.state)
        self.enterRule(localctx, 204, self.RULE_noteDecorationCharX)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 975
            self.match(kernSpineParser.CHAR_x)
            self.state = 977
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,85,self._ctx)
            if la_ == 1:
                self.state = 976
                self.match(kernSpineParser.CHAR_x)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PhraseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LEFT_CURLY_BRACES(self):
            return self.getToken(kernSpineParser.LEFT_CURLY_BRACES, 0)

        def RIGHT_CURLY_BRACES(self):
            return self.getToken(kernSpineParser.RIGHT_CURLY_BRACES, 0)

        def getRuleIndex(self):
            return kernSpineParser.RULE_phrase

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPhrase" ):
                listener.enterPhrase(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPhrase" ):
                listener.exitPhrase(self)




    def phrase(self):

        localctx = kernSpineParser.PhraseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 206, self.RULE_phrase)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 979
            _la = self._input.LA(1)
            if not(_la==117 or _la==118):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DiatonicPitchAndOctaveContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def bassNotes(self):
            return self.getTypedRuleContext(kernSpineParser.BassNotesContext,0)


        def trebleNotes(self):
            return self.getTypedRuleContext(kernSpineParser.TrebleNotesContext,0)


        def getRuleIndex(self):
            return kernSpineParser.RULE_diatonicPitchAndOctave

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDiatonicPitchAndOctave" ):
                listener.enterDiatonicPitchAndOctave(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDiatonicPitchAndOctave" ):
                listener.exitDiatonicPitchAndOctave(self)




    def diatonicPitchAndOctave(self):

        localctx = kernSpineParser.DiatonicPitchAndOctaveContext(self, self._ctx, self.state)
        self.enterRule(localctx, 208, self.RULE_diatonicPitchAndOctave)
        try:
            self.state = 983
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [45, 46, 47, 48, 49, 50, 51]:
                self.enterOuterAlt(localctx, 1)
                self.state = 981
                self.bassNotes()
                pass
            elif token in [71, 72, 73, 74, 75, 76, 77]:
                self.enterOuterAlt(localctx, 2)
                self.state = 982
                self.trebleNotes()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TrebleNotesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def lowerCasePitch(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(kernSpineParser.LowerCasePitchContext)
            else:
                return self.getTypedRuleContext(kernSpineParser.LowerCasePitchContext,i)


        def getRuleIndex(self):
            return kernSpineParser.RULE_trebleNotes

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTrebleNotes" ):
                listener.enterTrebleNotes(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTrebleNotes" ):
                listener.exitTrebleNotes(self)




    def trebleNotes(self):

        localctx = kernSpineParser.TrebleNotesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 210, self.RULE_trebleNotes)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 986 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 985
                    self.lowerCasePitch()

                else:
                    raise NoViableAltException(self)
                self.state = 988 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,87,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BassNotesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def upperCasePitch(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(kernSpineParser.UpperCasePitchContext)
            else:
                return self.getTypedRuleContext(kernSpineParser.UpperCasePitchContext,i)


        def getRuleIndex(self):
            return kernSpineParser.RULE_bassNotes

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBassNotes" ):
                listener.enterBassNotes(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBassNotes" ):
                listener.exitBassNotes(self)




    def bassNotes(self):

        localctx = kernSpineParser.BassNotesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 212, self.RULE_bassNotes)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 991 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 990
                    self.upperCasePitch()

                else:
                    raise NoViableAltException(self)
                self.state = 993 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,88,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AccidentalContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OCTOTHORPE(self, i:int=None):
            if i is None:
                return self.getTokens(kernSpineParser.OCTOTHORPE)
            else:
                return self.getToken(kernSpineParser.OCTOTHORPE, i)

        def MINUS(self, i:int=None):
            if i is None:
                return self.getTokens(kernSpineParser.MINUS)
            else:
                return self.getToken(kernSpineParser.MINUS, i)

        def CHAR_n(self):
            return self.getToken(kernSpineParser.CHAR_n, 0)

        def getRuleIndex(self):
            return kernSpineParser.RULE_accidental

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAccidental" ):
                listener.enterAccidental(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAccidental" ):
                listener.exitAccidental(self)




    def accidental(self):

        localctx = kernSpineParser.AccidentalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 214, self.RULE_accidental)
        self._la = 0 # Token type
        try:
            self.state = 1010
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [119]:
                self.enterOuterAlt(localctx, 1)
                self.state = 995
                self.match(kernSpineParser.OCTOTHORPE)
                self.state = 1000
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==119:
                    self.state = 996
                    self.match(kernSpineParser.OCTOTHORPE)
                    self.state = 998
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==119:
                        self.state = 997
                        self.match(kernSpineParser.OCTOTHORPE)




                pass
            elif token in [121]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1002
                self.match(kernSpineParser.MINUS)
                self.state = 1007
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==121:
                    self.state = 1003
                    self.match(kernSpineParser.MINUS)
                    self.state = 1005
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==121:
                        self.state = 1004
                        self.match(kernSpineParser.MINUS)




                pass
            elif token in [84]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1009
                self.match(kernSpineParser.CHAR_n)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlterationDisplayContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CHAR_x(self):
            return self.getToken(kernSpineParser.CHAR_x, 0)

        def CHAR_X(self):
            return self.getToken(kernSpineParser.CHAR_X, 0)

        def CHAR_i(self):
            return self.getToken(kernSpineParser.CHAR_i, 0)

        def CHAR_I(self):
            return self.getToken(kernSpineParser.CHAR_I, 0)

        def CHAR_j(self):
            return self.getToken(kernSpineParser.CHAR_j, 0)

        def CHAR_Z(self):
            return self.getToken(kernSpineParser.CHAR_Z, 0)

        def CHAR_y(self, i:int=None):
            if i is None:
                return self.getTokens(kernSpineParser.CHAR_y)
            else:
                return self.getToken(kernSpineParser.CHAR_y, i)

        def CHAR_Y(self, i:int=None):
            if i is None:
                return self.getTokens(kernSpineParser.CHAR_Y)
            else:
                return self.getToken(kernSpineParser.CHAR_Y, i)

        def getRuleIndex(self):
            return kernSpineParser.RULE_alterationDisplay

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterationDisplay" ):
                listener.enterAlterationDisplay(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterationDisplay" ):
                listener.exitAlterationDisplay(self)




    def alterationDisplay(self):

        localctx = kernSpineParser.AlterationDisplayContext(self, self._ctx, self.state)
        self.enterRule(localctx, 216, self.RULE_alterationDisplay)
        self._la = 0 # Token type
        try:
            self.state = 1026
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [94]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1012
                self.match(kernSpineParser.CHAR_x)
                pass
            elif token in [68]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1013
                self.match(kernSpineParser.CHAR_X)
                pass
            elif token in [79]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1014
                self.match(kernSpineParser.CHAR_i)
                pass
            elif token in [53]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1015
                self.match(kernSpineParser.CHAR_I)
                pass
            elif token in [80]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1016
                self.match(kernSpineParser.CHAR_j)
                pass
            elif token in [70]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1017
                self.match(kernSpineParser.CHAR_Z)
                pass
            elif token in [95]:
                self.enterOuterAlt(localctx, 7)
                self.state = 1018
                self.match(kernSpineParser.CHAR_y)
                self.state = 1020
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,94,self._ctx)
                if la_ == 1:
                    self.state = 1019
                    self.match(kernSpineParser.CHAR_y)


                pass
            elif token in [69]:
                self.enterOuterAlt(localctx, 8)
                self.state = 1022
                self.match(kernSpineParser.CHAR_Y)
                self.state = 1024
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==69:
                    self.state = 1023
                    self.match(kernSpineParser.CHAR_Y)


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TurnContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CHAR_S(self):
            return self.getToken(kernSpineParser.CHAR_S, 0)

        def DOLLAR(self):
            return self.getToken(kernSpineParser.DOLLAR, 0)

        def getRuleIndex(self):
            return kernSpineParser.RULE_turn

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTurn" ):
                listener.enterTurn(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTurn" ):
                listener.exitTurn(self)




    def turn(self):

        localctx = kernSpineParser.TurnContext(self, self._ctx, self.state)
        self.enterRule(localctx, 218, self.RULE_turn)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1028
            _la = self._input.LA(1)
            if not(_la==63 or _la==133):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UserAssignableContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CHAR_i(self):
            return self.getToken(kernSpineParser.CHAR_i, 0)

        def getRuleIndex(self):
            return kernSpineParser.RULE_userAssignable

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUserAssignable" ):
                listener.enterUserAssignable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUserAssignable" ):
                listener.exitUserAssignable(self)




    def userAssignable(self):

        localctx = kernSpineParser.UserAssignableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 220, self.RULE_userAssignable)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1030
            self.match(kernSpineParser.CHAR_i)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GlissandoContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COLON(self):
            return self.getToken(kernSpineParser.COLON, 0)

        def getRuleIndex(self):
            return kernSpineParser.RULE_glissando

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGlissando" ):
                listener.enterGlissando(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGlissando" ):
                listener.exitGlissando(self)




    def glissando(self):

        localctx = kernSpineParser.GlissandoContext(self, self._ctx, self.state)
        self.enterRule(localctx, 222, self.RULE_glissando)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1032
            self.match(kernSpineParser.COLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArticulationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def staccato(self):
            return self.getTypedRuleContext(kernSpineParser.StaccatoContext,0)


        def spiccato(self):
            return self.getTypedRuleContext(kernSpineParser.SpiccatoContext,0)


        def pizzicato(self):
            return self.getTypedRuleContext(kernSpineParser.PizzicatoContext,0)


        def staccatissimo(self):
            return self.getTypedRuleContext(kernSpineParser.StaccatissimoContext,0)


        def tenuto(self):
            return self.getTypedRuleContext(kernSpineParser.TenutoContext,0)


        def accent(self):
            return self.getTypedRuleContext(kernSpineParser.AccentContext,0)


        def getRuleIndex(self):
            return kernSpineParser.RULE_articulation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArticulation" ):
                listener.enterArticulation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArticulation" ):
                listener.exitArticulation(self)




    def articulation(self):

        localctx = kernSpineParser.ArticulationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 224, self.RULE_articulation)
        try:
            self.state = 1040
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [114]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1034
                self.staccato()
                pass
            elif token in [89]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1035
                self.spiccato()
                pass
            elif token in [113]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1036
                self.pizzicato()
                pass
            elif token in [125]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1037
                self.staccatissimo()
                pass
            elif token in [127]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1038
                self.tenuto()
                pass
            elif token in [126]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1039
                self.accent()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AccentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CIRCUMFLEX(self):
            return self.getToken(kernSpineParser.CIRCUMFLEX, 0)

        def getRuleIndex(self):
            return kernSpineParser.RULE_accent

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAccent" ):
                listener.enterAccent(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAccent" ):
                listener.exitAccent(self)




    def accent(self):

        localctx = kernSpineParser.AccentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 226, self.RULE_accent)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1042
            self.match(kernSpineParser.CIRCUMFLEX)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TenutoContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TILDE(self):
            return self.getToken(kernSpineParser.TILDE, 0)

        def getRuleIndex(self):
            return kernSpineParser.RULE_tenuto

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTenuto" ):
                listener.enterTenuto(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTenuto" ):
                listener.exitTenuto(self)




    def tenuto(self):

        localctx = kernSpineParser.TenutoContext(self, self._ctx, self.state)
        self.enterRule(localctx, 228, self.RULE_tenuto)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1044
            self.match(kernSpineParser.TILDE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StaccatissimoContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def GRAVE_ACCENT(self):
            return self.getToken(kernSpineParser.GRAVE_ACCENT, 0)

        def getRuleIndex(self):
            return kernSpineParser.RULE_staccatissimo

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStaccatissimo" ):
                listener.enterStaccatissimo(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStaccatissimo" ):
                listener.exitStaccatissimo(self)




    def staccatissimo(self):

        localctx = kernSpineParser.StaccatissimoContext(self, self._ctx, self.state)
        self.enterRule(localctx, 230, self.RULE_staccatissimo)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1046
            self.match(kernSpineParser.GRAVE_ACCENT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PizzicatoContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def QUOTATION_MARK(self):
            return self.getToken(kernSpineParser.QUOTATION_MARK, 0)

        def getRuleIndex(self):
            return kernSpineParser.RULE_pizzicato

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPizzicato" ):
                listener.enterPizzicato(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPizzicato" ):
                listener.exitPizzicato(self)




    def pizzicato(self):

        localctx = kernSpineParser.PizzicatoContext(self, self._ctx, self.state)
        self.enterRule(localctx, 232, self.RULE_pizzicato)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1048
            self.match(kernSpineParser.QUOTATION_MARK)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SpiccatoContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CHAR_s(self):
            return self.getToken(kernSpineParser.CHAR_s, 0)

        def getRuleIndex(self):
            return kernSpineParser.RULE_spiccato

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSpiccato" ):
                listener.enterSpiccato(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSpiccato" ):
                listener.exitSpiccato(self)




    def spiccato(self):

        localctx = kernSpineParser.SpiccatoContext(self, self._ctx, self.state)
        self.enterRule(localctx, 234, self.RULE_spiccato)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1050
            self.match(kernSpineParser.CHAR_s)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StaccatoContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def APOSTROPHE(self):
            return self.getToken(kernSpineParser.APOSTROPHE, 0)

        def getRuleIndex(self):
            return kernSpineParser.RULE_staccato

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStaccato" ):
                listener.enterStaccato(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStaccato" ):
                listener.exitStaccato(self)




    def staccato(self):

        localctx = kernSpineParser.StaccatoContext(self, self._ctx, self.state)
        self.enterRule(localctx, 236, self.RULE_staccato)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1052
            self.match(kernSpineParser.APOSTROPHE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EditorialInterventionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CHAR_y(self, i:int=None):
            if i is None:
                return self.getTokens(kernSpineParser.CHAR_y)
            else:
                return self.getToken(kernSpineParser.CHAR_y, i)

        def AT(self):
            return self.getToken(kernSpineParser.AT, 0)

        def CHAR_X(self):
            return self.getToken(kernSpineParser.CHAR_X, 0)

        def getRuleIndex(self):
            return kernSpineParser.RULE_editorialIntervention

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEditorialIntervention" ):
                listener.enterEditorialIntervention(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEditorialIntervention" ):
                listener.exitEditorialIntervention(self)




    def editorialIntervention(self):

        localctx = kernSpineParser.EditorialInterventionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 238, self.RULE_editorialIntervention)
        self._la = 0 # Token type
        try:
            self.state = 1065
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [95]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1054
                self.match(kernSpineParser.CHAR_y)
                self.state = 1058
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,98,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1055
                        self.match(kernSpineParser.CHAR_y) 
                    self.state = 1060
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,98,self._ctx)

                self.state = 1062
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==44:
                    self.state = 1061
                    self.match(kernSpineParser.AT)


                pass
            elif token in [68]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1064
                self.match(kernSpineParser.CHAR_X)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SlurStartContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LEFT_PARENTHESIS(self):
            return self.getToken(kernSpineParser.LEFT_PARENTHESIS, 0)

        def AMPERSAND(self, i:int=None):
            if i is None:
                return self.getTokens(kernSpineParser.AMPERSAND)
            else:
                return self.getToken(kernSpineParser.AMPERSAND, i)

        def staffChange(self):
            return self.getTypedRuleContext(kernSpineParser.StaffChangeContext,0)


        def getRuleIndex(self):
            return kernSpineParser.RULE_slurStart

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSlurStart" ):
                listener.enterSlurStart(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSlurStart" ):
                listener.exitSlurStart(self)




    def slurStart(self):

        localctx = kernSpineParser.SlurStartContext(self, self._ctx, self.state)
        self.enterRule(localctx, 240, self.RULE_slurStart)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1070
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==43:
                self.state = 1067
                self.match(kernSpineParser.AMPERSAND)
                self.state = 1072
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1073
            self.match(kernSpineParser.LEFT_PARENTHESIS)
            self.state = 1075
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,102,self._ctx)
            if la_ == 1:
                self.state = 1074
                self.staffChange()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LigatureTieStartContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ANGLE_BRACKET_OPEN(self):
            return self.getToken(kernSpineParser.ANGLE_BRACKET_OPEN, 0)

        def LEFT_BRACKET(self):
            return self.getToken(kernSpineParser.LEFT_BRACKET, 0)

        def CHAR_y(self):
            return self.getToken(kernSpineParser.CHAR_y, 0)

        def getRuleIndex(self):
            return kernSpineParser.RULE_ligatureTieStart

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLigatureTieStart" ):
                listener.enterLigatureTieStart(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLigatureTieStart" ):
                listener.exitLigatureTieStart(self)




    def ligatureTieStart(self):

        localctx = kernSpineParser.LigatureTieStartContext(self, self._ctx, self.state)
        self.enterRule(localctx, 242, self.RULE_ligatureTieStart)
        try:
            self.state = 1082
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [128]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1077
                self.match(kernSpineParser.ANGLE_BRACKET_OPEN)
                pass
            elif token in [115]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1078
                self.match(kernSpineParser.LEFT_BRACKET)
                self.state = 1080
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,103,self._ctx)
                if la_ == 1:
                    self.state = 1079
                    self.match(kernSpineParser.CHAR_y)


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TieContinueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def UNDERSCORE(self):
            return self.getToken(kernSpineParser.UNDERSCORE, 0)

        def getRuleIndex(self):
            return kernSpineParser.RULE_tieContinue

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTieContinue" ):
                listener.enterTieContinue(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTieContinue" ):
                listener.exitTieContinue(self)




    def tieContinue(self):

        localctx = kernSpineParser.TieContinueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 244, self.RULE_tieContinue)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1084
            self.match(kernSpineParser.UNDERSCORE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LigatureTieEndContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ANGLE_BRACKET_CLOSE(self):
            return self.getToken(kernSpineParser.ANGLE_BRACKET_CLOSE, 0)

        def RIGHT_BRACKET(self):
            return self.getToken(kernSpineParser.RIGHT_BRACKET, 0)

        def getRuleIndex(self):
            return kernSpineParser.RULE_ligatureTieEnd

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLigatureTieEnd" ):
                listener.enterLigatureTieEnd(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLigatureTieEnd" ):
                listener.exitLigatureTieEnd(self)




    def ligatureTieEnd(self):

        localctx = kernSpineParser.LigatureTieEndContext(self, self._ctx, self.state)
        self.enterRule(localctx, 246, self.RULE_ligatureTieEnd)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1086
            _la = self._input.LA(1)
            if not(_la==116 or _la==129):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SlurEndContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RIGHT_PARENTHESIS(self):
            return self.getToken(kernSpineParser.RIGHT_PARENTHESIS, 0)

        def AMPERSAND(self, i:int=None):
            if i is None:
                return self.getTokens(kernSpineParser.AMPERSAND)
            else:
                return self.getToken(kernSpineParser.AMPERSAND, i)

        def getRuleIndex(self):
            return kernSpineParser.RULE_slurEnd

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSlurEnd" ):
                listener.enterSlurEnd(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSlurEnd" ):
                listener.exitSlurEnd(self)




    def slurEnd(self):

        localctx = kernSpineParser.SlurEndContext(self, self._ctx, self.state)
        self.enterRule(localctx, 248, self.RULE_slurEnd)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1091
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==43:
                self.state = 1088
                self.match(kernSpineParser.AMPERSAND)
                self.state = 1093
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1094
            self.match(kernSpineParser.RIGHT_PARENTHESIS)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BarLineCrossedNoteStartContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CHAR_T(self):
            return self.getToken(kernSpineParser.CHAR_T, 0)

        def getRuleIndex(self):
            return kernSpineParser.RULE_barLineCrossedNoteStart

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBarLineCrossedNoteStart" ):
                listener.enterBarLineCrossedNoteStart(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBarLineCrossedNoteStart" ):
                listener.exitBarLineCrossedNoteStart(self)




    def barLineCrossedNoteStart(self):

        localctx = kernSpineParser.BarLineCrossedNoteStartContext(self, self._ctx, self.state)
        self.enterRule(localctx, 250, self.RULE_barLineCrossedNoteStart)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1096
            self.match(kernSpineParser.CHAR_T)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BarLineCrossedNoteEndContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CHAR_t(self):
            return self.getToken(kernSpineParser.CHAR_t, 0)

        def getRuleIndex(self):
            return kernSpineParser.RULE_barLineCrossedNoteEnd

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBarLineCrossedNoteEnd" ):
                listener.enterBarLineCrossedNoteEnd(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBarLineCrossedNoteEnd" ):
                listener.exitBarLineCrossedNoteEnd(self)




    def barLineCrossedNoteEnd(self):

        localctx = kernSpineParser.BarLineCrossedNoteEndContext(self, self._ctx, self.state)
        self.enterRule(localctx, 252, self.RULE_barLineCrossedNoteEnd)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1098
            self.match(kernSpineParser.CHAR_t)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SLASH(self):
            return self.getToken(kernSpineParser.SLASH, 0)

        def BACKSLASH(self):
            return self.getToken(kernSpineParser.BACKSLASH, 0)

        def getRuleIndex(self):
            return kernSpineParser.RULE_stem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStem" ):
                listener.enterStem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStem" ):
                listener.exitStem(self)




    def stem(self):

        localctx = kernSpineParser.StemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 254, self.RULE_stem)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1100
            _la = self._input.LA(1)
            if not(_la==130 or _la==131):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BeamContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CHAR_L(self, i:int=None):
            if i is None:
                return self.getTokens(kernSpineParser.CHAR_L)
            else:
                return self.getToken(kernSpineParser.CHAR_L, i)

        def CHAR_J(self, i:int=None):
            if i is None:
                return self.getTokens(kernSpineParser.CHAR_J)
            else:
                return self.getToken(kernSpineParser.CHAR_J, i)

        def CHAR_K(self, i:int=None):
            if i is None:
                return self.getTokens(kernSpineParser.CHAR_K)
            else:
                return self.getToken(kernSpineParser.CHAR_K, i)

        def CHAR_k(self, i:int=None):
            if i is None:
                return self.getTokens(kernSpineParser.CHAR_k)
            else:
                return self.getToken(kernSpineParser.CHAR_k, i)

        def staffChange(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(kernSpineParser.StaffChangeContext)
            else:
                return self.getTypedRuleContext(kernSpineParser.StaffChangeContext,i)


        def getRuleIndex(self):
            return kernSpineParser.RULE_beam

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBeam" ):
                listener.enterBeam(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBeam" ):
                listener.exitBeam(self)




    def beam(self):

        localctx = kernSpineParser.BeamContext(self, self._ctx, self.state)
        self.enterRule(localctx, 256, self.RULE_beam)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1106 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 1102
                    _la = self._input.LA(1)
                    if not(((((_la - 54)) & ~0x3f) == 0 and ((1 << (_la - 54)) & 134217735) != 0)):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 1104
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,106,self._ctx)
                    if la_ == 1:
                        self.state = 1103
                        self.staffChange()



                else:
                    raise NoViableAltException(self)
                self.state = 1108 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,107,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StaffPositionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def lineSpace(self):
            return self.getTypedRuleContext(kernSpineParser.LineSpaceContext,0)


        def number(self):
            return self.getTypedRuleContext(kernSpineParser.NumberContext,0)


        def getRuleIndex(self):
            return kernSpineParser.RULE_staffPosition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStaffPosition" ):
                listener.enterStaffPosition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStaffPosition" ):
                listener.exitStaffPosition(self)




    def staffPosition(self):

        localctx = kernSpineParser.StaffPositionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 258, self.RULE_staffPosition)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1110
            self.lineSpace()
            self.state = 1111
            self.number()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LineSpaceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CHAR_L(self):
            return self.getToken(kernSpineParser.CHAR_L, 0)

        def CHAR_S(self):
            return self.getToken(kernSpineParser.CHAR_S, 0)

        def getRuleIndex(self):
            return kernSpineParser.RULE_lineSpace

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLineSpace" ):
                listener.enterLineSpace(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLineSpace" ):
                listener.exitLineSpace(self)




    def lineSpace(self):

        localctx = kernSpineParser.LineSpaceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 260, self.RULE_lineSpace)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1113
            _la = self._input.LA(1)
            if not(_la==56 or _la==63):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MordentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CHAR_M(self):
            return self.getToken(kernSpineParser.CHAR_M, 0)

        def CHAR_m(self):
            return self.getToken(kernSpineParser.CHAR_m, 0)

        def CHAR_W(self):
            return self.getToken(kernSpineParser.CHAR_W, 0)

        def CHAR_w(self):
            return self.getToken(kernSpineParser.CHAR_w, 0)

        def getRuleIndex(self):
            return kernSpineParser.RULE_mordent

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMordent" ):
                listener.enterMordent(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMordent" ):
                listener.exitMordent(self)




    def mordent(self):

        localctx = kernSpineParser.MordentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 262, self.RULE_mordent)
        try:
            self.state = 1122
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [57]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1115
                self.match(kernSpineParser.CHAR_M)
                pass
            elif token in [83]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1116
                self.match(kernSpineParser.CHAR_m)
                pass
            elif token in [67]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1117
                self.match(kernSpineParser.CHAR_W)
                self.state = 1119
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,108,self._ctx)
                if la_ == 1:
                    self.state = 1118
                    self.match(kernSpineParser.CHAR_w)


                pass
            elif token in [93]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1121
                self.match(kernSpineParser.CHAR_w)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TrillContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CHAR_T(self, i:int=None):
            if i is None:
                return self.getTokens(kernSpineParser.CHAR_T)
            else:
                return self.getToken(kernSpineParser.CHAR_T, i)

        def CHAR_t(self):
            return self.getToken(kernSpineParser.CHAR_t, 0)

        def getRuleIndex(self):
            return kernSpineParser.RULE_trill

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTrill" ):
                listener.enterTrill(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTrill" ):
                listener.exitTrill(self)




    def trill(self):

        localctx = kernSpineParser.TrillContext(self, self._ctx, self.state)
        self.enterRule(localctx, 264, self.RULE_trill)
        try:
            self.state = 1129
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [64]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1124
                self.match(kernSpineParser.CHAR_T)
                self.state = 1126
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,110,self._ctx)
                if la_ == 1:
                    self.state = 1125
                    self.match(kernSpineParser.CHAR_T)


                pass
            elif token in [90]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1128
                self.match(kernSpineParser.CHAR_t)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FootnoteContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def QUESTION_MARK(self, i:int=None):
            if i is None:
                return self.getTokens(kernSpineParser.QUESTION_MARK)
            else:
                return self.getToken(kernSpineParser.QUESTION_MARK, i)

        def getRuleIndex(self):
            return kernSpineParser.RULE_footnote

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFootnote" ):
                listener.enterFootnote(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFootnote" ):
                listener.exitFootnote(self)




    def footnote(self):

        localctx = kernSpineParser.FootnoteContext(self, self._ctx, self.state)
        self.enterRule(localctx, 266, self.RULE_footnote)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1132 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 1131
                    self.match(kernSpineParser.QUESTION_MARK)

                else:
                    raise NoViableAltException(self)
                self.state = 1134 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,112,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CrescendoBeginContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ANGLE_BRACKET_OPEN(self):
            return self.getToken(kernSpineParser.ANGLE_BRACKET_OPEN, 0)

        def getRuleIndex(self):
            return kernSpineParser.RULE_crescendoBegin

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCrescendoBegin" ):
                listener.enterCrescendoBegin(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCrescendoBegin" ):
                listener.exitCrescendoBegin(self)




    def crescendoBegin(self):

        localctx = kernSpineParser.CrescendoBeginContext(self, self._ctx, self.state)
        self.enterRule(localctx, 268, self.RULE_crescendoBegin)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1136
            self.match(kernSpineParser.ANGLE_BRACKET_OPEN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DiminuendoBeginContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ANGLE_BRACKET_CLOSE(self):
            return self.getToken(kernSpineParser.ANGLE_BRACKET_CLOSE, 0)

        def getRuleIndex(self):
            return kernSpineParser.RULE_diminuendoBegin

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDiminuendoBegin" ):
                listener.enterDiminuendoBegin(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDiminuendoBegin" ):
                listener.exitDiminuendoBegin(self)




    def diminuendoBegin(self):

        localctx = kernSpineParser.DiminuendoBeginContext(self, self._ctx, self.state)
        self.enterRule(localctx, 270, self.RULE_diminuendoBegin)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1138
            self.match(kernSpineParser.ANGLE_BRACKET_CLOSE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CrescendoEndContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LEFT_BRACKET(self, i:int=None):
            if i is None:
                return self.getTokens(kernSpineParser.LEFT_BRACKET)
            else:
                return self.getToken(kernSpineParser.LEFT_BRACKET, i)

        def getRuleIndex(self):
            return kernSpineParser.RULE_crescendoEnd

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCrescendoEnd" ):
                listener.enterCrescendoEnd(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCrescendoEnd" ):
                listener.exitCrescendoEnd(self)




    def crescendoEnd(self):

        localctx = kernSpineParser.CrescendoEndContext(self, self._ctx, self.state)
        self.enterRule(localctx, 272, self.RULE_crescendoEnd)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1140
            self.match(kernSpineParser.LEFT_BRACKET)
            self.state = 1142
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==115:
                self.state = 1141
                self.match(kernSpineParser.LEFT_BRACKET)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DiminuendoEndContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RIGHT_BRACKET(self, i:int=None):
            if i is None:
                return self.getTokens(kernSpineParser.RIGHT_BRACKET)
            else:
                return self.getToken(kernSpineParser.RIGHT_BRACKET, i)

        def getRuleIndex(self):
            return kernSpineParser.RULE_diminuendoEnd

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDiminuendoEnd" ):
                listener.enterDiminuendoEnd(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDiminuendoEnd" ):
                listener.exitDiminuendoEnd(self)




    def diminuendoEnd(self):

        localctx = kernSpineParser.DiminuendoEndContext(self, self._ctx, self.state)
        self.enterRule(localctx, 274, self.RULE_diminuendoEnd)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1144
            self.match(kernSpineParser.RIGHT_BRACKET)
            self.state = 1146
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==116:
                self.state = 1145
                self.match(kernSpineParser.RIGHT_BRACKET)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CrescendoContinueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LEFT_PARENTHESIS(self):
            return self.getToken(kernSpineParser.LEFT_PARENTHESIS, 0)

        def getRuleIndex(self):
            return kernSpineParser.RULE_crescendoContinue

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCrescendoContinue" ):
                listener.enterCrescendoContinue(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCrescendoContinue" ):
                listener.exitCrescendoContinue(self)




    def crescendoContinue(self):

        localctx = kernSpineParser.CrescendoContinueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 276, self.RULE_crescendoContinue)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1148
            self.match(kernSpineParser.LEFT_PARENTHESIS)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DiminuendoContinueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RIGHT_PARENTHESIS(self):
            return self.getToken(kernSpineParser.RIGHT_PARENTHESIS, 0)

        def getRuleIndex(self):
            return kernSpineParser.RULE_diminuendoContinue

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDiminuendoContinue" ):
                listener.enterDiminuendoContinue(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDiminuendoContinue" ):
                listener.exitDiminuendoContinue(self)




    def diminuendoContinue(self):

        localctx = kernSpineParser.DiminuendoContinueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 278, self.RULE_diminuendoContinue)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1150
            self.match(kernSpineParser.RIGHT_PARENTHESIS)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PianoContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CHAR_p(self):
            return self.getToken(kernSpineParser.CHAR_p, 0)

        def getRuleIndex(self):
            return kernSpineParser.RULE_piano

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPiano" ):
                listener.enterPiano(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPiano" ):
                listener.exitPiano(self)




    def piano(self):

        localctx = kernSpineParser.PianoContext(self, self._ctx, self.state)
        self.enterRule(localctx, 280, self.RULE_piano)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1152
            self.match(kernSpineParser.CHAR_p)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PianissimoContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CHAR_p(self, i:int=None):
            if i is None:
                return self.getTokens(kernSpineParser.CHAR_p)
            else:
                return self.getToken(kernSpineParser.CHAR_p, i)

        def getRuleIndex(self):
            return kernSpineParser.RULE_pianissimo

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPianissimo" ):
                listener.enterPianissimo(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPianissimo" ):
                listener.exitPianissimo(self)




    def pianissimo(self):

        localctx = kernSpineParser.PianissimoContext(self, self._ctx, self.state)
        self.enterRule(localctx, 282, self.RULE_pianissimo)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1154
            self.match(kernSpineParser.CHAR_p)
            self.state = 1155
            self.match(kernSpineParser.CHAR_p)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TriplePianoContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CHAR_p(self, i:int=None):
            if i is None:
                return self.getTokens(kernSpineParser.CHAR_p)
            else:
                return self.getToken(kernSpineParser.CHAR_p, i)

        def getRuleIndex(self):
            return kernSpineParser.RULE_triplePiano

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTriplePiano" ):
                listener.enterTriplePiano(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTriplePiano" ):
                listener.exitTriplePiano(self)




    def triplePiano(self):

        localctx = kernSpineParser.TriplePianoContext(self, self._ctx, self.state)
        self.enterRule(localctx, 284, self.RULE_triplePiano)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1157
            self.match(kernSpineParser.CHAR_p)
            self.state = 1158
            self.match(kernSpineParser.CHAR_p)
            self.state = 1159
            self.match(kernSpineParser.CHAR_p)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QuadruplePianoContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CHAR_p(self, i:int=None):
            if i is None:
                return self.getTokens(kernSpineParser.CHAR_p)
            else:
                return self.getToken(kernSpineParser.CHAR_p, i)

        def getRuleIndex(self):
            return kernSpineParser.RULE_quadruplePiano

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQuadruplePiano" ):
                listener.enterQuadruplePiano(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQuadruplePiano" ):
                listener.exitQuadruplePiano(self)




    def quadruplePiano(self):

        localctx = kernSpineParser.QuadruplePianoContext(self, self._ctx, self.state)
        self.enterRule(localctx, 286, self.RULE_quadruplePiano)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1161
            self.match(kernSpineParser.CHAR_p)
            self.state = 1162
            self.match(kernSpineParser.CHAR_p)
            self.state = 1163
            self.match(kernSpineParser.CHAR_p)
            self.state = 1164
            self.match(kernSpineParser.CHAR_p)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ForteContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CHAR_f(self):
            return self.getToken(kernSpineParser.CHAR_f, 0)

        def getRuleIndex(self):
            return kernSpineParser.RULE_forte

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterForte" ):
                listener.enterForte(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitForte" ):
                listener.exitForte(self)




    def forte(self):

        localctx = kernSpineParser.ForteContext(self, self._ctx, self.state)
        self.enterRule(localctx, 288, self.RULE_forte)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1166
            self.match(kernSpineParser.CHAR_f)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FortissimoContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CHAR_f(self, i:int=None):
            if i is None:
                return self.getTokens(kernSpineParser.CHAR_f)
            else:
                return self.getToken(kernSpineParser.CHAR_f, i)

        def getRuleIndex(self):
            return kernSpineParser.RULE_fortissimo

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFortissimo" ):
                listener.enterFortissimo(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFortissimo" ):
                listener.exitFortissimo(self)




    def fortissimo(self):

        localctx = kernSpineParser.FortissimoContext(self, self._ctx, self.state)
        self.enterRule(localctx, 290, self.RULE_fortissimo)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1168
            self.match(kernSpineParser.CHAR_f)
            self.state = 1169
            self.match(kernSpineParser.CHAR_f)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TripleForteContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CHAR_f(self, i:int=None):
            if i is None:
                return self.getTokens(kernSpineParser.CHAR_f)
            else:
                return self.getToken(kernSpineParser.CHAR_f, i)

        def getRuleIndex(self):
            return kernSpineParser.RULE_tripleForte

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTripleForte" ):
                listener.enterTripleForte(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTripleForte" ):
                listener.exitTripleForte(self)




    def tripleForte(self):

        localctx = kernSpineParser.TripleForteContext(self, self._ctx, self.state)
        self.enterRule(localctx, 292, self.RULE_tripleForte)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1171
            self.match(kernSpineParser.CHAR_f)
            self.state = 1172
            self.match(kernSpineParser.CHAR_f)
            self.state = 1173
            self.match(kernSpineParser.CHAR_f)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QuadrupleForteContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CHAR_f(self, i:int=None):
            if i is None:
                return self.getTokens(kernSpineParser.CHAR_f)
            else:
                return self.getToken(kernSpineParser.CHAR_f, i)

        def getRuleIndex(self):
            return kernSpineParser.RULE_quadrupleForte

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQuadrupleForte" ):
                listener.enterQuadrupleForte(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQuadrupleForte" ):
                listener.exitQuadrupleForte(self)




    def quadrupleForte(self):

        localctx = kernSpineParser.QuadrupleForteContext(self, self._ctx, self.state)
        self.enterRule(localctx, 294, self.RULE_quadrupleForte)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1175
            self.match(kernSpineParser.CHAR_f)
            self.state = 1176
            self.match(kernSpineParser.CHAR_f)
            self.state = 1177
            self.match(kernSpineParser.CHAR_f)
            self.state = 1178
            self.match(kernSpineParser.CHAR_f)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MezzoPianoContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CHAR_m(self):
            return self.getToken(kernSpineParser.CHAR_m, 0)

        def CHAR_p(self):
            return self.getToken(kernSpineParser.CHAR_p, 0)

        def getRuleIndex(self):
            return kernSpineParser.RULE_mezzoPiano

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMezzoPiano" ):
                listener.enterMezzoPiano(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMezzoPiano" ):
                listener.exitMezzoPiano(self)




    def mezzoPiano(self):

        localctx = kernSpineParser.MezzoPianoContext(self, self._ctx, self.state)
        self.enterRule(localctx, 296, self.RULE_mezzoPiano)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1180
            self.match(kernSpineParser.CHAR_m)
            self.state = 1181
            self.match(kernSpineParser.CHAR_p)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MezzoForteContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CHAR_m(self):
            return self.getToken(kernSpineParser.CHAR_m, 0)

        def CHAR_f(self):
            return self.getToken(kernSpineParser.CHAR_f, 0)

        def getRuleIndex(self):
            return kernSpineParser.RULE_mezzoForte

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMezzoForte" ):
                listener.enterMezzoForte(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMezzoForte" ):
                listener.exitMezzoForte(self)




    def mezzoForte(self):

        localctx = kernSpineParser.MezzoForteContext(self, self._ctx, self.state)
        self.enterRule(localctx, 298, self.RULE_mezzoForte)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1183
            self.match(kernSpineParser.CHAR_m)
            self.state = 1184
            self.match(kernSpineParser.CHAR_f)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SforzandoContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CHAR_s(self):
            return self.getToken(kernSpineParser.CHAR_s, 0)

        def CHAR_f(self):
            return self.getToken(kernSpineParser.CHAR_f, 0)

        def CHAR_z(self):
            return self.getToken(kernSpineParser.CHAR_z, 0)

        def CHAR_Z(self):
            return self.getToken(kernSpineParser.CHAR_Z, 0)

        def getRuleIndex(self):
            return kernSpineParser.RULE_sforzando

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSforzando" ):
                listener.enterSforzando(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSforzando" ):
                listener.exitSforzando(self)




    def sforzando(self):

        localctx = kernSpineParser.SforzandoContext(self, self._ctx, self.state)
        self.enterRule(localctx, 300, self.RULE_sforzando)
        try:
            self.state = 1195
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,115,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1186
                self.match(kernSpineParser.CHAR_s)
                self.state = 1187
                self.match(kernSpineParser.CHAR_f)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1188
                self.match(kernSpineParser.CHAR_f)
                self.state = 1189
                self.match(kernSpineParser.CHAR_z)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1190
                self.match(kernSpineParser.CHAR_s)
                self.state = 1191
                self.match(kernSpineParser.CHAR_f)
                self.state = 1192
                self.match(kernSpineParser.CHAR_z)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1193
                self.match(kernSpineParser.CHAR_z)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1194
                self.match(kernSpineParser.CHAR_Z)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FortePianoContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CHAR_f(self):
            return self.getToken(kernSpineParser.CHAR_f, 0)

        def CHAR_p(self):
            return self.getToken(kernSpineParser.CHAR_p, 0)

        def getRuleIndex(self):
            return kernSpineParser.RULE_fortePiano

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFortePiano" ):
                listener.enterFortePiano(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFortePiano" ):
                listener.exitFortePiano(self)




    def fortePiano(self):

        localctx = kernSpineParser.FortePianoContext(self, self._ctx, self.state)
        self.enterRule(localctx, 302, self.RULE_fortePiano)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1197
            self.match(kernSpineParser.CHAR_f)
            self.state = 1198
            self.match(kernSpineParser.CHAR_p)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RinforzandoContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CHAR_r(self):
            return self.getToken(kernSpineParser.CHAR_r, 0)

        def CHAR_f(self):
            return self.getToken(kernSpineParser.CHAR_f, 0)

        def CHAR_z(self):
            return self.getToken(kernSpineParser.CHAR_z, 0)

        def getRuleIndex(self):
            return kernSpineParser.RULE_rinforzando

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRinforzando" ):
                listener.enterRinforzando(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRinforzando" ):
                listener.exitRinforzando(self)




    def rinforzando(self):

        localctx = kernSpineParser.RinforzandoContext(self, self._ctx, self.state)
        self.enterRule(localctx, 304, self.RULE_rinforzando)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1200
            self.match(kernSpineParser.CHAR_r)
            self.state = 1202
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==76:
                self.state = 1201
                self.match(kernSpineParser.CHAR_f)


            self.state = 1205
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==96:
                self.state = 1204
                self.match(kernSpineParser.CHAR_z)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SubitoContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CHAR_s(self):
            return self.getToken(kernSpineParser.CHAR_s, 0)

        def getRuleIndex(self):
            return kernSpineParser.RULE_subito

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSubito" ):
                listener.enterSubito(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSubito" ):
                listener.exitSubito(self)




    def subito(self):

        localctx = kernSpineParser.SubitoContext(self, self._ctx, self.state)
        self.enterRule(localctx, 306, self.RULE_subito)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1207
            self.match(kernSpineParser.CHAR_s)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx





