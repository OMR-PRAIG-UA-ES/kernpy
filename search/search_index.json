{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"kernpy documentation","text":"<p><code>kernpy</code> is a python package that provides utilities for working with kern and mens data. </p>"},{"location":"#useful-links","title":"Useful links:","text":"<p>Installation | Source Repository | Project Website (PRAIG)</p>"},{"location":"#contents","title":"Contents","text":"<ol> <li>Get started</li> <li>How-To Guides</li> <li>Reference</li> <li>Explanation</li> <li>About</li> </ol> <p>Quickly find what you are looking for depending on your use case by looking at the different pages.</p>"},{"location":"#acknowledgements","title":"Acknowledgements","text":"<p>University of Alicante. </p>"},{"location":"about/","title":"Who are we?","text":"<p>We are a research group affiliated with the University of Alicante. </p> <p>To learn more about our work, please visit our website.</p>"},{"location":"explanation/","title":"Explanations","text":"<p>Soon!</p>"},{"location":"get-started/","title":"Overview of the get started guide","text":"<p>Learn how to use <code>kernpy</code>. </p> <ul> <li>Installation</li> <li>Quick Start</li> </ul>"},{"location":"how-to-guides/","title":"Guides: learn what you can do with <code>kernpy</code>","text":"<p>This section contains a series of guides that will help you get started with <code>kernpy</code> and learn how to use it to perform different tasks.</p> <ul> <li>Get started</li> </ul>"},{"location":"reference/","title":"API Reference","text":""},{"location":"reference/#modules","title":"Modules","text":"<p>kernpy.core</p> <p>=====</p> <p>This module contains the core functionality of the <code>kernpy</code> package.</p> <p>kernpy.util</p> <p>=====</p> <p>This module contains utility functions for the kernpy package.</p> <p>polish_scores</p> <p>====</p> <p>This module provides a way to download and process the Polish Scores dataset.</p>"},{"location":"reference/#kernpy--kernpy","title":"kernpy","text":"<p>=====</p> <p>Python Humdrum kern and mens utilities package.</p> <p>Execute the following command to run kernpy as a module:</p> <pre><code>python -m kernpy --help\npython -m kernpy &lt;command&gt; &lt;options&gt;\n</code></pre> <p>Run <code>kernpy</code> from your script:</p> <pre><code>import kernpy\n\nhelp(kernpy)\n</code></pre> <p>Run <code>kernpy</code> as a module. The points where \ud83c\udfaf is shown are the available commands.</p>"},{"location":"reference/#kernpy--kern2ekern","title":"\ud83c\udfaf kern2ekern","text":"<p>Convert .krn to .ekern:</p> <pre><code>python -m kernpy --kern2ekern --input_path &lt;input_file&gt; &lt;-r&gt; &lt;v | --verbose [0-2]&gt;\n</code></pre> <p>\ud83d\udccc Basic usage running kernpy as a module:</p> <pre><code>python -m kernpy --input_path /my/path/to/file.krn # New ekern generated in /my/path/to/file.ekern\n</code></pre> <p>\ud83d\udccc Generate an ekrn file in specific location running kernpy as a module:</p> <pre><code>python -m kernpy --input_path /my/path/to/file.krn --output_path /new/output.ekern\n</code></pre> <p>\ud83d\udccc Converting all the .krn files in a directory to .ekern files running kernpy as a module: * Every .krn file in the directory will be converted to .ekern in the same location. * Using, at least, one additional directory level is required.</p> <pre><code>root\n\u251c\u2500 kern-folder\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 1.krn\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 2.krn\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 3.krn\n\u251c\u2500\u2500 more-kerns\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 1.krn\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 ...\n</code></pre> <p>Run:</p> <pre><code>python -m kernpy --input_path /my/path/to/directory/ -r\n</code></pre> <p>\u270f\ufe0f This function is also available as a python function:</p> <pre><code># converter.py\nfrom kernpy import kern_to_ekern\n\nkern_to_ekern('/my/path/to/input.krn', '/to/my/output.ekrn')\n\n# Many files\nfiles = ['file1.krn', 'file2.krn', 'file3.krn']\n[kern_to_ekern(f) for f in files]\n\n# This function raises an exception if the conversion fails.\n# Handle the errors using try-except statement if many files are going to be converted in series.\n</code></pre>"},{"location":"reference/#kernpy--ekern2kern-convertir-un-solo-archivo-ekern-a-krn","title":"\ud83c\udfaf ekern2kern: Convertir un solo archivo .ekern a .krn:","text":"<pre><code>python -m kernpy --ekern2kern --input_path &lt;input_file&gt;  &lt;--verbose [0-2]&gt;\n</code></pre> <p>The command has the following arguments: * input_path: Ruta del archivo .ekern a convertir. * output_path: Ruta del archivo .krn a generar (opcional). Si no se especifica, se generar\u00e1 en la misma ubicaci\u00f3n. * -r: Recursivo (opcional). * --verbose[0-2]: Nivel de verbosidad (opcional).</p> <ul> <li>Basic usage running kernpy as a module:</li> </ul> <pre><code>python -m kernpy --input_path /my/path/to/file.ekern # New krn generated in /my/path/to/file.krn\n</code></pre> <p>\ud83d\udccc Generate a krn file in specific location running kernpy as a module:</p> <pre><code>python -m kernpy --input_path /my/path/to/file.ekern --output_path /new/output.krn\n</code></pre> <p>\ud83d\udccc Converting all the .ekern files in a directory to .krn files running kernpy as a module:</p> <ul> <li>Every .ekrn file in the directory will be converted to .krn in the same location.</li> <li>Using, at least, one additional directory level is required.</li> </ul> <pre><code>root\n\u251c\u2500 ekern-folder\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 1.ekrn\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 2.ekrn\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 3.ekrn\n\u251c\u2500\u2500 more-ekerns\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 1.ekrn\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 ...\n</code></pre> <p>Run:</p> <pre><code>python -m kernpy --input_path /my/path/to/directory/ -r\n</code></pre> <p>\u270f\ufe0f This function is also available as a python function:</p> <pre><code># converter.py\nfrom kernpy import ekern_to_krn\n\n# Only one file\nekern_to_krn('/my/path/to/input.ekrn', '/to/my/output.krn')\n\n# Many files\nfiles = ['file1.ekrn', 'file2.ekrn', 'file3.ekrn']\n[ekern_to_krn(f) for f in files]\n\n# This function raises an exception if the conversion fails.\n# Handle the errors using try-except statement if many files are going to be converted in series.\n</code></pre>"},{"location":"reference/#kernpy--create-fragments","title":"\ud83c\udfaf create fragments","text":"<p>Generate new valid kern files from an original kern file. Every new fragment will be a subset of the original file.</p> <p>Explore the documentation website for more information about the parameters.</p> <p>Use: - create_fragments_from_kern to generate using always the same measure length. - create_fragments_from_directory to generate using a Gaussian distribution for the measure length. Static measure is also available if the standard deviation is set to 0.</p> <p>\ud83d\udccc Create new scores from one original kern directory running kernpy as a module:</p> <pre><code>python -m kernpy --generate_fragments --input_directory /from/my/kerns --output_directory /to/my/fragments --log_file log.csv  --verbose 2 --mean 4.2 --std_dev 1.5 --offset 1 --num_processes 12\n</code></pre> <p>\u270f\ufe0f Create new scores from one original kern file:</p> <pre><code># generator.py\nfrom kernpy import create_fragments_from_kern\n\n# View docs:\nhelp(create_fragments_from_kern)\n\ncreate_fragments_from_kern('/my/path/to/input.krn', '/to/my/output_dir/',\n                           measure_length=4, offset=1,\n                           log_file='/dev/null')\n</code></pre> <p>\u270f\ufe0f Create new scores from one original kern directory: - Using, at least, one additional directory level is required.</p> <pre><code>root\n\u251c\u2500 kern-folder\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 1.krn\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 2.krn\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 3.krn\n\u251c\u2500\u2500 more-kerns\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 1.krn\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 ...\n</code></pre> <p>Run:</p> <pre><code># generator.py\nfrom kernpy import create_fragments_from_directory\n\n# View docs:\nhelp(create_fragments_from_directory)\n\ncreate_fragments_from_directory('/my/path/to/input_dir/', '/to/my/output_dir/',\n                                mean=4.1, std_dev=0.2, offset=2,\n                                log_file='/logs/fragments.csv',\n                                num_processes=12)\n</code></pre>"},{"location":"reference/#kernpy.core.Duration","title":"<code>Duration</code>","text":"<p>               Bases: <code>ABC</code></p> <p>Represents the duration of a note or a rest.</p> <p>The duration is represented using the Humdrum Kern format. The duration is a number that represents the number of units of the duration.</p> <p>The duration of a whole note is 1, half note is 2, quarter note is 4, eighth note is 8, etc.</p> <p>The duration of a note is represented by a number. The duration of a rest is also represented by a number.</p> <p>This class do not limit the duration ranges.</p> <p>In the following example, the duration is represented by the number '2'.</p> <pre><code>**kern\n*clefG2\n2c          // whole note\n4c          // half note\n8c          // quarter note\n16c         // eighth note\n*-\n</code></pre>"},{"location":"reference/#kernpy.core.DurationClassical","title":"<code>DurationClassical</code>","text":"<p>               Bases: <code>Duration</code></p> <p>Represents the duration in classical notation of a note or a rest.</p>"},{"location":"reference/#kernpy.core.DurationClassical.__eq__","title":"<code>__eq__(other)</code>","text":"<p>Compare two durations.</p> <p>Parameters:</p> Name Type Description Default <code>other</code> <p>The other duration to compare</p> required <p>Returns:</p> Type Description <p>True if the durations are equal, False otherwise</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; duration = DurationClassical(2)\n&gt;&gt;&gt; duration2 = DurationClassical(2)\n&gt;&gt;&gt; duration == duration2\nTrue\n&gt;&gt;&gt; duration = DurationClassical(2)\n&gt;&gt;&gt; duration2 = DurationClassical(4)\n&gt;&gt;&gt; duration == duration2\nFalse\n</code></pre>"},{"location":"reference/#kernpy.core.DurationClassical.__ge__","title":"<code>__ge__(other)</code>","text":"<p>Compare two durations.</p> <p>Parameters:</p> Name Type Description Default <code>other</code> <p>The other duration to compare</p> required <p>Returns:</p> Type Description <p>True if this duration is higher or equal than the other, False otherwise</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; duration = DurationClassical(2)\n&gt;&gt;&gt; duration2 = DurationClassical(4)\n&gt;&gt;&gt; duration &gt;= duration2\nFalse\n&gt;&gt;&gt; duration = DurationClassical(4)\n&gt;&gt;&gt; duration2 = DurationClassical(2)\n&gt;&gt;&gt; duration &gt;= duration2\nTrue\n&gt;&gt;&gt; duration = DurationClassical(4)\n&gt;&gt;&gt; duration2 = DurationClassical(4)\n&gt;&gt;&gt; duration &gt;= duration2\nTrue\n</code></pre>"},{"location":"reference/#kernpy.core.DurationClassical.__gt__","title":"<code>__gt__(other)</code>","text":"<p>Compare two durations.</p> <p>Parameters:</p> Name Type Description Default <code>other</code> <p>The other duration to compare</p> required <p>Returns:</p> Type Description <p>True if this duration is higher than the other, False otherwise</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; duration = DurationClassical(2)\n&gt;&gt;&gt; duration2 = DurationClassical(4)\n&gt;&gt;&gt; duration &gt; duration2\nFalse\n&gt;&gt;&gt; duration = DurationClassical(4)\n&gt;&gt;&gt; duration2 = DurationClassical(2)\n&gt;&gt;&gt; duration &gt; duration2\nTrue\n&gt;&gt;&gt; duration = DurationClassical(4)\n&gt;&gt;&gt; duration2 = DurationClassical(4)\n&gt;&gt;&gt; duration &gt; duration2\nFalse\n</code></pre>"},{"location":"reference/#kernpy.core.DurationClassical.__init__","title":"<code>__init__(duration)</code>","text":"<p>Create a new Duration object.</p> <p>Parameters:</p> Name Type Description Default <code>raw_duration</code> <code>str</code> <p>duration representation in Humdrum Kern format</p> required <p>Examples:</p> <pre><code>&gt;&gt;&gt; duration = DurationClassical(2)\nTrue\n&gt;&gt;&gt; duration = DurationClassical(4)\nTrue\n&gt;&gt;&gt; duration = DurationClassical(32)\nTrue\n&gt;&gt;&gt; duration = DurationClassical(1)\nTrue\n&gt;&gt;&gt; duration = DurationClassical(0)\nFalse\n&gt;&gt;&gt; duration = DurationClassical(-2)\nFalse\n&gt;&gt;&gt; duration = DurationClassical(3)\nFalse\n&gt;&gt;&gt; duration = DurationClassical(7)\nFalse\n</code></pre>"},{"location":"reference/#kernpy.core.DurationClassical.__le__","title":"<code>__le__(other)</code>","text":"<p>Compare two durations.</p> <p>Parameters:</p> Name Type Description Default <code>other</code> <p>The other duration to compare</p> required <p>Returns:</p> Type Description <p>True if this duration is lower or equal than the other, False otherwise</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; duration = DurationClassical(2)\n&gt;&gt;&gt; duration2 = DurationClassical(4)\n&gt;&gt;&gt; duration &lt;= duration2\nTrue\n&gt;&gt;&gt; duration = DurationClassical(4)\n&gt;&gt;&gt; duration2 = DurationClassical(2)\n&gt;&gt;&gt; duration &lt;= duration2\nFalse\n&gt;&gt;&gt; duration = DurationClassical(4)\n&gt;&gt;&gt; duration2 = DurationClassical(4)\n&gt;&gt;&gt; duration &lt;= duration2\nTrue\n</code></pre>"},{"location":"reference/#kernpy.core.DurationClassical.__lt__","title":"<code>__lt__(other)</code>","text":"<p>Compare two durations.</p> <p>Parameters:</p> Name Type Description Default <code>other</code> <p>The other duration to compare</p> required <p>Returns:</p> Type Description <p>True if this duration is lower than the other, False otherwise</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; duration = DurationClassical(2)\n&gt;&gt;&gt; duration2 = DurationClassical(4)\n&gt;&gt;&gt; duration &lt; duration2\nTrue\n&gt;&gt;&gt; duration = DurationClassical(4)\n&gt;&gt;&gt; duration2 = DurationClassical(2)\n&gt;&gt;&gt; duration &lt; duration2\nFalse\n&gt;&gt;&gt; duration = DurationClassical(4)\n&gt;&gt;&gt; duration2 = DurationClassical(4)\n&gt;&gt;&gt; duration &lt; duration2\nFalse\n</code></pre>"},{"location":"reference/#kernpy.core.DurationClassical.__ne__","title":"<code>__ne__(other)</code>","text":"<p>Compare two durations.</p> <p>Parameters:</p> Name Type Description Default <code>other</code> <p>The other duration to compare</p> required <p>Returns:</p> Type Description <p>True if the durations are different, False otherwise</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; duration = DurationClassical(2)\n&gt;&gt;&gt; duration2 = DurationClassical(2)\n&gt;&gt;&gt; duration != duration2\nFalse\n&gt;&gt;&gt; duration = DurationClassical(2)\n&gt;&gt;&gt; duration2 = DurationClassical(4)\n&gt;&gt;&gt; duration != duration2\nTrue\n</code></pre>"},{"location":"reference/#kernpy.core.DurationClassical.modify","title":"<code>modify(ratio)</code>","text":"<p>Modify the duration of a note or a rest of the current object.</p> <p>Parameters:</p> Name Type Description Default <code>ratio</code> <code>int</code> <p>The factor to modify the duration. The factor must be greater than 0.</p> required <p>Returns:</p> Name Type Description <code>DurationClassical</code> <p>The new duration object with the modified duration.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; duration = DurationClassical(2)\n&gt;&gt;&gt; new_duration = duration.modify(2)\n&gt;&gt;&gt; new_duration.duration\n4\n&gt;&gt;&gt; duration = DurationClassical(2)\n&gt;&gt;&gt; new_duration = duration.modify(0)\nTraceback (most recent call last):\n...\nValueError: Invalid factor provided: 0. The factor must be greater than 0.\n&gt;&gt;&gt; duration = DurationClassical(2)\n&gt;&gt;&gt; new_duration = duration.modify(-2)\nTraceback (most recent call last):\n...\nValueError: Invalid factor provided: -2. The factor must be greater than 0.\n</code></pre>"},{"location":"reference/#kernpy.core.DurationMensural","title":"<code>DurationMensural</code>","text":"<p>               Bases: <code>Duration</code></p> <p>Represents the duration in mensural notation of a note or a rest.</p>"},{"location":"reference/#kernpy.core.ExportOptions","title":"<code>ExportOptions</code>","text":""},{"location":"reference/#kernpy.core.ExportOptions.__init__","title":"<code>__init__(spine_types=None, token_categories=None, from_measure=None, to_measure=None, kern_type=KernTypeExporter.normalizedKern, instruments=None)</code>","text":"<p>Create a new ExportOptions object.</p> <p>Parameters:</p> Name Type Description Default <code>spine_types</code> <code>Iterable</code> <p>kern, mens, etc...</p> <code>None</code> <code>token_categories</code> <code>Iterable</code> <p>TokenCategory</p> <code>None</code> <code>from_measure</code> <code>int</code> <p>The measure to start exporting. When None, the exporter will start from the beginning of the file.</p> <code>None</code> <code>to_measure</code> <code>int</code> <p>The measure to end exporting. When None, the exporter will end at the end of the file.</p> <code>None</code> <code>kern_type</code> <code>KernTypeExporter</code> <p>The type of the kern file to export.</p> <code>normalizedKern</code> <code>instruments</code> <code>Iterable</code> <p>The instruments to export. When None, all the instruments will be exported.</p> <code>None</code> <p>Examples:</p> <pre><code>&gt;&gt;&gt; from kernpy import HumdrumImporter, ExportOptions\n</code></pre> <p>Create the importer and read the file</p> <pre><code>&gt;&gt;&gt; hi = HumdrumImporter()\n&gt;&gt;&gt; hi.doImportFile('file.krn')\n</code></pre> <p>Export the file with the specified options</p> <pre><code>&gt;&gt;&gt; options = ExportOptions(spine_types=['**kern'], token_categories=BEKERN_CATEGORIES)\n&gt;&gt;&gt; exported_data = hi.doExport(options)\n</code></pre> <p>Export only the lyirics</p> <pre><code>&gt;&gt;&gt; options = ExportOptions(spine_types=['**kern'], token_categories=[TokenCategory.LYRICS])\n&gt;&gt;&gt; exported_data = hi.doExport(options)\n</code></pre> <p>Export the comments</p> <pre><code>&gt;&gt;&gt; options = ExportOptions(spine_types=['**kern'], token_categories=[TokenCategory.LINE_COMMENTS, TokenCategory.FIELD_COMMENTS])\n&gt;&gt;&gt; exported_data = hi.doExport(options)\n</code></pre> <p>Export using the eKern version</p> <pre><code>&gt;&gt;&gt; options = ExportOptions(spine_types=['**kern'], token_categories=BEKERN_CATEGORIES, kern_type=KernTypeExporter.eKern)\n&gt;&gt;&gt; exported_data = hi.doExport(options)\n</code></pre>"},{"location":"reference/#kernpy.core.HumdrumImporter","title":"<code>HumdrumImporter</code>","text":""},{"location":"reference/#kernpy.core.HumdrumImporter.__len__","title":"<code>__len__()</code>","text":"<p>Get the number of spines in the importer.</p>"},{"location":"reference/#kernpy.core.HumdrumImporter.doImportFile","title":"<code>doImportFile(file_path)</code>","text":"<p>Import the content from the importer to the file. Args:     file_path: The path to the file.</p> <p>Returns:</p> Type Description <p>None</p> <p>Examples:</p>"},{"location":"reference/#kernpy.core.HumdrumImporter.doImportFile--create-the-importer-and-read-the-file","title":"Create the importer and read the file","text":"<pre><code>&gt;&gt;&gt; hi = HumdrumImporter()\n&gt;&gt;&gt; hi.doImportFile('file.krn')\n</code></pre>"},{"location":"reference/#kernpy.core.HumdrumImporter.getMetacomments","title":"<code>getMetacomments(KeyComment=None, clean=True)</code>","text":"<p>Get the metacomments of the file.</p> <p>Parameters:</p> Name Type Description Default <code>KeyComment</code> <code>str</code> <p>The key of the metacomment. (optional).                If not specified, all the metacomments will be returned. If specified, all the content of the metacomment with the specified key will be returned.</p> <code>None</code> <code>clean</code> <code>bool</code> <p>If True, the metacomments will be returned applying a .strip(). Only valid if KeyComment is not None.</p> <code>True</code> <p>Returns:</p> Type Description <p>A list with the metacomments.                if KeyComment is not None, a list be returned anyway.                 If there are no metacomments with the specified key, an empty list will be returned.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; from kernpy import HumdrumImporter\n&gt;&gt;&gt; importer = HumdrumImporter()\n</code></pre>"},{"location":"reference/#kernpy.core.HumdrumImporter.getMetacomments--read-the-file","title":"Read the file","text":"<pre><code>&gt;&gt;&gt; importer.doImportFile('file.krn')\n</code></pre>"},{"location":"reference/#kernpy.core.HumdrumImporter.getMetacomments--get-all-the-metacomments","title":"Get all the metacomments","text":"<pre><code>&gt;&gt;&gt; all_metacomments = importer.getMetacomments()\n# ... modify the metacomments using your own logic\n</code></pre>"},{"location":"reference/#kernpy.core.HumdrumImporter.getMetacomments--get-the-metacomments-with-the-key-get-the-composer","title":"Get the metacomments with the key: get the composer:","text":"<pre><code>&gt;&gt;&gt; composer = importer.getMetacomments(KeyComment='!!!COM')\n</code></pre>"},{"location":"reference/#kernpy.core.HumdrumImporter.getMetacomments--check-if-your-kern-file-format-is-compatible-with-the-expected-format-if-it-is-not-do-not-clen-it","title":"check if your kern file format is compatible with the expected format. If it is not, do not clen it:","text":"<pre><code>&gt;&gt;&gt; raw_compose = importer.getMetacomments(KeyComment='!!!COM', clean=False)\n</code></pre>"},{"location":"reference/#kernpy.core.HumdrumImporter.get_all_tokens","title":"<code>get_all_tokens(apply_strip=True, remove_measure_numbers=False, filter_by_categories=None)</code>","text":"<p>Get all the tokens in the importer.</p> <p>Parameters:</p> Name Type Description Default <code>apply_strip</code> <code>bool</code> <p>If True, the tokens will be stripped. False otherwise. Default is True.</p> <code>True</code> <code>remove_measure_numbers</code> <code>bool</code> <p>If True, the measure numbers will be removed. False otherwise. Default is False.</p> <code>False</code> <code>filter_by_categories</code> <code>Iterable</code> <p>An Iterable (like a list) with the categories to filter the tokens. Default is None.                Only the tokens with the categories in the list will be returned.</p> <code>None</code> <p>Returns:</p> Type Description <code>list</code> <p>A list with all the tokens in the importer.</p> <p>Examples:</p>"},{"location":"reference/#kernpy.core.HumdrumImporter.get_all_tokens--create-the-importer","title":"Create the importer","text":"<pre><code>&gt;&gt;&gt; hi = HumdrumImporter()\n</code></pre>"},{"location":"reference/#kernpy.core.HumdrumImporter.get_all_tokens--read-the-file","title":"Read the file","text":"<pre><code>&gt;&gt;&gt; hi.doImportFile('file.krn')\n</code></pre>"},{"location":"reference/#kernpy.core.HumdrumImporter.get_all_tokens--get-all-the-tokens","title":"Get all the tokens","text":"<pre><code>&gt;&gt;&gt; all_tokens = hi.get_all_tokens()\n</code></pre>"},{"location":"reference/#kernpy.core.HumdrumImporter.get_all_tokens--get-all-the-tokens-without-measure-numbers","title":"Get all the tokens without measure numbers","text":"<pre><code>&gt;&gt;&gt; all_tokens = hi.get_all_tokens(remove_measure_numbers=True)\n</code></pre>"},{"location":"reference/#kernpy.core.HumdrumImporter.get_all_tokens--get-all-the-tokens-without-measure-numbers-and-filtered-by-categories","title":"Get all the tokens without measure numbers and filtered by categories","text":"<pre><code>&gt;&gt;&gt; all_tokens = hi.get_all_tokens(remove_measure_numbers=True, filter_by_categories=[TokenCategory.BARLINES, TokenCategory.FINGERING, TokenCategory.CORE])\n</code></pre>"},{"location":"reference/#kernpy.core.HumdrumImporter.get_all_tokens--get-all-tokens-used-in-the-bekern-codification","title":"Get all tokens used in the bekern codification","text":"<pre><code>&gt;&gt;&gt; all_tokens = hi.get_all_tokens(remove_measure_numbers=True, filter_by_categories=BEKERN_CATEGORIES)\n</code></pre>"},{"location":"reference/#kernpy.core.HumdrumImporter.get_unique_tokens","title":"<code>get_unique_tokens(apply_strip=True, remove_measure_numbers=False, filter_by_categories=None)</code>","text":"<p>Get the unique tokens in the importer.</p> <p>Parameters:</p> Name Type Description Default <code>apply_strip</code> <code>bool</code> <p>If True, the tokens will be stripped. False otherwise. Default is True.</p> <code>True</code> <code>remove_measure_numbers</code> <code>bool</code> <p>If True, the measure numbers will be removed. False otherwise. Default is False.</p> <code>False</code> <code>filter_by_categories</code> <code>Iterable</code> <p>An Iterable (like a list) with the categories to filter the tokens. Default is None.                Only the tokens with the categories in the list will be returned.</p> <code>None</code> <p>Returns:</p> Type Description <code>list</code> <p>A list with the unique tokens in the importer.</p> <p>Examples:</p>"},{"location":"reference/#kernpy.core.HumdrumImporter.get_unique_tokens--create-the-importer","title":"Create the importer","text":"<pre><code>&gt;&gt;&gt; hi = HumdrumImporter()\n</code></pre>"},{"location":"reference/#kernpy.core.HumdrumImporter.get_unique_tokens--read-the-file","title":"Read the file","text":"<pre><code>&gt;&gt;&gt; hi.doImportFile('file.krn')\n</code></pre>"},{"location":"reference/#kernpy.core.HumdrumImporter.get_unique_tokens--get-the-unique-tokens","title":"Get the unique tokens","text":"<pre><code>&gt;&gt;&gt; unique_tokens = hi.get_unique_tokens()\n</code></pre>"},{"location":"reference/#kernpy.core.HumdrumImporter.get_unique_tokens--get-the-unique-tokens-without-measure-numbers","title":"Get the unique tokens without measure numbers","text":"<pre><code>&gt;&gt;&gt; unique_tokens = hi.get_unique_tokens(remove_measure_numbers=True)\n</code></pre>"},{"location":"reference/#kernpy.core.HumdrumImporter.get_unique_tokens--get-the-unique-tokens-without-measure-numbers-and-filtered-by-categories","title":"Get the unique tokens without measure numbers and filtered by categories","text":"<pre><code>&gt;&gt;&gt; unique_tokens = hi.get_unique_tokens(remove_measure_numbers=True, filter_by_categories=[TokenCategory.BARLINES, TokenCategory.KEYSIGNATURE, TokenCategory.CORE])\n</code></pre>"},{"location":"reference/#kernpy.core.HumdrumImporter.get_unique_tokens--get-the-unique-tokens-used-in-the-bekern-codification","title":"Get the unique tokens used in the bekern codification","text":"<pre><code>&gt;&gt;&gt; unique_tokens = hi.get_all_tokens(remove_measure_numbers=True, filter_by_categories=BEKERN_CATEGORIES)\n</code></pre>"},{"location":"reference/#kernpy.core.HumdrumImporter.has_category","title":"<code>has_category(token_category_goal)</code>","text":"<p>Check if the importer has a specific token.</p> <p>Parameters:</p> Name Type Description Default <code>token_category_goal</code> <code>TokenCategory</code> <p>The token category to check.</p> required <p>Returns:     True if the importer has the token category, False otherwise.</p> <p>Examples:</p>"},{"location":"reference/#kernpy.core.HumdrumImporter.has_category--create-the-importer","title":"Create the importer","text":"<pre><code>&gt;&gt;&gt; hi = HumdrumImporter()\n</code></pre>"},{"location":"reference/#kernpy.core.HumdrumImporter.has_category--read-the-file","title":"Read the file","text":"<pre><code>&gt;&gt;&gt; hi.doImportFile('file.krn')\n</code></pre>"},{"location":"reference/#kernpy.core.HumdrumImporter.has_category--check-if-the-importer-has-a-specific-token","title":"Check if the importer has a specific token","text":"<pre><code>&gt;&gt;&gt; has_barlines = hi.has_category(TokenCategory.BARLINES)\n</code></pre>"},{"location":"reference/#kernpy.core.HumdrumImporter.has_token","title":"<code>has_token(token_goal)</code>","text":"<p>Check if the importer has a specific token.</p> <p>Parameters:</p> Name Type Description Default <code>token_goal</code> <code>str</code> <p>The token to check.</p> required <p>Returns:</p> Type Description <p>True if the importer has the token, False otherwise.</p> <p>Examples:</p>"},{"location":"reference/#kernpy.core.HumdrumImporter.has_token--create-the-importer","title":"Create the importer","text":"<pre><code>&gt;&gt;&gt; hi = HumdrumImporter()\n</code></pre>"},{"location":"reference/#kernpy.core.HumdrumImporter.has_token--read-the-file","title":"Read the file","text":"<pre><code>&gt;&gt;&gt; hi.doImportFile('file.krn')\n</code></pre>"},{"location":"reference/#kernpy.core.HumdrumImporter.has_token--check-if-the-importer-has-a-specific-token","title":"Check if the importer has a specific token","text":"<pre><code>&gt;&gt;&gt; has_f_4_clef = hi.has_token('*clefF4')\n</code></pre>"},{"location":"reference/#kernpy.core.HumdrumImporter.is_voice_in_tessitura","title":"<code>is_voice_in_tessitura(voice, tessitura)</code>","text":"<p>Check if a voice is in a tessitura.</p> <p>Parameters:</p> Name Type Description Default <code>voice</code> <code>int</code> <p>The voice to check.</p> required <code>tessitura</code> <code>tuple</code> <p>A tuple with the tessitura. The first element is the lower limit, and the second element is the upper limit.</p> required <p>Returns:</p> Type Description <code>bool</code> <p>True if the voice is in the tessitura, False otherwise.</p> <p>Examples:</p>"},{"location":"reference/#kernpy.core.HumdrumImporter.is_voice_in_tessitura--create-the-importer","title":"Create the importer","text":"<pre><code>&gt;&gt;&gt; hi = HumdrumImporter()\n</code></pre>"},{"location":"reference/#kernpy.core.HumdrumImporter.is_voice_in_tessitura--read-the-file","title":"Read the file","text":"<pre><code>&gt;&gt;&gt; hi.doImportFile('file.krn')\n</code></pre>"},{"location":"reference/#kernpy.core.HumdrumImporter.is_voice_in_tessitura--check-if-the-voice-1-is-in-the-tessitura-c4-g4","title":"Check if the voice 1 is in the tessitura (C4, G4)","text":"<pre><code>&gt;&gt;&gt; is_in_tessitura = hi.is_voice_in_tessitura(1, ('c4', 'g4'))\n</code></pre>"},{"location":"reference/#kernpy.core.KernTypeExporter","title":"<code>KernTypeExporter</code>","text":"<p>               Bases: <code>Enum</code></p> <p>Options for exporting a kern file.</p> <p>Examples:</p>"},{"location":"reference/#kernpy.core.KernTypeExporter--create-the-importer","title":"Create the importer","text":"<pre><code>&gt;&gt;&gt; hi = HumdrumImporter()\n</code></pre>"},{"location":"reference/#kernpy.core.KernTypeExporter--read-the-file","title":"Read the file","text":"<pre><code>&gt;&gt;&gt; hi.doImportFile('file.krn')\n</code></pre>"},{"location":"reference/#kernpy.core.KernTypeExporter--export-the-file","title":"Export the file","text":"<pre><code>&gt;&gt;&gt; options = ExportOptions(spine_types=['**kern'], token_categories=BEKERN_CATEGORIES, kernType=KernTypeExporter.normalizedKern)\n&gt;&gt;&gt; exported = hi.doExport(options)\n</code></pre>"},{"location":"reference/#kernpy.core.PitchRest","title":"<code>PitchRest</code>","text":"<p>Represents a pitch or a rest in a note.</p> <p>The pitch is represented using the International Standard Organization (ISO) pitch notation. The first line below the staff is the C4 in G clef. The above C is C5, the below C is C3, etc.</p> <p>The Humdrum Kern format uses the following pitch representation: 'c' = C4 'cc' = C5 'ccc' = C6 'cccc' = C7</p> <p>'C' = C3 'CC' = C2 'CCC' = C1</p> <p>The rests are represented by the letter 'r'. The rests do not have pitch.</p> <p>This class do not limit the pitch ranges.</p> <p>In the following example, the pitch is represented by the letter 'c'. The pitch of 'c' is C4, 'cc' is C5, 'ccc' is C6.</p> <pre><code>**kern\n*clefG2\n2c          // C4\n2cc         // C5\n2ccc        // C6\n2C          // C3\n2CC         // C2\n2CCC        // C1\n*-\n</code></pre>"},{"location":"reference/#kernpy.core.PitchRest.__eq__","title":"<code>__eq__(other)</code>","text":"<p>Compare two pitches and rests.</p> <p>Parameters:</p> Name Type Description Default <code>other</code> <p>The other pitch to compare</p> required <p>Returns:</p> Type Description <p>True if the pitches are equal, False otherwise</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; pitch_rest = PitchRest('c')\n&gt;&gt;&gt; pitch_rest2 = PitchRest('c')\n&gt;&gt;&gt; pitch_rest == pitch_rest2\nTrue\n&gt;&gt;&gt; pitch_rest = PitchRest('c')\n&gt;&gt;&gt; pitch_rest2 = PitchRest('ccc')\n&gt;&gt;&gt; pitch_rest == pitch_rest2\nFalse\n&gt;&gt;&gt; pitch_rest = PitchRest('c')\n&gt;&gt;&gt; pitch_rest2 = PitchRest('r')\n&gt;&gt;&gt; pitch_rest == pitch_rest2\nFalse\n&gt;&gt;&gt; pitch_rest = PitchRest('r')\n&gt;&gt;&gt; pitch_rest2 = PitchRest('r')\n&gt;&gt;&gt; pitch_rest == pitch_rest2\nTrue\n</code></pre>"},{"location":"reference/#kernpy.core.PitchRest.__ge__","title":"<code>__ge__(other)</code>","text":"<p>Compare two pitches. If any of the PitchRest is a rest, the comparison raise an exception. Args:     other: The other pitch to compare</p> <p>Returns:</p> Type Description <p>True if this pitch is higher or equal than the other, False otherwise</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; pitch_rest = PitchRest('c')\n&gt;&gt;&gt; pitch_rest2 = PitchRest('d')\n&gt;&gt;&gt; pitch_rest &gt;= pitch_rest2\nFalse\n&gt;&gt;&gt; pitch_rest = PitchRest('c')\n&gt;&gt;&gt; pitch_rest2 = PitchRest('c')\n&gt;&gt;&gt; pitch_rest &gt;= pitch_rest2\nTrue\n&gt;&gt;&gt; pitch_rest = PitchRest('c')\n&gt;&gt;&gt; pitch_rest2 = PitchRest('b')\n&gt;&gt;&gt; pitch_rest &gt;= pitch_rest2\nTrue\n&gt;&gt;&gt; pitch_rest = PitchRest('r')\n&gt;&gt;&gt; pitch_rest2 = PitchRest('c')\n&gt;&gt;&gt; pitch_rest &gt;= pitch_rest2\nTraceback (most recent call last):\n...\nValueError: ...\n&gt;&gt;&gt; pitch_rest = PitchRest('r')\n&gt;&gt;&gt; pitch_rest2 = PitchRest('r')\n&gt;&gt;&gt; pitch_rest &gt;= pitch_rest2\nTraceback (most recent call last):\n...\nValueError: ...\n</code></pre>"},{"location":"reference/#kernpy.core.PitchRest.__gt__","title":"<code>__gt__(other)</code>","text":"<p>Compare two pitches.</p> <p>If any of the pitches is a rest, the comparison raise an exception.</p> <p>Parameters:</p> Name Type Description Default <code>other</code> <p>The other pitch to compare</p> required <p>Returns: True if this pitch is higher than the other, False otherwise</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; pitch_rest = PitchRest('c')\n&gt;&gt;&gt; pitch_rest2 = PitchRest('d')\n&gt;&gt;&gt; pitch_rest &gt; pitch_rest2\nFalse\n&gt;&gt;&gt; pitch_rest = PitchRest('c')\n&gt;&gt;&gt; pitch_rest2 = PitchRest('c')\n&gt;&gt;&gt; pitch_rest &gt; pitch_rest2\nFalse\n&gt;&gt;&gt; pitch_rest = PitchRest('c')\n&gt;&gt;&gt; pitch_rest2 = PitchRest('b')\n&gt;&gt;&gt; pitch_rest &gt; pitch_rest2\nTrue\n&gt;&gt;&gt; pitch_rest = PitchRest('r')\n&gt;&gt;&gt; pitch_rest2 = PitchRest('c')\n&gt;&gt;&gt; pitch_rest &gt; pitch_rest2\nTraceback (most recent call last):\n...\nValueError: ...\n&gt;&gt;&gt; pitch_rest = PitchRest('r')\n&gt;&gt;&gt; pitch_rest2 = PitchRest('r')\n&gt;&gt;&gt; pitch_rest &gt; pitch_rest2\nTraceback (most recent call last):\nValueError: ...\n</code></pre>"},{"location":"reference/#kernpy.core.PitchRest.__init__","title":"<code>__init__(raw_pitch)</code>","text":"<p>Create a new PitchRest object.</p> <p>Parameters:</p> Name Type Description Default <code>raw_pitch</code> <code>str</code> <p>pitch representation in Humdrum Kern format</p> required <p>Examples:</p> <pre><code>&gt;&gt;&gt; pitch_rest = PitchRest('c')\n&gt;&gt;&gt; pitch_rest = PitchRest('r')\n&gt;&gt;&gt; pitch_rest = PitchRest('DDD')\n</code></pre>"},{"location":"reference/#kernpy.core.PitchRest.__le__","title":"<code>__le__(other)</code>","text":"<p>Compare two pitches. If any of the PitchRest is a rest, the comparison raise an exception. Args:     other: The other pitch to compare</p> <p>Returns: True if this pitch is lower or equal than the other, False otherwise</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; pitch_rest = PitchRest('c')\n&gt;&gt;&gt; pitch_rest2 = PitchRest('d')\n&gt;&gt;&gt; pitch_rest &lt;= pitch_rest2\nTrue\n&gt;&gt;&gt; pitch_rest = PitchRest('c')\n&gt;&gt;&gt; pitch_rest2 = PitchRest('c')\n&gt;&gt;&gt; pitch_rest &lt;= pitch_rest2\nTrue\n&gt;&gt;&gt; pitch_rest = PitchRest('c')\n&gt;&gt;&gt; pitch_rest2 = PitchRest('b')\n&gt;&gt;&gt; pitch_rest &lt;= pitch_rest2\nFalse\n&gt;&gt;&gt; pitch_rest = PitchRest('r')\n&gt;&gt;&gt; pitch_rest2 = PitchRest('c')\n&gt;&gt;&gt; pitch_rest &lt;= pitch_rest2\nTraceback (most recent call last):\n...\nValueError: ...\n&gt;&gt;&gt; pitch_rest = PitchRest('r')\n&gt;&gt;&gt; pitch_rest2 = PitchRest('r')\n&gt;&gt;&gt; pitch_rest &lt;= pitch_rest2\nTraceback (most recent call last):\n...\nValueError: ...\n</code></pre>"},{"location":"reference/#kernpy.core.PitchRest.__lt__","title":"<code>__lt__(other)</code>","text":"<p>Compare two pitches.</p> <p>If any of the pitches is a rest, the comparison raise an exception.</p> <p>Parameters:</p> Name Type Description Default <code>other</code> <p>The other pitch to compare</p> required <p>Returns:</p> Type Description <p>True if this pitch is lower than the other, False otherwise</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; pitch_rest = PitchRest('c')\n&gt;&gt;&gt; pitch_rest2 = PitchRest('d')\n&gt;&gt;&gt; pitch_rest &lt; pitch_rest2\nTrue\n&gt;&gt;&gt; pitch_rest = PitchRest('c')\n&gt;&gt;&gt; pitch_rest2 = PitchRest('c')\n&gt;&gt;&gt; pitch_rest &lt; pitch_rest2\nFalse\n&gt;&gt;&gt; pitch_rest = PitchRest('c')\n&gt;&gt;&gt; pitch_rest2 = PitchRest('b')\n&gt;&gt;&gt; pitch_rest &lt; pitch_rest2\nFalse\n&gt;&gt;&gt; pitch_rest = PitchRest('r')\n&gt;&gt;&gt; pitch_rest2 = PitchRest('c')\n&gt;&gt;&gt; pitch_rest &lt; pitch_rest2\nTraceback (most recent call last):\n...\nValueError: ...\n&gt;&gt;&gt; pitch_rest = PitchRest('r')\n&gt;&gt;&gt; pitch_rest2 = PitchRest('r')\n&gt;&gt;&gt; pitch_rest &lt; pitch_rest2\nTraceback (most recent call last):\n...\nValueError: ...\n</code></pre>"},{"location":"reference/#kernpy.core.PitchRest.__ne__","title":"<code>__ne__(other)</code>","text":"<p>Compare two pitches and rests. Args:     other: The other pitch to compare</p> <p>Returns:</p> Type Description <p>True if the pitches are different, False otherwise</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; pitch_rest = PitchRest('c')\n&gt;&gt;&gt; pitch_rest2 = PitchRest('c')\n&gt;&gt;&gt; pitch_rest != pitch_rest2\nFalse\n&gt;&gt;&gt; pitch_rest = PitchRest('c')\n&gt;&gt;&gt; pitch_rest2 = PitchRest('ccc')\n&gt;&gt;&gt; pitch_rest != pitch_rest2\nTrue\n&gt;&gt;&gt; pitch_rest = PitchRest('c')\n&gt;&gt;&gt; pitch_rest2 = PitchRest('r')\n&gt;&gt;&gt; pitch_rest != pitch_rest2\nTrue\n&gt;&gt;&gt; pitch_rest = PitchRest('r')\n&gt;&gt;&gt; pitch_rest2 = PitchRest('r')\n&gt;&gt;&gt; pitch_rest != pitch_rest2\nFalse\n</code></pre>"},{"location":"reference/#kernpy.core.PitchRest.is_rest","title":"<code>is_rest()</code>","text":"<p>Check if the pitch is a rest.</p> <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>True if the pitch is a rest, False otherwise.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; pitch_rest = PitchRest('c')\n&gt;&gt;&gt; pitch_rest.is_rest()\nFalse\n&gt;&gt;&gt; pitch_rest = PitchRest('r')\n&gt;&gt;&gt; pitch_rest.is_rest()\nTrue\n</code></pre>"},{"location":"reference/#kernpy.core.PitchRest.pitch_comparator","title":"<code>pitch_comparator(pitch_a, pitch_b)</code>  <code>staticmethod</code>","text":"<p>Compare two pitches of the same octave.</p> <p>The lower pitch is 'a'. So 'a' &lt; 'b' &lt; 'c' &lt; 'd' &lt; 'e' &lt; 'f' &lt; 'g'</p> <p>Parameters:</p> Name Type Description Default <code>pitch_a</code> <code>string</code> <p>One pitch of 'abcdefg'</p> required <code>pitch_b</code> <code>string</code> <p>Another pitch of 'abcdefg'</p> required <p>Returns:</p> Type Description <code>int</code> <p>-1 if pitch1 is lower than pitch2</p> <code>int</code> <p>0 if pitch1 is equal to pitch2</p> <code>int</code> <p>1 if pitch1 is higher than pitch2</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; PitchRest.pitch_comparator('c', 'c')\n0\n&gt;&gt;&gt; PitchRest.pitch_comparator('c', 'd')\n-1\n&gt;&gt;&gt; PitchRest.pitch_comparator('d', 'c')\n1\n</code></pre>"},{"location":"reference/#kernpy.core.Score","title":"<code>Score</code>","text":""},{"location":"reference/#kernpy.core.Score.extract_measures","title":"<code>extract_measures(from_measure=None, to_measure=None)</code>","text":"<p>Extract a range of measures from the score and return a new score.</p> <p>Parameters:</p> Name Type Description Default <code>from_measure</code> <p>The measure to start the extraction. The first measure starts at 0.</p> <code>None</code> <code>to_measure</code> <p>The measure to end the extraction. The last measure is included.                         The last measure ends at len(score.measures) - 1.</p> <code>None</code>"},{"location":"reference/#kernpy.core.Score.extract_spine","title":"<code>extract_spine(spine)</code>","text":"<p>Extract a spine from the score. TODO:</p>"},{"location":"reference/#kernpy.core.Score.measure_from_time","title":"<code>measure_from_time(time)</code>","text":"<p>Greater number of the measure where the time is not greater than 10 seconds</p> <p>Parameters:</p> Name Type Description Default <code>time</code> <code>float</code> <p>The max time in seconds.</p> required <p>Returns:</p> Name Type Description <code>measure</code> <code>int</code> <p>The measure number.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; import kernpy\n&gt;&gt;&gt; score = kernpy.read_krn('path/to/file.krn')\n&gt;&gt;&gt; # Get the measure at 10 seconds\n&gt;&gt;&gt; measure = score.measure_from_time(10)\n&gt;&gt;&gt; # Greater number of the measure where the time is not greater than 10 seconds\n&gt;&gt;&gt; print(measure)\n</code></pre>"},{"location":"reference/#kernpy.core.Score.tokens","title":"<code>tokens()</code>","text":"<p>Return a set of tokens in the score.</p> <p>Returns:</p> Name Type Description <code>tokens</code> <code>set</code> <p>A set of tokens in the score.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; import kernpy\n&gt;&gt;&gt; score = kernpy.read_krn('path/to/file.krn')\n&gt;&gt;&gt; tokens = score.tokens()\n&gt;&gt;&gt; print(tokens)\n{\"2r\", \"4G\", \"8c\", \"|\" }\n</code></pre>"},{"location":"reference/#kernpy.core.Score.transpose","title":"<code>transpose(interval)</code>","text":"<p>Transpose the score by a chromatic interval. Keep the same notes semantic interval. Even if double or triple accidentals are used.</p> <p>Parameters:</p> Name Type Description Default <code>interval</code> <code>int</code> <p>The chromatic interval to transpose the score.</p> required <p>Returns:</p> Name Type Description <code>new_score</code> <p>The transposed score.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; import kernpy\n&gt;&gt;&gt; score = kernpy.read_krn('path/to/file.krn')\n&gt;&gt;&gt; # Transpose 2 semitones up\n&gt;&gt;&gt; s1 = score.transpose(2)\n&gt;&gt;&gt; # Transpose 2 semitones down\n&gt;&gt;&gt; s2 = score.transpose(-2)\n&gt;&gt;&gt; # Export it to a file\n&gt;&gt;&gt; s1.to_krn('path/to/up2.krn')\n&gt;&gt;&gt; s2.to_krn('path/to/down2.krn')\n</code></pre>"},{"location":"reference/#kernpy.core.TokenCategory","title":"<code>TokenCategory</code>","text":"<p>               Bases: <code>Enum</code></p> <p>Options for the category of a token.</p> <p>This is used to determine what kind of token should be exported.</p>"},{"location":"reference/#kernpy.core.ekern_to_krn","title":"<code>ekern_to_krn(input_file, output_file)</code>","text":"<p>Convert one .ekrn file to .krn file.</p> <p>Parameters:</p> Name Type Description Default <code>input_file</code> <p>Filepath to the input **ekern</p> required <code>output_file</code> <p>Filepath to the output **kern</p> required <p>Returns:     None</p> <p>Examples:</p>"},{"location":"reference/#kernpy.core.ekern_to_krn--convert-ekrn-to-krn","title":"Convert .ekrn to .krn","text":"<pre><code>&gt;&gt;&gt; ekern_to_krn('path/to/file.ekrn', 'path/to/file.krn')\n</code></pre>"},{"location":"reference/#kernpy.core.ekern_to_krn--convert-a-list-of-ekrn-files-to-krn-files","title":"Convert a list of .ekrn files to .krn files","text":"<pre><code>ekrn_files = your_modue.get_files()\n\n# Use the wrapper to avoid stopping the process if an error occurs\ndef ekern_to_krn_wrapper(ekern_file, kern_file):\n    try:\n        ekern_to_krn(ekrn_files, output_folder)\n    except Exception as e:\n        print(f'Error:{e}')\n\n# Convert all the files\nfor ekern_file in ekrn_files:\n    output_file = ekern_file.replace('.ekrn', '.krn')\n    ekern_to_krn_wrapper(ekern_file, output_file)\n</code></pre>"},{"location":"reference/#kernpy.core.kern_to_ekern","title":"<code>kern_to_ekern(input_file, output_file)</code>","text":"<p>Convert one .krn file to .ekrn file</p> <p>Parameters:</p> Name Type Description Default <code>input_file</code> <p>Filepath to the input **kern</p> required <code>output_file</code> <p>Filepath to the output **ekern</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> <p>Examples:</p>"},{"location":"reference/#kernpy.core.kern_to_ekern--convert-krn-to-ekrn","title":"Convert .krn to .ekrn","text":"<pre><code>&gt;&gt;&gt; kern_to_ekern('path/to/file.krn', 'path/to/file.ekrn')\n</code></pre>"},{"location":"reference/#kernpy.core.kern_to_ekern--convert-a-list-of-krn-files-to-ekrn-files","title":"Convert a list of .krn files to .ekrn files","text":"<pre><code>krn_files = your_module.get_files()\n\n# Use the wrapper to avoid stopping the process if an error occurs\ndef kern_to_ekern_wrapper(krn_file, ekern_file):\n    try:\n        kern_to_ekern(krn_file, ekern_file)\n    except Exception as e:\n        print(f'Error:{e}')\n\n# Convert all the files\nfor krn_file in krn_files:\n    output_file = krn_file.replace('.krn', '.ekrn')\n    kern_to_ekern_wrapper(krn_file, output_file)\n</code></pre>"},{"location":"reference/#kernpy.core.read_krn","title":"<code>read_krn(input_file)</code>","text":"<p>Read a kern file and return a Score object.</p> <p>Parameters:</p> Name Type Description Default <code>inputpath</code> <p>The path to the kern file.</p> required <p>Returns:</p> Name Type Description <code>score</code> <p>The score object.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; import kernpy\n&gt;&gt;&gt; score = kernpy.read_krn('path/to/file.krn')\n&gt;&gt;&gt; print(score)\n</code></pre>"},{"location":"reference/#kernpy.util.create_fragments_from_directory","title":"<code>create_fragments_from_directory(input_directory, output_directory, log_file, check_file_extension=True, offset=0, verbose=1, num_processes=None, mean=DEFAULT_MEAN, std_dev=DEFAULT_STD_DEV)</code>","text":"<p>Create a bunch of little kern files from a directory of kern files.</p> <p>Parameters:</p> Name Type Description Default <code>log_file</code> <code>str</code> <p>The log file to store the results</p> required <code>input_directory</code> <code>str</code> <p>The input directory with the kern files</p> required <code>output_directory</code> <code>str</code> <p>The output directory where the fragments will be stored</p> required <code>check_file_extension</code> <code>bool</code> <p>If True, only files with the extension '.krn' will be processed.         If False, all files will be processed, it could be more time-consuming.</p> <code>True</code> <code>offset</code> <code>int</code> <p>The number of measures between fragments.            If offset is 1, and measure_length is 4, the fragments will be: 1-4, 2-5, 3-6, 4-7, ... If the offset is 2, and measure_length is 4, the fragments will be: 1-4, 3-6, 5-8, 7-10, ... If the offset is 4, and measure_length is 4, the fragments will be: 1-4, 5-8, 9-12, 13-16, ...</p> <code>0</code> <code>verbose</code> <code>int</code> <p>The verbosity level</p> <code>1</code> <code>num_processes</code> <code>int</code> <p>The number of processes to use for parallel processing.            If None, or num_processes &lt;= 1, the processing will be done in a single process.</p> <code>None</code> <code>mean</code> <code>float</code> <p>The mean of the normal distribution to generate the measure length of the new fragments</p> <code>DEFAULT_MEAN</code> <code>std_dev</code> <code>float</code> <p>The standard deviation of the normal distribution to generate the measure length of the new fragments</p> <code>DEFAULT_STD_DEV</code> <p>Returns:</p> Type Description <code>None</code> <p>None</p> <p>Examples:</p> <pre><code># Basic execution\n&gt;&gt;&gt; create_fragments_from_directory('input_directory', 'output_directory', log_file='log.txt')\n\n# Custom mean and std_dev\n&gt;&gt;&gt; create_fragments_from_directory('input_directory', 'output_directory', log_file='log.txt', mean=5.2, std_dev=0.8)\n\n# Parallel processing\n&gt;&gt;&gt; create_fragments_from_directory('input_directory', 'output_directory', log_file='log.txt', offset=4, verbose=1, num_processes=8)\n\n# Single process\n&gt;&gt;&gt; create_fragments_from_directory('input_directory', 'output_directory', log_file='log.txt', offset=4, verbose=1)\n</code></pre>"},{"location":"reference/#kernpy.util.create_fragments_from_kern","title":"<code>create_fragments_from_kern(input_kern_file, output_directory, measure_length, offset, log_file, verbose=1, num_processes=None)</code>","text":"<p>Create a bunch of little kern files from a single kern file.</p> <p>Parameters:</p> Name Type Description Default <code>log_file</code> <code>str</code> <p>The log file to store the results</p> required <code>input_kern_file</code> <code>object</code> <p>The input kern file</p> required <code>output_directory</code> <code>str</code> <p>The output directory where the fragments will be stored</p> required <code>measure_length</code> <code>int</code> <p>The number of measures of the fragments</p> required <code>offset</code> <code>int</code> <p>The number of measures between fragments.            If offset is 1, and measure_length is 4, the fragments will be: 1-4, 2-5, 3-6, 4-7, ... If the offset is 2, and measure_length is 4, the fragments will be: 1-4, 3-6, 5-8, 7-10, ... If the offset is 4, and measure_length is 4, the fragments will be: 1-4, 5-8, 9-12, 13-16, ...</p> required <code>verbose</code> <code>int</code> <p>The verbosity level</p> <code>1</code> <code>num_processes</code> <code>int</code> <p>The number of processes to use for parallel processing.            If None, or num_processes &lt;= 1, the processing will be done in a single process.</p> <code>None</code> <p>Returns:</p> Type Description <code>None</code> <p>None</p> <p>Examples:</p>"},{"location":"reference/#kernpy.util.create_fragments_from_kern--basic-execution","title":"Basic execution","text":"<pre><code>&gt;&gt;&gt; create_fragments_from_kern('input.krn', 'output_directory', measure_length=4)\n</code></pre>"},{"location":"reference/#kernpy.util.create_fragments_from_kern--parallel-processing","title":"Parallel processing","text":"<pre><code>&gt;&gt;&gt; create_fragments_from_kern('input.krn', 'output_directory', measure_length=4, offset=4, log_file='log.txt', verbose=1, num_processes=8)\n&gt;&gt;&gt; create_fragments_from_kern('input.krn', 'output_directory', measure_length=4, offset=4, log_file='log.txt', verbose=1, num_processes=8)\n</code></pre>"},{"location":"reference/#kernpy.util.create_fragments_from_kern--single-process","title":"Single process","text":"<pre><code>&gt;&gt;&gt; create_fragments_from_kern('input.krn', 'output_directory', measure_length=4, offset=4, log_file='log.txt', verbose=1)\n&gt;&gt;&gt; create_fragments_from_kern('input.krn', 'output_directory', measure_length=4, offset=4, log_file='log.txt', verbose=1, num_processes=None)\n</code></pre>"},{"location":"reference/#kernpy.polish_scores.main","title":"<code>main(input_directory, output_directory, log_filename='/tmp/polish_index.json')</code>","text":"<p>Process the files in the input_directory and save the results in the output_directory. http requests are made to download the images.</p> <p>Parameters:</p> Name Type Description Default <code>input_directory</code> <p>directory where the input files are found</p> required <code>output_directory</code> <p>directory where the output files are saved</p> required <code>log_filename</code> <p>filename where the log is saved</p> <code>'/tmp/polish_index.json'</code> <p>Returns:</p> Type Description <code>None</code> <p>None</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; main('/kern_files', '/output_ekern')\n</code></pre> <pre><code>&gt;&gt;&gt; main('/kern_files', '/output_ekern', '/output_ekern/polish_index.json')\n</code></pre>"},{"location":"get-started/installation/","title":"Installation","text":"<p>Instructions for installing <code>kernpy</code> are provided below.</p>"},{"location":"get-started/installation/#install-using-pip","title":"Install using <code>pip</code>","text":"<p>Update <code>pip</code> to the latest version:</p> <pre><code>pip install --upgrade pip\n</code></pre> <p>Install <code>kernpy</code> using <code>pip</code>:</p> <pre><code>pip install kernpy\n</code></pre> <p>Check your <code>kernpy</code> version:</p> <pre><code>python -m kernpy --version \n</code></pre>"},{"location":"get-started/installation/#next-steps","title":"Next steps","text":"<ul> <li>Quick Start</li> <li>Reference</li> </ul>"},{"location":"get-started/quick-start/","title":"Quick start","text":""},{"location":"get-started/quick-start/#installation","title":"Installation","text":"<p>First of all, you need to install <code>kernpy</code>. You can do this by running the following command:</p> <p>Go to Installation for more information.</p>"},{"location":"get-started/quick-start/#usage","title":"Usage","text":"<p>Go to the README.md file in the kernpy repository to learn how to use <code>kernpy</code>.</p>"}]}