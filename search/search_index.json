{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"kernpy Docs","text":"kernpy documentation <p>Date: JAN 1, 2025 \u00a0|\u00a0 Version: 0.1.2</p> <p>Download documentation: Zipped HTML</p>"},{"location":"#useful-links","title":"Useful links:","text":"<p>Installation \u00a0|\u00a0 Source Repository \u00a0|\u00a0 Project Website (PRAIG)</p> <p><code>kernpy</code> is a python package that provides utilities for working with kern and mens data.</p>"},{"location":"#contents","title":"ContentsGetting startedHow-To guideAPI referenceAbout","text":"<p>New to <code>kernpy</code>? Check out the getting started guides. They contain an introduction to <code>kernpy</code>'s main concepts and links to additional tutorials.</p> To the getting started guides <p>The How-To guides provide in-depth information on how to perform specific tasks with <code>kernpy</code> step-by-step.</p> To the How-To guides <p>The API reference contains a detailed description of the <code>kernpy</code> API. It describes how the methods work and which parameters can be used.</p> To the API reference <p>Find out more about the <code>kernpy</code> project, including the team, how to contribute, and the license.</p> To the About page <p>Next</p> <p>Getting Started</p> <p>Previous</p> <p>Getting Started</p> <p></p> <p>Quickly find what you are looking for depending on your use case by looking at the different pages.</p>"},{"location":"#acknowledgements","title":"Acknowledgements","text":"<p>University of Alicante.</p>"},{"location":"about/","title":"Who are we?","text":"<p>We are a research group affiliated with the University of Alicante. </p> <p>To learn more about our work, please visit our website.</p>"},{"location":"get-started/","title":"Getting started","text":""},{"location":"get-started/#installation","title":"Installation","text":"<p>Instructions for installing <code>kernpy</code> are provided below.</p>"},{"location":"get-started/#install-kernpy-using-pip","title":"Install <code>kernpy</code> using <code>pip</code>","text":"<pre><code>pip install kernpy\n</code></pre>"},{"location":"get-started/#install-the-last-version-from-the-repository","title":"Install the last version from the repository","text":"<pre><code>pip install git+https://github.com/OMR-PRAIG-UA-ES/kernpy.git \n</code></pre>"},{"location":"get-started/#install-a-specific-version-from-the-repository","title":"Install a specific version from the repository","text":"<pre><code>pip install git+https://github.com/OMR-PRAIG-UA-ES/kernpy.git@&lt;commit-tag&gt;\n</code></pre>"},{"location":"get-started/#next-steps","title":"Next steps","text":"<ul> <li>Tutorial     Learn how to use <code>kernpy</code> in a few minutes.</li> </ul>"},{"location":"how-to-guides/","title":"Guides: learn what you can do with <code>kernpy</code>","text":"<p>This section contains a series of guides that will help you get started with <code>kernpy</code> and learn how to use it to perform different tasks.</p> <ul> <li>Get started</li> </ul>"},{"location":"reference/","title":"API Reference","text":"<p>Here you can find the API reference for the <code>kernpy</code> package. The reference contains a detailed description of the <code>kernpy</code> API. The reference describes how the methods work and which parameters can be used. </p> <p>Find the basics of the <code>kernpy</code> package in the Tutorial.</p>"},{"location":"reference/#kernpy--kernpy","title":"kernpy","text":"<p>=====</p> <p>Python Humdrum kern and mens utilities package.</p> <p>Execute the following command to run kernpy as a module:</p> <pre><code>python -m kernpy --help\npython -m kernpy &lt;command&gt; &lt;options&gt;\n</code></pre> <p>Run <code>kernpy</code> from your script:</p> <pre><code>import kernpy\n\nhelp(kernpy)\n</code></pre> <p>While the package is not published in <code>pip</code>, the <code>kernpy</code> module must be in the root directory.</p>"},{"location":"reference/#kernpy--kern2ekern-convertir-un-solo-archivo-krn-a-ekern","title":"\ud83c\udfaf kern2ekern: Convertir un solo archivo .krn a .ekern:","text":"<pre><code>python -m kernpy --kern2ekern --input_path &lt;input_file&gt;  &lt;v | --verbose [0-2]&gt;\n</code></pre> <p>The command has the following arguments: * input_path: Ruta del archivo .krn a convertir. * output_path: Ruta del archivo .ekern a generar (opcional). Si no se especifica, se generar\u00e1 en la misma ubicaci\u00f3n. * -r: Recursivo (opcional). * --verbose[0-2]: Nivel de verbosidad (opcional).</p> <p>\ud83d\udccc Basic usage running kernpy as a module:</p> <pre><code>python -m kernpy --input_path /my/path/to/file.krn # New ekern generated in /my/path/to/file.ekern\n</code></pre> <p>\ud83d\udccc Generate an ekrn file in specific location running kernpy as a module:</p> <pre><code>python -m kernpy --input_path /my/path/to/file.krn --output_path /new/output.ekern\n</code></pre> <p>\ud83d\udccc Converting all the .krn files in a directory to .ekern files running kernpy as a module: * Every .krn file in the directory will be converted to .ekern in the same location. * Using, at least, one additional directory level is required.</p> <pre><code>root\n\u251c\u2500 kern-folder\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 1.krn\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 2.krn\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 3.krn\n\u251c\u2500\u2500 more-kerns\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 1.krn\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 ...\n</code></pre> <p>Run:</p> <pre><code>python -m kernpy --input_path /my/path/to/directory/ -r\n</code></pre> <p>\u270f\ufe0f This function is also available as a python function:</p> <pre><code># converter.py\nfrom kernpy import kern_to_ekern\n\nkern_to_ekern('/my/path/to/input.krn', '/to/my/output.ekrn')\n\n# Many files\nfiles = ['file1.krn', 'file2.krn', 'file3.krn']\n[kern_to_ekern(f) for f in files]\n\n# This function raises an exception if the conversion fails.\n# Handle the errors using try-except statement if many files are going to be converted in series.\n</code></pre>"},{"location":"reference/#kernpy--ekern2kern-convertir-un-solo-archivo-ekern-a-krn","title":"\ud83c\udfaf ekern2kern: Convertir un solo archivo .ekern a .krn:","text":"<pre><code>python -m kernpy --ekern2kern --input_path &lt;input_file&gt;  &lt;--verbose [0-2]&gt;\n</code></pre> <p>The command has the following arguments: * input_path: Ruta del archivo .ekern a convertir. * output_path: Ruta del archivo .krn a generar (opcional). Si no se especifica, se generar\u00e1 en la misma ubicaci\u00f3n. * -r: Recursivo (opcional). * --verbose[0-2]: Nivel de verbosidad (opcional).</p> <ul> <li>Basic usage running kernpy as a module:</li> </ul> <pre><code>python -m kernpy --input_path /my/path/to/file.ekern # New krn generated in /my/path/to/file.krn\n</code></pre> <p>\ud83d\udccc Generate a krn file in specific location running kernpy as a module:</p> <pre><code>python -m kernpy --input_path /my/path/to/file.ekern --output_path /new/output.krn\n</code></pre> <p>\ud83d\udccc Converting all the .ekern files in a directory to .krn files running kernpy as a module:</p> <ul> <li>Every .ekrn file in the directory will be converted to .krn in the same location.</li> <li>Using, at least, one additional directory level is required.</li> </ul> <pre><code>root\n\u251c\u2500 ekern-folder\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 1.ekrn\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 2.ekrn\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 3.ekrn\n\u251c\u2500\u2500 more-ekerns\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 1.ekrn\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 ...\n</code></pre> <p>Run:</p> <pre><code>python -m kernpy --input_path /my/path/to/directory/ -r\n</code></pre> <p>\u270f\ufe0f This function is also available as a python function:</p> <pre><code># converter.py\nfrom kernpy import ekern_to_krn\n\n# Only one file\nekern_to_krn('/my/path/to/input.ekrn', '/to/my/output.krn')\n\n# Many files\nfiles = ['file1.ekrn', 'file2.ekrn', 'file3.ekrn']\n[ekern_to_krn(f) for f in files]\n\n# This function raises an exception if the conversion fails.\n# Handle the errors using try-except statement if many files are going to be converted in series.\n</code></pre>"},{"location":"reference/#kernpy--create-fragments","title":"\ud83c\udfaf create fragments","text":"<p>Generate new valid kern files from an original kern file. Every new fragment will be a subset of the original file.</p> <p>Explore the documentation website for more information about the parameters.</p> <p>Use: - create_fragments_from_kern to generate using always the same measure length. - create_fragments_from_directory to generate using a Gaussian distribution for the measure length. Static measure is also available if the standard deviation is set to 0.</p> <p>\ud83d\udccc Create new scores from one original kern directory running kernpy as a module:</p> <pre><code>python -m kernpy --generate_fragments --input_directory /from/my/kerns --output_directory /to/my/fragments --log_file log.csv  --verbose 2 --mean 4.2 --std_dev 1.5 --offset 1 --num_processes 12\n</code></pre> <p>\u270f\ufe0f Create new scores from one original kern file:</p> <pre><code># generator.py\nfrom kernpy import create_fragments_from_kern\n\n# View docs:\nhelp(create_fragments_from_kern)\n\ncreate_fragments_from_kern('/my/path/to/input.krn', '/to/my/output_dir/',\n                           measure_length=4, offset=1,\n                           log_file='/dev/null')\n</code></pre> <p>\u270f\ufe0f Create new scores from one original kern directory: - Using, at least, one additional directory level is required.</p> <pre><code>root\n\u251c\u2500 kern-folder\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 1.krn\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 2.krn\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 3.krn\n\u251c\u2500\u2500 more-kerns\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 1.krn\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 ...\n</code></pre> <p>Run:</p> <pre><code># generator.py\nfrom kernpy import create_fragments_from_directory\n\n# View docs:\nhelp(create_fragments_from_directory)\n\ncreate_fragments_from_directory('/my/path/to/input_dir/', '/to/my/output_dir/',\n                                mean=4.1, std_dev=0.2, offset=2,\n                                log_file='/logs/fragments.csv',\n                                num_processes=12)\n</code></pre>"},{"location":"reference/#kernpy.Document","title":"<code>Document</code>","text":"<p>Document class.</p> <p>This class store the score content using an agnostic tree structure.</p> <p>Attributes:</p> Name Type Description <code>tree</code> <code>MultistageTree</code> <p>The tree structure of the document where all the nodes are stored.             Each stage of the tree corresponds to a row in the Humdrum **kern file encoding.</p> <code>measure_start_tree_stages</code> <code>List[List[Node]]</code> <p>The list of nodes that corresponds to the measures.             Empty list by default. The index of the list is starting from 1. Rows after removing empty lines and line comments</p> <code>page_bounding_boxes</code> <code>Dict[int, BoundingBoxMeasures]</code> <p>The dictionary of page bounding boxes.             - key: page number - value: BoundingBoxMeasures object</p> <code>header_stage</code> <code>int</code> <p>The index of the stage that contains the headers. None by default.</p>"},{"location":"reference/#kernpy.Document.__init__","title":"<code>__init__(tree)</code>","text":"<p>Constructor for Document class.</p> <p>Parameters:</p> Name Type Description Default <code>tree</code> <code>MultistageTree</code> <p>The tree structure of the document where all the nodes are stored.</p> required"},{"location":"reference/#kernpy.Document.__iter__","title":"<code>__iter__()</code>","text":"<p>Get the indexes to export all the document.</p> <p>Returns: An iterator with the indexes to export the document.</p>"},{"location":"reference/#kernpy.Document.__next__","title":"<code>__next__()</code>","text":"<p>Get the next index to export the document.</p> <p>Returns: The next index to export the document.</p>"},{"location":"reference/#kernpy.Document.add_document","title":"<code>add_document(other)</code>","text":"<p>Concatenate one document to the current document: Mutates the current object!</p> <p>Parameters:</p> Name Type Description Default <code>other</code> <code>Document</code> <p>The document to concatenate.</p> required <p>Returns: None</p>"},{"location":"reference/#kernpy.Document.append_spines","title":"<code>append_spines(spines)</code>","text":"<pre><code>    Append the spines directly to current document tree.\n\n    Args:\n        spines(list): A list of spines to append.\n\n    Returns: None\n\n    Examples:\n        &gt;&gt;&gt; import kernpy as kp\n        &gt;&gt;&gt; doc, _ = kp.read('score.krn')\n        &gt;&gt;&gt; spines = [\n        &gt;&gt;&gt; '4e     4f      4g      4a\n</code></pre> <p>4b      4c      4d      4e =       =       =       = ',             &gt;&gt;&gt; '4c     4d      4e      4f 4g      4a      4b      4c =       =       =       = ',            &gt;&gt;&gt; ]            &gt;&gt;&gt; doc.append_spines(spines)            None</p>"},{"location":"reference/#kernpy.Document.clone","title":"<code>clone()</code>","text":"<p>Create a deep copy of the Document instance.</p> <p>Returns: A new instance of Document with the tree copied.</p>"},{"location":"reference/#kernpy.Document.frequencies","title":"<code>frequencies(token_categories=None)</code>","text":"<p>Frequency of tokens in the document.</p> <p>Parameters:</p> Name Type Description Default <code>token_categories</code> <code>Optional[Sequence[TokenCategory]]</code> <p>If None, all tokens are considered.</p> <code>None</code> <p>Returns (Dict):     A dictionary with the frequency of each token.</p>"},{"location":"reference/#kernpy.Document.get_all_tokens","title":"<code>get_all_tokens(filter_by_categories=None)</code>","text":"<p>Parameters:</p> Name Type Description Default <code>filter_by_categories</code> <code>Optional[Sequence[TokenCategory]]</code> <p>A list of categories to filter the tokens. If None, all tokens are returned.</p> <code>None</code> <p>Returns:</p> Type Description <code>List[AbstractToken]</code> <p>List[AbstractToken] - A list of all tokens.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; tokens = document.get_all_tokens()\n&gt;&gt;&gt; Document.tokens_to_encodings(tokens)\n&gt;&gt;&gt; [type(t) for t in tokens]\n[&lt;class 'kernpy.core.token.Token'&gt;, &lt;class 'kernpy.core.token.Token'&gt;, &lt;class 'kernpy.core.token.Token'&gt;]\n</code></pre>"},{"location":"reference/#kernpy.Document.get_all_tokens_encodings","title":"<code>get_all_tokens_encodings(filter_by_categories=None)</code>","text":"<p>Parameters:</p> Name Type Description Default <code>filter_by_categories</code> <code>Optional[Sequence[TokenCategory]]</code> <p>A list of categories to filter the tokens. If None, all tokens are returned.</p> <code>None</code> <p>Returns:</p> Type Description <code>List[str]</code> <p>list[str] - A list of all token encodings.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; tokens = document.get_all_tokens_encodings()\n&gt;&gt;&gt; Document.tokens_to_encodings(tokens)\n['!!!COM: Coltrane', '!!!voices: 1', '!!!OPR: Blue Train']\n</code></pre>"},{"location":"reference/#kernpy.Document.get_first_measure","title":"<code>get_first_measure()</code>","text":"<p>Get the index of the first measure of the document.</p> <p>Returns: (Int) The index of the first measure of the document.</p> <p>Raises: Exception - If the document has no measures.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; import kernpy as kp\n&gt;&gt;&gt; document, err = kp.read('score.krn')\n&gt;&gt;&gt; document.get_first_measure()\n1\n</code></pre>"},{"location":"reference/#kernpy.Document.get_header_nodes","title":"<code>get_header_nodes()</code>","text":"<p>Get the header nodes of the current document.</p> <p>Returns: List[HeaderToken]: A list with the header nodes of the current document.</p>"},{"location":"reference/#kernpy.Document.get_header_stage","title":"<code>get_header_stage()</code>","text":"<p>Get the Node list of the header stage.</p> <p>Returns: (Union[List[Node], List[List[Node]]]) The Node list of the header stage.</p> <p>Raises: Exception - If the document has no header stage.</p>"},{"location":"reference/#kernpy.Document.get_leaves","title":"<code>get_leaves()</code>","text":"<p>Get the leaves of the tree.</p> <p>Returns: (List[Node]) The leaves of the tree.</p>"},{"location":"reference/#kernpy.Document.get_metacomments","title":"<code>get_metacomments(KeyComment=None, clear=False)</code>","text":"<p>Get all metacomments in the document</p> <p>Parameters:</p> Name Type Description Default <code>KeyComment</code> <code>Optional[str]</code> <p>Filter by a specific metacomment key: e.g. Use 'COM' to get only comments starting with                '!!!COM: '. If None, all metacomments are returned.</p> <code>None</code> <code>clear</code> <code>bool</code> <p>If True, the metacomment key is removed from the comment. E.g. '!!!COM: Coltrane' -&gt; 'Coltrane'.                If False, the metacomment key is kept. E.g. '!!!COM: Coltrane' -&gt; '!!!COM: Coltrane'.                 The clear functionality is equivalent to the following code:</p> <pre><code>comment = '!!!COM: Coltrane'\nclean_comment = comment.replace(f\"!!!{KeyComment}: \", \"\")\n</code></pre> <p>Other formats are not supported.</p> <code>False</code> <p>Returns: A list of metacomments.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; document.get_metacomments()\n['!!!COM: Coltrane', '!!!voices: 1', '!!!OPR: Blue Train']\n&gt;&gt;&gt; document.get_metacomments(KeyComment='COM')\n['!!!COM: Coltrane']\n&gt;&gt;&gt; document.get_metacomments(KeyComment='COM', clear=True)\n['Coltrane']\n&gt;&gt;&gt; document.get_metacomments(KeyComment='non_existing_key')\n[]\n</code></pre>"},{"location":"reference/#kernpy.Document.get_spine_count","title":"<code>get_spine_count()</code>","text":"<p>Get the number of spines in the document.</p> <p>Returns (int): The number of spines in the document.</p>"},{"location":"reference/#kernpy.Document.get_spine_ids","title":"<code>get_spine_ids()</code>","text":"<p>Get the indexes of the current document.</p> <p>Returns List[int]: A list with the indexes of the current document.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; document.get_all_spine_indexes()\n[0, 1, 2, 3, 4]\n</code></pre>"},{"location":"reference/#kernpy.Document.get_unique_token_encodings","title":"<code>get_unique_token_encodings(filter_by_categories=None)</code>","text":"<p>Get unique token encodings.</p> <p>Parameters:</p> Name Type Description Default <code>filter_by_categories</code> <code>Optional[Sequence[TokenCategory]]</code> <p>A list of categories to filter the tokens. If None, all tokens are returned.</p> <code>None</code> <p>Returns: List[str] - A list of unique token encodings.</p>"},{"location":"reference/#kernpy.Document.get_unique_tokens","title":"<code>get_unique_tokens(filter_by_categories=None)</code>","text":"<p>Get unique tokens.</p> <p>Parameters:</p> Name Type Description Default <code>filter_by_categories</code> <code>Optional[Sequence[TokenCategory]]</code> <p>A list of categories to filter the tokens. If None, all tokens are returned.</p> <code>None</code> <p>Returns:</p> Type Description <code>List[AbstractToken]</code> <p>List[AbstractToken] - A list of unique tokens.</p>"},{"location":"reference/#kernpy.Document.get_voices","title":"<code>get_voices(clean=False)</code>","text":"<p>Get the voices of the document.</p> <p>Args     clean (bool): Remove the first '!' from the voice name.</p> <p>Returns: A list of voices.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; document.get_voices()\n['!sax', '!piano', '!bass']\n&gt;&gt;&gt; document.get_voices(clean=True)\n['sax', 'piano', 'bass']\n&gt;&gt;&gt; document.get_voices(clean=False)\n['!sax', '!piano', '!bass']\n</code></pre>"},{"location":"reference/#kernpy.Document.measures_count","title":"<code>measures_count()</code>","text":"<p>Get the index of the last measure of the document.</p> <p>Returns: (Int) The index of the last measure of the document.</p> <p>Raises: Exception - If the document has no measures.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; document, _ = kernpy.read('score.krn')\n&gt;&gt;&gt; document.measures_count()\n10\n&gt;&gt;&gt; for i in range(document.get_first_measure(), document.measures_count() + 1):\n&gt;&gt;&gt;   options = kernpy.ExportOptions(from_measure=i, to_measure=i+4)\n</code></pre>"},{"location":"reference/#kernpy.Document.split","title":"<code>split()</code>","text":"<p>Split the current document into a list of documents, one for each kern spine. Each resulting document will contain one kern spine along with all non-kern spines.</p> <p>Returns:</p> Type Description <code>List[Document]</code> <p>List['Document']: A list of documents, where each document contains one **kern spine</p> <code>List[Document]</code> <p>and all non-kern spines from the original document.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; document.split()\n[&lt;Document: score.krn&gt;, &lt;Document: score.krn&gt;, &lt;Document: score.krn&gt;]\n</code></pre>"},{"location":"reference/#kernpy.Document.to_concat","title":"<code>to_concat(first_doc, second_doc, deep_copy=True)</code>  <code>classmethod</code>","text":"<p>Concatenate two documents.</p> <p>Parameters:</p> Name Type Description Default <code>first_doc</code> <code>Document</code> <p>The first document.</p> required <code>second_doc</code> <code>Document</code> <p>The second document.</p> required <code>deep_copy</code> <code>bool</code> <p>If True, the documents are deep copied. If False, the documents are shallow copied.</p> <code>True</code> <p>Returns: A new instance of Document with the documents concatenated.</p>"},{"location":"reference/#kernpy.Document.tokens_to_encodings","title":"<code>tokens_to_encodings(tokens)</code>  <code>classmethod</code>","text":"<p>Get the encodings of a list of tokens.</p> The method is equivalent to the following code <p>tokens = kp.get_all_tokens() [token.encoding for token in tokens if token.encoding is not None]</p> <p>Parameters:</p> Name Type Description Default <code>tokens</code> <code>Sequence[AbstractToken]</code> <p>list - A list of tokens.</p> required <p>Returns: List[str] - A list of token encodings.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; tokens = document.get_all_tokens()\n&gt;&gt;&gt; Document.tokens_to_encodings(tokens)\n['!!!COM: Coltrane', '!!!voices: 1', '!!!OPR: Blue Train']\n</code></pre>"},{"location":"reference/#kernpy.Duration","title":"<code>Duration</code>","text":"<p>               Bases: <code>ABC</code></p> <p>Represents the duration of a note or a rest.</p> <p>The duration is represented using the Humdrum Kern format. The duration is a number that represents the number of units of the duration.</p> <p>The duration of a whole note is 1, half note is 2, quarter note is 4, eighth note is 8, etc.</p> <p>The duration of a note is represented by a number. The duration of a rest is also represented by a number.</p> <p>This class do not limit the duration ranges.</p> <p>In the following example, the duration is represented by the number '2'.</p> <pre><code>**kern\n*clefG2\n2c          // whole note\n4c          // half note\n8c          // quarter note\n16c         // eighth note\n*-\n</code></pre>"},{"location":"reference/#kernpy.DurationClassical","title":"<code>DurationClassical</code>","text":"<p>               Bases: <code>Duration</code></p> <p>Represents the duration in classical notation of a note or a rest.</p>"},{"location":"reference/#kernpy.DurationClassical.__eq__","title":"<code>__eq__(other)</code>","text":"<p>Compare two durations.</p> <p>Parameters:</p> Name Type Description Default <code>other</code> <code>DurationClassical</code> <p>The other duration to compare</p> required <p>Returns (bool): True if the durations are equal, False otherwise</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; duration = DurationClassical(2)\n&gt;&gt;&gt; duration2 = DurationClassical(2)\n&gt;&gt;&gt; duration == duration2\nTrue\n&gt;&gt;&gt; duration = DurationClassical(2)\n&gt;&gt;&gt; duration2 = DurationClassical(4)\n&gt;&gt;&gt; duration == duration2\nFalse\n</code></pre>"},{"location":"reference/#kernpy.DurationClassical.__ge__","title":"<code>__ge__(other)</code>","text":"<p>Compare two durations.</p> <p>Parameters:</p> Name Type Description Default <code>other</code> <code>DurationClassical</code> <p>The other duration to compare</p> required <p>Returns (bool):     True if this duration is higher or equal than the other, False otherwise</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; duration = DurationClassical(2)\n&gt;&gt;&gt; duration2 = DurationClassical(4)\n&gt;&gt;&gt; duration &gt;= duration2\nFalse\n&gt;&gt;&gt; duration = DurationClassical(4)\n&gt;&gt;&gt; duration2 = DurationClassical(2)\n&gt;&gt;&gt; duration &gt;= duration2\nTrue\n&gt;&gt;&gt; duration = DurationClassical(4)\n&gt;&gt;&gt; duration2 = DurationClassical(4)\n&gt;&gt;&gt; duration &gt;= duration2\nTrue\n</code></pre>"},{"location":"reference/#kernpy.DurationClassical.__gt__","title":"<code>__gt__(other)</code>","text":"<p>Compare two durations.</p> <p>Parameters:</p> Name Type Description Default <code>other</code> <code>DurationClassical</code> <p>The other duration to compare</p> required <p>Returns (bool):     True if this duration is higher than the other, False otherwise</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; duration = DurationClassical(2)\n&gt;&gt;&gt; duration2 = DurationClassical(4)\n&gt;&gt;&gt; duration &gt; duration2\nFalse\n&gt;&gt;&gt; duration = DurationClassical(4)\n&gt;&gt;&gt; duration2 = DurationClassical(2)\n&gt;&gt;&gt; duration &gt; duration2\nTrue\n&gt;&gt;&gt; duration = DurationClassical(4)\n&gt;&gt;&gt; duration2 = DurationClassical(4)\n&gt;&gt;&gt; duration &gt; duration2\nFalse\n</code></pre>"},{"location":"reference/#kernpy.DurationClassical.__init__","title":"<code>__init__(duration)</code>","text":"<p>Create a new Duration object.</p> <p>Parameters:</p> Name Type Description Default <code>duration</code> <code>str</code> <p>duration representation in Humdrum Kern format</p> required <p>Examples:</p> <pre><code>&gt;&gt;&gt; duration = DurationClassical(2)\nTrue\n&gt;&gt;&gt; duration = DurationClassical(4)\nTrue\n&gt;&gt;&gt; duration = DurationClassical(32)\nTrue\n&gt;&gt;&gt; duration = DurationClassical(1)\nTrue\n&gt;&gt;&gt; duration = DurationClassical(0)\nFalse\n&gt;&gt;&gt; duration = DurationClassical(-2)\nFalse\n&gt;&gt;&gt; duration = DurationClassical(3)\nFalse\n&gt;&gt;&gt; duration = DurationClassical(7)\nFalse\n</code></pre>"},{"location":"reference/#kernpy.DurationClassical.__le__","title":"<code>__le__(other)</code>","text":"<p>Compare two durations.</p> <p>Parameters:</p> Name Type Description Default <code>other</code> <code>DurationClassical</code> <p>The other duration to compare</p> required <p>Returns:</p> Type Description <code>bool</code> <p>True if this duration is lower or equal than the other, False otherwise</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; duration = DurationClassical(2)\n&gt;&gt;&gt; duration2 = DurationClassical(4)\n&gt;&gt;&gt; duration &lt;= duration2\nTrue\n&gt;&gt;&gt; duration = DurationClassical(4)\n&gt;&gt;&gt; duration2 = DurationClassical(2)\n&gt;&gt;&gt; duration &lt;= duration2\nFalse\n&gt;&gt;&gt; duration = DurationClassical(4)\n&gt;&gt;&gt; duration2 = DurationClassical(4)\n&gt;&gt;&gt; duration &lt;= duration2\nTrue\n</code></pre>"},{"location":"reference/#kernpy.DurationClassical.__lt__","title":"<code>__lt__(other)</code>","text":"<p>Compare two durations.</p> <p>Parameters:</p> Name Type Description Default <code>other</code> <code>DurationClassical</code> <p>The other duration to compare</p> required <p>Returns (bool):     True if this duration is lower than the other, False otherwise</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; duration = DurationClassical(2)\n&gt;&gt;&gt; duration2 = DurationClassical(4)\n&gt;&gt;&gt; duration &lt; duration2\nTrue\n&gt;&gt;&gt; duration = DurationClassical(4)\n&gt;&gt;&gt; duration2 = DurationClassical(2)\n&gt;&gt;&gt; duration &lt; duration2\nFalse\n&gt;&gt;&gt; duration = DurationClassical(4)\n&gt;&gt;&gt; duration2 = DurationClassical(4)\n&gt;&gt;&gt; duration &lt; duration2\nFalse\n</code></pre>"},{"location":"reference/#kernpy.DurationClassical.__ne__","title":"<code>__ne__(other)</code>","text":"<p>Compare two durations.</p> <p>Parameters:</p> Name Type Description Default <code>other</code> <code>DurationClassical</code> <p>The other duration to compare</p> required <p>Returns (bool):     True if the durations are different, False otherwise</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; duration = DurationClassical(2)\n&gt;&gt;&gt; duration2 = DurationClassical(2)\n&gt;&gt;&gt; duration != duration2\nFalse\n&gt;&gt;&gt; duration = DurationClassical(2)\n&gt;&gt;&gt; duration2 = DurationClassical(4)\n&gt;&gt;&gt; duration != duration2\nTrue\n</code></pre>"},{"location":"reference/#kernpy.DurationClassical.modify","title":"<code>modify(ratio)</code>","text":"<p>Modify the duration of a note or a rest of the current object.</p> <p>Parameters:</p> Name Type Description Default <code>ratio</code> <code>int</code> <p>The factor to modify the duration. The factor must be greater than 0.</p> required <p>Returns (DurationClassical): The new duration object with the modified duration.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; duration = DurationClassical(2)\n&gt;&gt;&gt; new_duration = duration.modify(2)\n&gt;&gt;&gt; new_duration.duration\n4\n&gt;&gt;&gt; duration = DurationClassical(2)\n&gt;&gt;&gt; new_duration = duration.modify(0)\nTraceback (most recent call last):\n...\nValueError: Invalid factor provided: 0. The factor must be greater than 0.\n&gt;&gt;&gt; duration = DurationClassical(2)\n&gt;&gt;&gt; new_duration = duration.modify(-2)\nTraceback (most recent call last):\n...\nValueError: Invalid factor provided: -2. The factor must be greater than 0.\n</code></pre>"},{"location":"reference/#kernpy.DurationMensural","title":"<code>DurationMensural</code>","text":"<p>               Bases: <code>Duration</code></p> <p>Represents the duration in mensural notation of a note or a rest.</p>"},{"location":"reference/#kernpy.ExportOptions","title":"<code>ExportOptions</code>","text":"<p><code>ExportOptions</code> class.</p> <p>Store the options to export a **kern file.</p>"},{"location":"reference/#kernpy.ExportOptions.__eq__","title":"<code>__eq__(other)</code>","text":"<p>Compare two ExportOptions objects.</p> <p>Parameters:</p> Name Type Description Default <code>other</code> <code>ExportOptions</code> <p>The other ExportOptions object to compare.</p> required <p>Returns (bool):     True if the objects are equal, False otherwise.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; options1 = ExportOptions(spine_types=['**kern'], token_categories=BEKERN_CATEGORIES)\n&gt;&gt;&gt; options2 = ExportOptions(spine_types=['**kern'], token_categories=BEKERN_CATEGORIES)\n&gt;&gt;&gt; options1 == options2\nTrue\n</code></pre> <pre><code>&gt;&gt;&gt; options3 = ExportOptions(spine_types=['**kern', '**harm'], token_categories=BEKERN_CATEGORIES)\n&gt;&gt;&gt; options1 == options3\nFalse\n</code></pre>"},{"location":"reference/#kernpy.ExportOptions.__init__","title":"<code>__init__(spine_types=None, token_categories=None, from_measure=None, to_measure=None, kern_type=KernTypeExporter.normalizedKern, instruments=None, show_measure_numbers=False, spine_ids=None)</code>","text":"<p>Create a new ExportOptions object.</p> <p>Parameters:</p> Name Type Description Default <code>spine_types</code> <code>Iterable</code> <p>kern, mens, etc...</p> <code>None</code> <code>token_categories</code> <code>Iterable</code> <p>TokenCategory</p> <code>None</code> <code>from_measure</code> <code>int</code> <p>The measure to start exporting. When None, the exporter will start from the beginning of the file. The first measure is 1</p> <code>None</code> <code>to_measure</code> <code>int</code> <p>The measure to end exporting. When None, the exporter will end at the end of the file.</p> <code>None</code> <code>kern_type</code> <code>KernTypeExporter</code> <p>The type of the kern file to export.</p> <code>normalizedKern</code> <code>instruments</code> <code>Iterable</code> <p>The instruments to export. When None, all the instruments will be exported.</p> <code>None</code> <code>show_measure_numbers</code> <code>Bool</code> <p>Show the measure numbers in the exported file.</p> <code>False</code> <code>spine_ids</code> <code>Iterable</code> <p>The ids of the spines to export. When None, all the spines will be exported. Spines ids start from 0 and they are increased by 1.</p> <code>None</code> Example <p>import kernpy</p> <p>Create the importer and read the file</p> <p>hi = Importer() document = hi.import_file('file.krn') exporter = Exporter()</p> <p>Export the file with the specified options</p> <p>options = ExportOptions(spine_types=['**kern'], token_categories=BEKERN_CATEGORIES) exported_data = exporter.export_string(document, options)</p> <p>Export only the lyrics</p> <p>options = ExportOptions(spine_types=['**kern'], token_categories=[TokenCategory.LYRICS]) exported_data = exporter.export_string(document, options)</p> <p>Export the comments</p> <p>options = ExportOptions(spine_types=['**kern'], token_categories=[TokenCategory.LINE_COMMENTS, TokenCategory.FIELD_COMMENTS]) exported_data = exporter.export_string(document, options)</p> <p>Export using the eKern version</p> <p>options = ExportOptions(spine_types=['**kern'], token_categories=BEKERN_CATEGORIES, kern_type=KernTypeExporter.eKern) exported_data = exporter.export_string(document, options)</p>"},{"location":"reference/#kernpy.ExportOptions.__ne__","title":"<code>__ne__(other)</code>","text":"<p>Compare two ExportOptions objects.</p> <p>Parameters:</p> Name Type Description Default <code>other</code> <code>ExportOptions</code> <p>The other ExportOptions object to compare.</p> required <p>Returns (bool):     True if the objects are not equal, False otherwise.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; options1 = ExportOptions(spine_types=['**kern'], token_categories=BEKERN_CATEGORIES)\n&gt;&gt;&gt; options2 = ExportOptions(spine_types=['**kern'], token_categories=BEKERN_CATEGORIES)\n&gt;&gt;&gt; options1 != options2\nFalse\n</code></pre> <pre><code>&gt;&gt;&gt; options3 = ExportOptions(spine_types=['**kern', '**harm'], token_categories=BEKERN_CATEGORIES)\n&gt;&gt;&gt; options1 != options3\nTrue\n</code></pre>"},{"location":"reference/#kernpy.Exporter","title":"<code>Exporter</code>","text":""},{"location":"reference/#kernpy.Exporter.append_row","title":"<code>append_row(document, node, options, row)</code>","text":"<p>Append a row to the row list if the node accomplishes the requirements. Args:     document (Document): The document with the spines.     node (Node): The node to append.     options (ExportOptions): The export options to filter the token.     row (list): The row to append.</p> <p>Returns (bool): True if the row was appended. False if the row was not appended.</p>"},{"location":"reference/#kernpy.Exporter.compute_header_type","title":"<code>compute_header_type(node)</code>","text":"<p>Compute the header type of the node.</p> <p>Parameters:</p> Name Type Description Default <code>node</code> <code>Node</code> <p>The node to compute.</p> required <p>Returns (Optional[Token]): The header type <code>Node</code>object. None if the current node is the header.</p>"},{"location":"reference/#kernpy.Exporter.export_options_validator","title":"<code>export_options_validator(document, options)</code>  <code>staticmethod</code>","text":"<p>Validate the export options. Raise an exception if the options are invalid.</p> <p>Parameters:</p> Name Type Description Default <code>document</code> <code>Document</code> <p><code>Document</code> - The document to export.</p> required <code>options</code> <code>ExportOptions</code> <p><code>ExportOptions</code> - The options to export the document.</p> required <p>Returns: None</p> Example <p>export_options_validator(document, options) ValueError: option from_measure must be &gt;=0 but -1 was found. export_options_validator(document, options2) None</p>"},{"location":"reference/#kernpy.Exporter.get_spine_types","title":"<code>get_spine_types(document, spine_types=None)</code>","text":"<p>Get the spine types from the document.</p> <p>Parameters:</p> Name Type Description Default <code>document</code> <code>Document</code> <p>The document with the spines.</p> required <code>spine_types</code> <code>list</code> <p>The spine types to export. If None, all the spine types will be exported.</p> <code>None</code> <p>Returns: A list with the spine types.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; exporter = Exporter()\n&gt;&gt;&gt; exporter.get_spine_types(document)\n['**kern', '**kern', '**kern', '**kern', '**root', '**harm']\n&gt;&gt;&gt; exporter.get_spine_types(document, None)\n['**kern', '**kern', '**kern', '**kern', '**root', '**harm']\n&gt;&gt;&gt; exporter.get_spine_types(document, ['**kern'])\n['**kern', '**kern', '**kern', '**kern']\n&gt;&gt;&gt; exporter.get_spine_types(document, ['**kern', '**root'])\n['**kern', '**kern', '**kern', '**kern', '**root']\n&gt;&gt;&gt; exporter.get_spine_types(document, ['**kern', '**root', '**harm'])\n['**kern', '**kern', '**kern', '**kern', '**root', '**harm']\n&gt;&gt;&gt; exporter.get_spine_types(document, [])\n[]\n</code></pre>"},{"location":"reference/#kernpy.Importer","title":"<code>Importer</code>","text":"<p>Importer class.</p> <p>Use this class to import the content from a file or a string to a <code>Document</code> object.</p>"},{"location":"reference/#kernpy.Importer.__init__","title":"<code>__init__()</code>","text":"<pre><code>    Create an instance of the importer.\n\n    Raises:\n        Exception: If the importer content is not a valid **kern file.\n\n    Examples:\n        # Create the importer\n        &gt;&gt;&gt; importer = Importer()\n\n        # Import the content from a file\n        &gt;&gt;&gt; document = importer.import_file('file.krn')\n\n        # Import the content from a string\n        &gt;&gt;&gt; document = importer.import_string(\"**kern\n</code></pre> <p>clefF4 c4 4d 4e 4f -\")</p>"},{"location":"reference/#kernpy.Importer.get_error_messages","title":"<code>get_error_messages()</code>","text":"<p>Get the error messages of the importer.</p> <p>Returns: str - The error messages split by a new line character.</p> <p>Examples:</p>"},{"location":"reference/#kernpy.Importer.get_error_messages--create-the-importer-and-read-the-file","title":"Create the importer and read the file","text":"<pre><code>&gt;&gt;&gt; importer = Importer()\n&gt;&gt;&gt; importer.import_file(Path('file.krn'))\n&gt;&gt;&gt; print(importer.get_error_messages())\n'Error: Invalid token in row 1'\n</code></pre>"},{"location":"reference/#kernpy.Importer.has_errors","title":"<code>has_errors()</code>","text":"<p>Check if the importer has any errors.</p> <p>Returns: bool - True if the importer has errors, False otherwise.</p> <p>Examples:</p>"},{"location":"reference/#kernpy.Importer.has_errors--create-the-importer-and-read-the-file","title":"Create the importer and read the file","text":"<pre><code>&gt;&gt;&gt; importer = Importer()\n&gt;&gt;&gt; importer.import_file(Path('file.krn'))    # file.krn has an error\n&gt;&gt;&gt; print(importer.has_errors())\nTrue\n&gt;&gt;&gt; importer.import_file(Path('file2.krn'))   # file2.krn has no errors\n&gt;&gt;&gt; print(importer.has_errors())\nFalse\n</code></pre>"},{"location":"reference/#kernpy.Importer.import_file","title":"<code>import_file(file_path)</code>","text":"<p>Import the content from the importer to the file. Args:     file_path: The path to the file.</p> <p>Returns:</p> Type Description <code>Document</code> <p>Document - The document with the imported content.</p> <p>Examples:</p>"},{"location":"reference/#kernpy.Importer.import_file--create-the-importer-and-read-the-file","title":"Create the importer and read the file","text":"<pre><code>&gt;&gt;&gt; importer = Importer()\n&gt;&gt;&gt; importer.import_file('file.krn')\n</code></pre>"},{"location":"reference/#kernpy.Importer.import_string","title":"<code>import_string(text)</code>","text":"<pre><code>    Import the content from the content of the score in string format.\n\n    Args:\n        text: The content of the score in string format.\n\n    Returns:\n        Document - The document with the imported content.\n\n    Examples:\n        # Create the importer and read the file\n        &gt;&gt;&gt; importer = Importer()\n        &gt;&gt;&gt; importer.import_string(\"**kern\n</code></pre> <p>clefF4 c4 4d 4e 4f -\")             # Read the content from a file             &gt;&gt;&gt; with open('file.krn',  'r', newline='', encoding='utf-8', errors='ignore') as f: # We encourage you to use these open file options             &gt;&gt;&gt;     content = f.read()             &gt;&gt;&gt; importer.import_string(content)             &gt;&gt;&gt; document = importer.import_string(content)</p>"},{"location":"reference/#kernpy.KernTypeExporter","title":"<code>KernTypeExporter</code>","text":"<p>               Bases: <code>Enum</code></p> <p>Options for exporting a kern file.</p> Example"},{"location":"reference/#kernpy.KernTypeExporter--create-the-importer","title":"Create the importer","text":"<p>hi = Importer()</p>"},{"location":"reference/#kernpy.KernTypeExporter--read-the-file","title":"Read the file","text":"<p>document = hi.import_file('file.krn')</p>"},{"location":"reference/#kernpy.KernTypeExporter--export-the-file","title":"Export the file","text":"<p>options = ExportOptions(spine_types=['**kern'], token_categories=BEKERN_CATEGORIES, kernType=KernTypeExporter.normalizedKern) exporter = Exporter() exported = exporter.export_string(options)</p>"},{"location":"reference/#kernpy.PitchRest","title":"<code>PitchRest</code>","text":"<p>Represents a name or a rest in a note.</p> <p>The name is represented using the International Standard Organization (ISO) name notation. The first line below the staff is the C4 in G clef. The above C is C5, the below C is C3, etc.</p> <p>The Humdrum Kern format uses the following name representation: 'c' = C4 'cc' = C5 'ccc' = C6 'cccc' = C7</p> <p>'C' = C3 'CC' = C2 'CCC' = C1</p> <p>The rests are represented by the letter 'r'. The rests do not have name.</p> <p>This class do not limit the name ranges.</p> <p>In the following example, the name is represented by the letter 'c'. The name of 'c' is C4, 'cc' is C5, 'ccc' is C6.</p> <pre><code>**kern\n*clefG2\n2c          // C4\n2cc         // C5\n2ccc        // C6\n2C          // C3\n2CC         // C2\n2CCC        // C1\n*-\n</code></pre>"},{"location":"reference/#kernpy.PitchRest.__eq__","title":"<code>__eq__(other)</code>","text":"<p>Compare two pitches and rests.</p> <p>Parameters:</p> Name Type Description Default <code>other</code> <code>PitchRest</code> <p>The other name to compare</p> required <p>Returns (bool):     True if the pitches are equal, False otherwise</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; pitch_rest = PitchRest('c')\n&gt;&gt;&gt; pitch_rest2 = PitchRest('c')\n&gt;&gt;&gt; pitch_rest == pitch_rest2\nTrue\n&gt;&gt;&gt; pitch_rest = PitchRest('c')\n&gt;&gt;&gt; pitch_rest2 = PitchRest('ccc')\n&gt;&gt;&gt; pitch_rest == pitch_rest2\nFalse\n&gt;&gt;&gt; pitch_rest = PitchRest('c')\n&gt;&gt;&gt; pitch_rest2 = PitchRest('r')\n&gt;&gt;&gt; pitch_rest == pitch_rest2\nFalse\n&gt;&gt;&gt; pitch_rest = PitchRest('r')\n&gt;&gt;&gt; pitch_rest2 = PitchRest('r')\n&gt;&gt;&gt; pitch_rest == pitch_rest2\nTrue\n</code></pre>"},{"location":"reference/#kernpy.PitchRest.__ge__","title":"<code>__ge__(other)</code>","text":"<p>Compare two pitches. If any of the PitchRest is a rest, the comparison raise an exception. Args:     other (PitchRest): The other name to compare</p> <p>Returns (bool):     True if this name is higher or equal than the other, False otherwise</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; pitch_rest = PitchRest('c')\n&gt;&gt;&gt; pitch_rest2 = PitchRest('d')\n&gt;&gt;&gt; pitch_rest &gt;= pitch_rest2\nFalse\n&gt;&gt;&gt; pitch_rest = PitchRest('c')\n&gt;&gt;&gt; pitch_rest2 = PitchRest('c')\n&gt;&gt;&gt; pitch_rest &gt;= pitch_rest2\nTrue\n&gt;&gt;&gt; pitch_rest = PitchRest('c')\n&gt;&gt;&gt; pitch_rest2 = PitchRest('b')\n&gt;&gt;&gt; pitch_rest &gt;= pitch_rest2\nTrue\n&gt;&gt;&gt; pitch_rest = PitchRest('r')\n&gt;&gt;&gt; pitch_rest2 = PitchRest('c')\n&gt;&gt;&gt; pitch_rest &gt;= pitch_rest2\nTraceback (most recent call last):\n...\nValueError: ...\n&gt;&gt;&gt; pitch_rest = PitchRest('r')\n&gt;&gt;&gt; pitch_rest2 = PitchRest('r')\n&gt;&gt;&gt; pitch_rest &gt;= pitch_rest2\nTraceback (most recent call last):\n...\nValueError: ...\n</code></pre>"},{"location":"reference/#kernpy.PitchRest.__gt__","title":"<code>__gt__(other)</code>","text":"<p>Compare two pitches.</p> <p>If any of the pitches is a rest, the comparison raise an exception.</p> <p>Parameters:</p> Name Type Description Default <code>other</code> <code>PitchRest</code> <p>The other name to compare</p> required <p>Returns (bool): True if this name is higher than the other, False otherwise</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; pitch_rest = PitchRest('c')\n&gt;&gt;&gt; pitch_rest2 = PitchRest('d')\n&gt;&gt;&gt; pitch_rest &gt; pitch_rest2\nFalse\n&gt;&gt;&gt; pitch_rest = PitchRest('c')\n&gt;&gt;&gt; pitch_rest2 = PitchRest('c')\n&gt;&gt;&gt; pitch_rest &gt; pitch_rest2\nFalse\n&gt;&gt;&gt; pitch_rest = PitchRest('c')\n&gt;&gt;&gt; pitch_rest2 = PitchRest('b')\n&gt;&gt;&gt; pitch_rest &gt; pitch_rest2\nTrue\n&gt;&gt;&gt; pitch_rest = PitchRest('r')\n&gt;&gt;&gt; pitch_rest2 = PitchRest('c')\n&gt;&gt;&gt; pitch_rest &gt; pitch_rest2\nTraceback (most recent call last):\n...\nValueError: ...\n&gt;&gt;&gt; pitch_rest = PitchRest('r')\n&gt;&gt;&gt; pitch_rest2 = PitchRest('r')\n&gt;&gt;&gt; pitch_rest &gt; pitch_rest2\nTraceback (most recent call last):\nValueError: ...\n</code></pre>"},{"location":"reference/#kernpy.PitchRest.__init__","title":"<code>__init__(raw_pitch)</code>","text":"<p>Create a new PitchRest object.</p> <p>Parameters:</p> Name Type Description Default <code>raw_pitch</code> <code>str</code> <p>name representation in Humdrum Kern format</p> required <p>Examples:</p> <pre><code>&gt;&gt;&gt; pitch_rest = PitchRest('c')\n&gt;&gt;&gt; pitch_rest = PitchRest('r')\n&gt;&gt;&gt; pitch_rest = PitchRest('DDD')\n</code></pre>"},{"location":"reference/#kernpy.PitchRest.__le__","title":"<code>__le__(other)</code>","text":"<p>Compare two pitches. If any of the PitchRest is a rest, the comparison raise an exception. Args:     other (PitchRest): The other name to compare</p> <p>Returns (bool): True if this name is lower or equal than the other, False otherwise</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; pitch_rest = PitchRest('c')\n&gt;&gt;&gt; pitch_rest2 = PitchRest('d')\n&gt;&gt;&gt; pitch_rest &lt;= pitch_rest2\nTrue\n&gt;&gt;&gt; pitch_rest = PitchRest('c')\n&gt;&gt;&gt; pitch_rest2 = PitchRest('c')\n&gt;&gt;&gt; pitch_rest &lt;= pitch_rest2\nTrue\n&gt;&gt;&gt; pitch_rest = PitchRest('c')\n&gt;&gt;&gt; pitch_rest2 = PitchRest('b')\n&gt;&gt;&gt; pitch_rest &lt;= pitch_rest2\nFalse\n&gt;&gt;&gt; pitch_rest = PitchRest('r')\n&gt;&gt;&gt; pitch_rest2 = PitchRest('c')\n&gt;&gt;&gt; pitch_rest &lt;= pitch_rest2\nTraceback (most recent call last):\n...\nValueError: ...\n&gt;&gt;&gt; pitch_rest = PitchRest('r')\n&gt;&gt;&gt; pitch_rest2 = PitchRest('r')\n&gt;&gt;&gt; pitch_rest &lt;= pitch_rest2\nTraceback (most recent call last):\n...\nValueError: ...\n</code></pre>"},{"location":"reference/#kernpy.PitchRest.__lt__","title":"<code>__lt__(other)</code>","text":"<p>Compare two pitches.</p> <p>If any of the pitches is a rest, the comparison raise an exception.</p> <p>Parameters:</p> Name Type Description Default <code>other</code> <code>PitchRest</code> <p>The other name to compare</p> required <p>Returns:</p> Type Description <code>bool</code> <p>True if this name is lower than the other, False otherwise</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; pitch_rest = PitchRest('c')\n&gt;&gt;&gt; pitch_rest2 = PitchRest('d')\n&gt;&gt;&gt; pitch_rest &lt; pitch_rest2\nTrue\n&gt;&gt;&gt; pitch_rest = PitchRest('c')\n&gt;&gt;&gt; pitch_rest2 = PitchRest('c')\n&gt;&gt;&gt; pitch_rest &lt; pitch_rest2\nFalse\n&gt;&gt;&gt; pitch_rest = PitchRest('c')\n&gt;&gt;&gt; pitch_rest2 = PitchRest('b')\n&gt;&gt;&gt; pitch_rest &lt; pitch_rest2\nFalse\n&gt;&gt;&gt; pitch_rest = PitchRest('r')\n&gt;&gt;&gt; pitch_rest2 = PitchRest('c')\n&gt;&gt;&gt; pitch_rest &lt; pitch_rest2\nTraceback (most recent call last):\n...\nValueError: ...\n&gt;&gt;&gt; pitch_rest = PitchRest('r')\n&gt;&gt;&gt; pitch_rest2 = PitchRest('r')\n&gt;&gt;&gt; pitch_rest &lt; pitch_rest2\nTraceback (most recent call last):\n...\nValueError: ...\n</code></pre>"},{"location":"reference/#kernpy.PitchRest.__ne__","title":"<code>__ne__(other)</code>","text":"<p>Compare two pitches and rests. Args:     other (PitchRest): The other name to compare</p> <p>Returns (bool):     True if the pitches are different, False otherwise</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; pitch_rest = PitchRest('c')\n&gt;&gt;&gt; pitch_rest2 = PitchRest('c')\n&gt;&gt;&gt; pitch_rest != pitch_rest2\nFalse\n&gt;&gt;&gt; pitch_rest = PitchRest('c')\n&gt;&gt;&gt; pitch_rest2 = PitchRest('ccc')\n&gt;&gt;&gt; pitch_rest != pitch_rest2\nTrue\n&gt;&gt;&gt; pitch_rest = PitchRest('c')\n&gt;&gt;&gt; pitch_rest2 = PitchRest('r')\n&gt;&gt;&gt; pitch_rest != pitch_rest2\nTrue\n&gt;&gt;&gt; pitch_rest = PitchRest('r')\n&gt;&gt;&gt; pitch_rest2 = PitchRest('r')\n&gt;&gt;&gt; pitch_rest != pitch_rest2\nFalse\n</code></pre>"},{"location":"reference/#kernpy.PitchRest.is_rest","title":"<code>is_rest()</code>","text":"<p>Check if the name is a rest.</p> <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>True if the name is a rest, False otherwise.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; pitch_rest = PitchRest('c')\n&gt;&gt;&gt; pitch_rest.is_rest()\nFalse\n&gt;&gt;&gt; pitch_rest = PitchRest('r')\n&gt;&gt;&gt; pitch_rest.is_rest()\nTrue\n</code></pre>"},{"location":"reference/#kernpy.PitchRest.pitch_comparator","title":"<code>pitch_comparator(pitch_a, pitch_b)</code>  <code>staticmethod</code>","text":"<p>Compare two pitches of the same octave.</p> <p>The lower name is 'a'. So 'a' &lt; 'b' &lt; 'c' &lt; 'd' &lt; 'e' &lt; 'f' &lt; 'g'</p> <p>Parameters:</p> Name Type Description Default <code>pitch_a</code> <code>str</code> <p>One name of 'abcdefg'</p> required <code>pitch_b</code> <code>str</code> <p>Another name of 'abcdefg'</p> required <p>Returns:</p> Type Description <code>int</code> <p>-1 if pitch1 is lower than pitch2</p> <code>int</code> <p>0 if pitch1 is equal to pitch2</p> <code>int</code> <p>1 if pitch1 is higher than pitch2</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; PitchRest.pitch_comparator('c', 'c')\n0\n&gt;&gt;&gt; PitchRest.pitch_comparator('c', 'd')\n-1\n&gt;&gt;&gt; PitchRest.pitch_comparator('d', 'c')\n1\n</code></pre>"},{"location":"reference/#kernpy.SpineOperationToken","title":"<code>SpineOperationToken</code>","text":"<p>               Bases: <code>AbstractToken</code></p> <p>SpineOperationToken class.</p> <p>This token represents different operations in the Humdrum kern encoding. These are the available operations:     - <code>*-</code>:  spine-path terminator.     - <code>*</code>: null interpretation.     - <code>*+</code>: add spines.     - <code>*^</code>: split spines.     - <code>*x</code>: exchange spines.</p> <p>Attributes:</p> Name Type Description <code>cancelled_at_stage</code> <code>int</code> <p>The stage at which the operation was cancelled. Defaults to None.</p>"},{"location":"reference/#kernpy.SpineOperationToken.is_cancelled_at","title":"<code>is_cancelled_at(stage)</code>","text":"<p>Checks if the operation was cancelled at the given stage.</p> <p>Parameters:</p> Name Type Description Default <code>stage</code> <code>int</code> <p>The stage at which the operation was cancelled.</p> required <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>True if the operation was cancelled at the given stage, False otherwise.</p>"},{"location":"reference/#kernpy.TokenCategory","title":"<code>TokenCategory</code>","text":"<p>               Bases: <code>Enum</code></p> <p>Options for the category of a token.</p> <p>This is used to determine what kind of token should be exported.</p>"},{"location":"reference/#kernpy.concat","title":"<code>concat(contents, options, strict=False)</code>","text":"<pre><code>Concatenate multiple **kern strings.\n\nArgs:\n    contents (Sequence[str]): List of **kern strings\n    options (ExportOptions): Export options for the concatenated string\n    strict (Optional[bool]): If True, raise an error if the concatenated string exceeds the maximum length. If False, truncate the concatenated string to the maximum length.\n\nReturns: Concatenated **kern string\n\nExamples:\n    &gt;&gt;&gt; import kernpy as kp\n    &gt;&gt;&gt; contents = ['**kern\n</code></pre> <p>4e 4f 4g - ', 'kern 4a 4b 4c - ']         &gt;&gt;&gt; kp.concat(contents)         'kern 4e 4f 4g *- kern 4a 4b 4c *-'</p>"},{"location":"reference/#kernpy.create","title":"<code>create(content, strict=False)</code>","text":"<pre><code>Create a Document object from a string encoded in Humdrum **kern format.\n\nArgs:\n    content: String encoded in Humdrum **kern format\n    strict: If True, raise an error if the **kern file has any errors. Otherwise, return a list of errors.\n\nReturns (Document, list): Document object and list of error messages. Empty list if no errors.\n\nExamples:\n    &gt;&gt;&gt; import kernpy as kp\n    &gt;&gt;&gt; document, errors = kp.create('**kern\n</code></pre> <p>4e 4f 4g - ')         &gt;&gt;&gt; if len(errors) &gt; 0:         &gt;&gt;&gt;     print(errors)         ['Error: Invalid kern spine: 1', 'Error: Invalid *kern spine: 2']</p>"},{"location":"reference/#kernpy.create_fragments_from_directory","title":"<code>create_fragments_from_directory(input_directory, output_directory, log_file, check_file_extension=True, offset=0, verbose=1, num_processes=None, mean=DEFAULT_MEAN, std_dev=DEFAULT_STD_DEV, export_options=None)</code>","text":"<p>Create a bunch of little kern files from a directory of kern files.</p> <p>Parameters:</p> Name Type Description Default <code>export_options</code> <code>Optional[ExportOptions]</code> <p>The export options</p> <code>None</code> <code>log_file</code> <code>str</code> <p>The log file to store the results</p> required <code>input_directory</code> <code>str</code> <p>The input directory with the kern files</p> required <code>output_directory</code> <code>str</code> <p>The output directory where the fragments will be stored</p> required <code>check_file_extension</code> <code>bool</code> <p>If True, only files with the extension '.krn' will be processed.         If False, all files will be processed, it could be more time-consuming.</p> <code>True</code> <code>offset</code> <code>int</code> <p>The number of measures between fragments.            If offset is 1, and measure_length is 4, the fragments will be: 1-4, 2-5, 3-6, 4-7, ... If the offset is 2, and measure_length is 4, the fragments will be: 1-4, 3-6, 5-8, 7-10, ... If the offset is 4, and measure_length is 4, the fragments will be: 1-4, 5-8, 9-12, 13-16, ...</p> <code>0</code> <code>verbose</code> <code>int</code> <p>The verbosity level</p> <code>1</code> <code>num_processes</code> <code>int</code> <p>The number of processes to use for parallel processing.            If None, or num_processes &lt;= 1, the processing will be done in a single process.</p> <code>None</code> <code>mean</code> <code>float</code> <p>The mean of the normal distribution to generate the measure length of the new fragments</p> <code>DEFAULT_MEAN</code> <code>std_dev</code> <code>float</code> <p>The standard deviation of the normal distribution to generate the measure length of the new fragments</p> <code>DEFAULT_STD_DEV</code> <p>Returns:</p> Type Description <code>None</code> <p>None</p> <p>Examples:</p> <pre><code># Basic execution\n&gt;&gt;&gt; create_fragments_from_directory('input_directory', 'output_directory', log_file='log.txt')\n\n# Custom mean and std_dev\n&gt;&gt;&gt; create_fragments_from_directory('input_directory', 'output_directory', log_file='log.txt', mean=5.2, std_dev=0.8)\n\n# Parallel processing\n&gt;&gt;&gt; create_fragments_from_directory('input_directory', 'output_directory', log_file='log.txt', offset=4, verbose=1, num_processes=8)\n\n# Single process\n&gt;&gt;&gt; create_fragments_from_directory('input_directory', 'output_directory', log_file='log.txt', offset=4, verbose=1)\n</code></pre>"},{"location":"reference/#kernpy.create_fragments_from_kern","title":"<code>create_fragments_from_kern(input_kern_file, output_directory, measure_length, offset, log_file, verbose=1, num_processes=None, export_options=None)</code>","text":"<p>Create a bunch of little kern files from a single kern file.</p> <p>Parameters:</p> Name Type Description Default <code>log_file</code> <code>str</code> <p>The log file to store the results</p> required <code>input_kern_file</code> <code>object</code> <p>The input kern file</p> required <code>output_directory</code> <code>str</code> <p>The output directory where the fragments will be stored</p> required <code>measure_length</code> <code>int</code> <p>The number of measures of the fragments</p> required <code>offset</code> <code>int</code> <p>The number of measures between fragments.            If offset is 1, and measure_length is 4, the fragments will be: 1-4, 2-5, 3-6, 4-7, ... If the offset is 2, and measure_length is 4, the fragments will be: 1-4, 3-6, 5-8, 7-10, ... If the offset is 4, and measure_length is 4, the fragments will be: 1-4, 5-8, 9-12, 13-16, ...</p> required <code>verbose</code> <code>int</code> <p>The verbosity level</p> <code>1</code> <code>num_processes</code> <code>int</code> <p>The number of processes to use for parallel processing.            If None, or num_processes &lt;= 1, the processing will be done in a single process.</p> <code>None</code> <code>export_options(Optional[ExportOptions])</code> <p>The export options</p> required <p>Returns:     None</p> <p>Examples:</p>"},{"location":"reference/#kernpy.create_fragments_from_kern--basic-execution","title":"Basic execution","text":"<pre><code>&gt;&gt;&gt; create_fragments_from_kern('input.krn', 'output_directory', measure_length=4)\n</code></pre>"},{"location":"reference/#kernpy.create_fragments_from_kern--parallel-processing","title":"Parallel processing","text":"<pre><code>&gt;&gt;&gt; create_fragments_from_kern('input.krn', 'output_directory', measure_length=4, offset=4, log_file='log.txt', verbose=1, num_processes=8)\n&gt;&gt;&gt; create_fragments_from_kern('input.krn', 'output_directory', measure_length=4, offset=4, log_file='log.txt', verbose=1, num_processes=8)\n</code></pre>"},{"location":"reference/#kernpy.create_fragments_from_kern--single-process","title":"Single process","text":"<pre><code>&gt;&gt;&gt; create_fragments_from_kern('input.krn', 'output_directory', measure_length=4, offset=4, log_file='log.txt', verbose=1)\n&gt;&gt;&gt; create_fragments_from_kern('input.krn', 'output_directory', measure_length=4, offset=4, log_file='log.txt', verbose=1, num_processes=None)\n</code></pre>"},{"location":"reference/#kernpy.download_polish_scores","title":"<code>download_polish_scores(input_directory, output_directory, remove_empty_directories=True, kern_spines_filter=2, exporter_kern_type='ekern')</code>","text":"<p>Process the files in the input_directory and save the results in the output_directory. http requests are made to download the images.</p> <p>Parameters:</p> Name Type Description Default <code>input_directory</code> <code>str</code> <p>directory where the input files are found</p> required <code>output_directory</code> <code>str</code> <p>directory where the output files are saved</p> required <code>remove_empty_directories</code> <code>Optional[bool]</code> <p>remove empty directories when finish processing the files</p> <code>True</code> <code>kern_spines_filter</code> <code>Optional[int]</code> <p>Only process files with the number of **kern spines specified.            Use it to export 2-voice files. Default is 2.            Use None to process all files.</p> <code>2</code> <code>exporter_kern_type</code> <code>Optional[str]</code> <p>the type of kern exporter. It can be 'krn' or 'ekrn'</p> <code>'ekern'</code> <p>Returns:</p> Type Description <code>None</code> <p>None</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; main('/kern_files', '/output_ekern')\nNone\n</code></pre> <pre><code>&gt;&gt;&gt; main('/kern_files', '/output_ekern', remove_empty_directories=False)\nNone\n</code></pre> <pre><code>&gt;&gt;&gt; main('/kern_files', '/output_ekern', kern_spines_filter=2, remove_empty_directories=False)\nNone\n</code></pre> <pre><code>&gt;&gt;&gt; main('/kern_files', '/output_ekern', kern_spines_filter=None, remove_empty_directories=False)\nNone\n</code></pre> <pre><code>&gt;&gt;&gt; main('/kern_files', '/output_ekern', exporter_kern_type='krn', remove_empty_directories=True)\nNone\n</code></pre> <pre><code>&gt;&gt;&gt; main('/kern_files', '/output_ekern', exporter_kern_type='ekrn', remove_empty_directories=True, kern_spines_filter=2)\nNone\n</code></pre>"},{"location":"reference/#kernpy.ekern_to_krn","title":"<code>ekern_to_krn(input_file, output_file)</code>","text":"<p>Convert one .ekrn file to .krn file.</p> <p>Parameters:</p> Name Type Description Default <code>input_file</code> <code>str</code> <p>Filepath to the input **ekern</p> required <code>output_file</code> <code>str</code> <p>Filepath to the output **kern</p> required <p>Returns:     None</p> Example"},{"location":"reference/#kernpy.ekern_to_krn--convert-ekrn-to-krn","title":"Convert .ekrn to .krn","text":"<p>ekern_to_krn('path/to/file.ekrn', 'path/to/file.krn')</p>"},{"location":"reference/#kernpy.ekern_to_krn--convert-a-list-of-ekrn-files-to-krn-files","title":"Convert a list of .ekrn files to .krn files","text":"<pre><code>ekrn_files = your_modue.get_files()\n\n# Use the wrapper to avoid stopping the process if an error occurs\ndef ekern_to_krn_wrapper(ekern_file, kern_file):\n    try:\n        ekern_to_krn(ekrn_files, output_folder)\n    except Exception as e:\n        print(f'Error:{e}')\n\n# Convert all the files\nfor ekern_file in ekrn_files:\n    output_file = ekern_file.replace('.ekrn', '.krn')\n    ekern_to_krn_wrapper(ekern_file, output_file)\n</code></pre>"},{"location":"reference/#kernpy.export","title":"<code>export(document, options)</code>","text":"<p>Export a Document object to a string.</p> <p>Parameters:</p> Name Type Description Default <code>document</code> <code>Document</code> <p>Document object to export</p> required <code>options</code> <code>ExportOptions</code> <p>Export options</p> required <p>Returns: Exported string</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; import kernpy as kp\n&gt;&gt;&gt; document, errors = kp.read('path/to/file.krn')\n&gt;&gt;&gt; options = kp.ExportOptions()\n&gt;&gt;&gt; content = kp.export(document, options)\n</code></pre>"},{"location":"reference/#kernpy.get_kern_from_ekern","title":"<code>get_kern_from_ekern(ekern_content)</code>","text":"<p>Read the content of a ekern file and return the kern content.</p> <p>Parameters:</p> Name Type Description Default <code>ekern_content</code> <code>str</code> <p>The content of the **ekern file.</p> required <p>Returns:     The content of the **kern file.</p> Example <pre><code># Read **ekern file\nekern_file = 'path/to/file.ekrn'\nwith open(ekern_file, 'r') as file:\n    ekern_content = file.read()\n\n# Get **kern content\nkern_content = get_kern_from_ekern(ekern_content)\nwith open('path/to/file.krn', 'w') as file:\n    file.write(kern_content)\n\n</code></pre>"},{"location":"reference/#kernpy.get_spine_types","title":"<code>get_spine_types(document, spine_types=None)</code>","text":"<p>Get the spines of a Document object.</p> <p>Parameters:</p> Name Type Description Default <code>document</code> <code>Document</code> <p>Document object to get spines from</p> required <code>spine_types</code> <code>Optional[Sequence[str]]</code> <p>List of spine types to get. If None, all spines are returned.</p> <code>None</code> <p>Returns (List[str]): List of spines</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; import kernpy as kp\n&gt;&gt;&gt; document, _ = kp.read('path/to/file.krn')\n&gt;&gt;&gt; kp.get_spine_types(document)\n['**kern', '**kern', '**kern', '**kern', '**root', '**harm']\n&gt;&gt;&gt; kp.get_spine_types(document, None)\n['**kern', '**kern', '**kern', '**kern', '**root', '**harm']\n&gt;&gt;&gt; kp.get_spine_types(document, ['**kern'])\n['**kern', '**kern', '**kern', '**kern']\n&gt;&gt;&gt; kp.get_spine_types(document, ['**kern', '**root'])\n['**kern', '**kern', '**kern', '**kern', '**root']\n&gt;&gt;&gt; kp.get_spine_types(document, ['**kern', '**root', '**harm'])\n['**kern', '**kern', '**kern', '**kern', '**root', '**harm']\n&gt;&gt;&gt; kp.get_spine_types(document, [])\n[]\n</code></pre>"},{"location":"reference/#kernpy.kern_to_ekern","title":"<code>kern_to_ekern(input_file, output_file)</code>","text":"<p>Convert one .krn file to .ekrn file</p> <p>Parameters:</p> Name Type Description Default <code>input_file</code> <code>str</code> <p>Filepath to the input **kern</p> required <code>output_file</code> <code>str</code> <p>Filepath to the output **ekern</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> Example"},{"location":"reference/#kernpy.kern_to_ekern--convert-krn-to-ekrn","title":"Convert .krn to .ekrn","text":"<p>kern_to_ekern('path/to/file.krn', 'path/to/file.ekrn')</p>"},{"location":"reference/#kernpy.kern_to_ekern--convert-a-list-of-krn-files-to-ekrn-files","title":"Convert a list of .krn files to .ekrn files","text":"<pre><code>krn_files = your_module.get_files()\n\n# Use the wrapper to avoid stopping the process if an error occurs\ndef kern_to_ekern_wrapper(krn_file, ekern_file):\n    try:\n        kern_to_ekern(krn_file, ekern_file)\n    except Exception as e:\n        print(f'Error:{e}')\n\n# Convert all the files\nfor krn_file in krn_files:\n    output_file = krn_file.replace('.krn', '.ekrn')\n    kern_to_ekern_wrapper(krn_file, output_file)\n</code></pre>"},{"location":"reference/#kernpy.read","title":"<code>read(path, strict=False)</code>","text":"<p>Read a Humdrum **kern file.</p> <p>Parameters:</p> Name Type Description Default <code>path</code> <code>Union[str, Path]</code> <p>File path to read</p> required <code>strict</code> <code>Optional[bool]</code> <p>If True, raise an error if the **kern file has any errors. Otherwise, return a list of errors.</p> <code>False</code> <p>Returns (Document, List[str]): Document object and list of error messages. Empty list if no errors.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; import kernpy as kp\n&gt;&gt;&gt; document, _ = kp.read('path/to/file.krn')\n</code></pre> <pre><code>&gt;&gt;&gt; document, errors = kp.read('path/to/file.krn')\n&gt;&gt;&gt; if len(errors) &gt; 0:\n&gt;&gt;&gt;     print(errors)\n['Error: Invalid **kern spine: 1', 'Error: Invalid **kern spine: 2']\n</code></pre>"},{"location":"reference/#kernpy.store","title":"<code>store(document, path, options)</code>","text":"<p>Store a Document object to a file.</p> <p>Parameters:</p> Name Type Description Default <code>document</code> <code>Document</code> <p>Document object to store</p> required <code>path</code> <code>Union[str, Path]</code> <p>File path to store</p> required <code>options</code> <code>ExportOptions</code> <p>Export options</p> required <p>Returns: None</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; import kernpy as kp\n&gt;&gt;&gt; document, errors = kp.read('path/to/file.krn')\n&gt;&gt;&gt; options = kp.ExportOptions()\n&gt;&gt;&gt; kp.store(document, 'path/to/store.krn', options)\n</code></pre>"},{"location":"reference/#kernpy.store_graph","title":"<code>store_graph(document, path)</code>","text":"<p>Create a graph representation of a Document object using Graphviz. Save the graph to a file.</p> <p>Parameters:</p> Name Type Description Default <code>document</code> <code>Document</code> <p>Document object to create graph from</p> required <code>path</code> <code>str</code> <p>File path to save the graph</p> required <p>Returns: None</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; import kernpy as kp\n&gt;&gt;&gt; document, errors = kp.read('path/to/file.krn')\n&gt;&gt;&gt; kp.store_graph(document, 'path/to/graph.dot')\n</code></pre>"},{"location":"reference/#modules","title":"Modules","text":"<p>kernpy.core</p> <p>=====</p> <p>This module contains the core functionality of the <code>kernpy</code> package.</p> <p>kernpy.util</p> <p>=====</p> <p>This module contains utility functions for the kernpy package.</p>"},{"location":"reference/#kernpy.core.AbstractToken","title":"<code>AbstractToken</code>","text":"<p>               Bases: <code>ABC</code></p> <p>An abstract base class representing a token.</p> <p>This class serves as a blueprint for creating various types of tokens, which are categorized based on their TokenCategory.</p> <p>Attributes:</p> Name Type Description <code>encoding</code> <code>str</code> <p>The original representation of the token.</p> <code>category</code> <code>TokenCategory</code> <p>The category of the token.</p> <code>hidden</code> <code>bool</code> <p>A flag indicating whether the token is hidden. Defaults to False.</p>"},{"location":"reference/#kernpy.core.AbstractToken.__init__","title":"<code>__init__(encoding, category)</code>","text":"<p>AbstractToken constructor</p> <p>Parameters:</p> Name Type Description Default <code>encoding</code> <code>str</code> <p>The original representation of the token.</p> required <code>category</code> <code>TokenCategory</code> <p>The category of the token.</p> required"},{"location":"reference/#kernpy.core.AbstractToken.export","title":"<code>export()</code>  <code>abstractmethod</code>","text":"<p>Exports the token.</p> <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>The encoding of the token.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; token = AbstractToken('*clefF4', TokenCategory.SIGNATURES)\n&gt;&gt;&gt; token.export()\n'*clefF4'\n</code></pre>"},{"location":"reference/#kernpy.core.BarToken","title":"<code>BarToken</code>","text":"<p>               Bases: <code>SimpleToken</code></p> <p>BarToken class.</p>"},{"location":"reference/#kernpy.core.BoundingBox","title":"<code>BoundingBox</code>","text":"<p>BoundingBox class.</p> <p>It contains the coordinates of the score bounding box. Useful for full-page tasks.</p> <p>Attributes:</p> Name Type Description <code>from_x</code> <code>int</code> <p>The x coordinate of the top left corner</p> <code>from_y</code> <code>int</code> <p>The y coordinate of the top left corner</p> <code>to_x</code> <code>int</code> <p>The x coordinate of the bottom right corner</p> <code>to_y</code> <code>int</code> <p>The y coordinate of the bottom right corner</p>"},{"location":"reference/#kernpy.core.BoundingBox.__init__","title":"<code>__init__(x, y, w, h)</code>","text":"<p>BoundingBox constructor.</p> <p>Parameters:</p> Name Type Description Default <code>x</code> <code>int</code> <p>The x coordinate of the top left corner</p> required <code>y</code> <code>int</code> <p>The y coordinate of the top left corner</p> required <code>w</code> <code>int</code> <p>The width</p> required <code>h</code> <code>int</code> <p>The height</p> required"},{"location":"reference/#kernpy.core.BoundingBox.__str__","title":"<code>__str__()</code>","text":"<p>Returns a string representation of the bounding box</p> <p>Returns (str): The string representation of the bounding box</p>"},{"location":"reference/#kernpy.core.BoundingBox.extend","title":"<code>extend(bounding_box)</code>","text":"<p>Extends the bounding box. Modify the current object.</p> <p>Parameters:</p> Name Type Description Default <code>bounding_box</code> <code>BoundingBox</code> <p>The bounding box to extend</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p>"},{"location":"reference/#kernpy.core.BoundingBox.h","title":"<code>h()</code>","text":"<p>Returns the height of the box</p> <p>Returns:</p> Name Type Description <code>int</code> <code>int</code> <p>The height of the box</p> <p>return self.to_y - self.from_y</p>"},{"location":"reference/#kernpy.core.BoundingBox.w","title":"<code>w()</code>","text":"<p>Returns the width of the box</p> <p>Returns:</p> Name Type Description <code>int</code> <code>int</code> <p>The width of the box</p>"},{"location":"reference/#kernpy.core.BoundingBox.xywh","title":"<code>xywh()</code>","text":"<p>Returns a string representation of the bounding box.</p> <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>The string representation of the bounding box</p>"},{"location":"reference/#kernpy.core.BoundingBoxMeasures","title":"<code>BoundingBoxMeasures</code>","text":"<p>BoundingBoxMeasures class.</p>"},{"location":"reference/#kernpy.core.BoundingBoxMeasures.__init__","title":"<code>__init__(bounding_box, from_measure, to_measure)</code>","text":"<p>Create an instance of BoundingBoxMeasures.</p> <p>Parameters:</p> Name Type Description Default <code>bounding_box</code> <p>The bounding box object of the node.</p> required <code>from_measure</code> <code>int</code> <p>The first measure of the score in the BoundingBoxMeasures object.</p> required <code>to_measure</code> <code>int</code> <p>The last measure of the score in the BoundingBoxMeasures object.</p> required"},{"location":"reference/#kernpy.core.BoundingBoxToken","title":"<code>BoundingBoxToken</code>","text":"<p>               Bases: <code>AbstractToken</code></p> <p>BoundingBoxToken class.</p> <p>It contains the coordinates of the score bounding box. Useful for full-page tasks.</p> <p>Attributes:</p> Name Type Description <code>encoding</code> <code>str</code> <p>The complete unprocessed encoding</p> <code>page_number</code> <code>int</code> <p>The page number</p> <code>bounding_box</code> <code>BoundingBox</code> <p>The bounding box</p>"},{"location":"reference/#kernpy.core.BoundingBoxToken.__init__","title":"<code>__init__(encoding, page_number, bounding_box)</code>","text":"<p>BoundingBoxToken constructor.</p> <p>Parameters:</p> Name Type Description Default <code>encoding</code> <code>str</code> <p>The complete unprocessed encoding</p> required <code>page_number</code> <code>int</code> <p>The page number</p> required <code>bounding_box</code> <code>BoundingBox</code> <p>The bounding box</p> required"},{"location":"reference/#kernpy.core.ChordToken","title":"<code>ChordToken</code>","text":"<p>               Bases: <code>SimpleToken</code></p> <p>ChordToken class.</p> <p>It contains a list of compound tokens</p>"},{"location":"reference/#kernpy.core.ChordToken.__init__","title":"<code>__init__(encoding, category, notes_tokens)</code>","text":"<p>ChordToken constructor.</p> <p>Parameters:</p> Name Type Description Default <code>encoding</code> <code>str</code> <p>The complete unprocessed encoding</p> required <code>category</code> <code>TokenCategory</code> <p>The token category, one of TokenCategory</p> required <code>notes_tokens</code> <code>Sequence[Token]</code> <p>The subtokens for the notes. Individual elements of the token, of type Subtoken</p> required"},{"location":"reference/#kernpy.core.ClefToken","title":"<code>ClefToken</code>","text":"<p>               Bases: <code>SignatureToken</code></p> <p>ClefToken class.</p>"},{"location":"reference/#kernpy.core.CompoundToken","title":"<code>CompoundToken</code>","text":"<p>               Bases: <code>Token</code></p>"},{"location":"reference/#kernpy.core.CompoundToken.__init__","title":"<code>__init__(encoding, category, subtokens)</code>","text":"<p>:param encoding: The complete unprocessed encoding :param category: The token category, one of TokenCategory :param subtokens: The individual elements of the token, of type Subtoken</p>"},{"location":"reference/#kernpy.core.Document","title":"<code>Document</code>","text":"<p>Document class.</p> <p>This class store the score content using an agnostic tree structure.</p> <p>Attributes:</p> Name Type Description <code>tree</code> <code>MultistageTree</code> <p>The tree structure of the document where all the nodes are stored.             Each stage of the tree corresponds to a row in the Humdrum **kern file encoding.</p> <code>measure_start_tree_stages</code> <code>List[List[Node]]</code> <p>The list of nodes that corresponds to the measures.             Empty list by default. The index of the list is starting from 1. Rows after removing empty lines and line comments</p> <code>page_bounding_boxes</code> <code>Dict[int, BoundingBoxMeasures]</code> <p>The dictionary of page bounding boxes.             - key: page number - value: BoundingBoxMeasures object</p> <code>header_stage</code> <code>int</code> <p>The index of the stage that contains the headers. None by default.</p>"},{"location":"reference/#kernpy.core.Document.__init__","title":"<code>__init__(tree)</code>","text":"<p>Constructor for Document class.</p> <p>Parameters:</p> Name Type Description Default <code>tree</code> <code>MultistageTree</code> <p>The tree structure of the document where all the nodes are stored.</p> required"},{"location":"reference/#kernpy.core.Document.__iter__","title":"<code>__iter__()</code>","text":"<p>Get the indexes to export all the document.</p> <p>Returns: An iterator with the indexes to export the document.</p>"},{"location":"reference/#kernpy.core.Document.__next__","title":"<code>__next__()</code>","text":"<p>Get the next index to export the document.</p> <p>Returns: The next index to export the document.</p>"},{"location":"reference/#kernpy.core.Document.add_document","title":"<code>add_document(other)</code>","text":"<p>Concatenate one document to the current document: Mutates the current object!</p> <p>Parameters:</p> Name Type Description Default <code>other</code> <code>Document</code> <p>The document to concatenate.</p> required <p>Returns: None</p>"},{"location":"reference/#kernpy.core.Document.append_spines","title":"<code>append_spines(spines)</code>","text":"<pre><code>    Append the spines directly to current document tree.\n\n    Args:\n        spines(list): A list of spines to append.\n\n    Returns: None\n\n    Examples:\n        &gt;&gt;&gt; import kernpy as kp\n        &gt;&gt;&gt; doc, _ = kp.read('score.krn')\n        &gt;&gt;&gt; spines = [\n        &gt;&gt;&gt; '4e     4f      4g      4a\n</code></pre> <p>4b      4c      4d      4e =       =       =       = ',             &gt;&gt;&gt; '4c     4d      4e      4f 4g      4a      4b      4c =       =       =       = ',            &gt;&gt;&gt; ]            &gt;&gt;&gt; doc.append_spines(spines)            None</p>"},{"location":"reference/#kernpy.core.Document.clone","title":"<code>clone()</code>","text":"<p>Create a deep copy of the Document instance.</p> <p>Returns: A new instance of Document with the tree copied.</p>"},{"location":"reference/#kernpy.core.Document.frequencies","title":"<code>frequencies(token_categories=None)</code>","text":"<p>Frequency of tokens in the document.</p> <p>Parameters:</p> Name Type Description Default <code>token_categories</code> <code>Optional[Sequence[TokenCategory]]</code> <p>If None, all tokens are considered.</p> <code>None</code> <p>Returns (Dict):     A dictionary with the frequency of each token.</p>"},{"location":"reference/#kernpy.core.Document.get_all_tokens","title":"<code>get_all_tokens(filter_by_categories=None)</code>","text":"<p>Parameters:</p> Name Type Description Default <code>filter_by_categories</code> <code>Optional[Sequence[TokenCategory]]</code> <p>A list of categories to filter the tokens. If None, all tokens are returned.</p> <code>None</code> <p>Returns:</p> Type Description <code>List[AbstractToken]</code> <p>List[AbstractToken] - A list of all tokens.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; tokens = document.get_all_tokens()\n&gt;&gt;&gt; Document.tokens_to_encodings(tokens)\n&gt;&gt;&gt; [type(t) for t in tokens]\n[&lt;class 'kernpy.core.token.Token'&gt;, &lt;class 'kernpy.core.token.Token'&gt;, &lt;class 'kernpy.core.token.Token'&gt;]\n</code></pre>"},{"location":"reference/#kernpy.core.Document.get_all_tokens_encodings","title":"<code>get_all_tokens_encodings(filter_by_categories=None)</code>","text":"<p>Parameters:</p> Name Type Description Default <code>filter_by_categories</code> <code>Optional[Sequence[TokenCategory]]</code> <p>A list of categories to filter the tokens. If None, all tokens are returned.</p> <code>None</code> <p>Returns:</p> Type Description <code>List[str]</code> <p>list[str] - A list of all token encodings.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; tokens = document.get_all_tokens_encodings()\n&gt;&gt;&gt; Document.tokens_to_encodings(tokens)\n['!!!COM: Coltrane', '!!!voices: 1', '!!!OPR: Blue Train']\n</code></pre>"},{"location":"reference/#kernpy.core.Document.get_first_measure","title":"<code>get_first_measure()</code>","text":"<p>Get the index of the first measure of the document.</p> <p>Returns: (Int) The index of the first measure of the document.</p> <p>Raises: Exception - If the document has no measures.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; import kernpy as kp\n&gt;&gt;&gt; document, err = kp.read('score.krn')\n&gt;&gt;&gt; document.get_first_measure()\n1\n</code></pre>"},{"location":"reference/#kernpy.core.Document.get_header_nodes","title":"<code>get_header_nodes()</code>","text":"<p>Get the header nodes of the current document.</p> <p>Returns: List[HeaderToken]: A list with the header nodes of the current document.</p>"},{"location":"reference/#kernpy.core.Document.get_header_stage","title":"<code>get_header_stage()</code>","text":"<p>Get the Node list of the header stage.</p> <p>Returns: (Union[List[Node], List[List[Node]]]) The Node list of the header stage.</p> <p>Raises: Exception - If the document has no header stage.</p>"},{"location":"reference/#kernpy.core.Document.get_leaves","title":"<code>get_leaves()</code>","text":"<p>Get the leaves of the tree.</p> <p>Returns: (List[Node]) The leaves of the tree.</p>"},{"location":"reference/#kernpy.core.Document.get_metacomments","title":"<code>get_metacomments(KeyComment=None, clear=False)</code>","text":"<p>Get all metacomments in the document</p> <p>Parameters:</p> Name Type Description Default <code>KeyComment</code> <code>Optional[str]</code> <p>Filter by a specific metacomment key: e.g. Use 'COM' to get only comments starting with                '!!!COM: '. If None, all metacomments are returned.</p> <code>None</code> <code>clear</code> <code>bool</code> <p>If True, the metacomment key is removed from the comment. E.g. '!!!COM: Coltrane' -&gt; 'Coltrane'.                If False, the metacomment key is kept. E.g. '!!!COM: Coltrane' -&gt; '!!!COM: Coltrane'.                 The clear functionality is equivalent to the following code:</p> <pre><code>comment = '!!!COM: Coltrane'\nclean_comment = comment.replace(f\"!!!{KeyComment}: \", \"\")\n</code></pre> <p>Other formats are not supported.</p> <code>False</code> <p>Returns: A list of metacomments.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; document.get_metacomments()\n['!!!COM: Coltrane', '!!!voices: 1', '!!!OPR: Blue Train']\n&gt;&gt;&gt; document.get_metacomments(KeyComment='COM')\n['!!!COM: Coltrane']\n&gt;&gt;&gt; document.get_metacomments(KeyComment='COM', clear=True)\n['Coltrane']\n&gt;&gt;&gt; document.get_metacomments(KeyComment='non_existing_key')\n[]\n</code></pre>"},{"location":"reference/#kernpy.core.Document.get_spine_count","title":"<code>get_spine_count()</code>","text":"<p>Get the number of spines in the document.</p> <p>Returns (int): The number of spines in the document.</p>"},{"location":"reference/#kernpy.core.Document.get_spine_ids","title":"<code>get_spine_ids()</code>","text":"<p>Get the indexes of the current document.</p> <p>Returns List[int]: A list with the indexes of the current document.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; document.get_all_spine_indexes()\n[0, 1, 2, 3, 4]\n</code></pre>"},{"location":"reference/#kernpy.core.Document.get_unique_token_encodings","title":"<code>get_unique_token_encodings(filter_by_categories=None)</code>","text":"<p>Get unique token encodings.</p> <p>Parameters:</p> Name Type Description Default <code>filter_by_categories</code> <code>Optional[Sequence[TokenCategory]]</code> <p>A list of categories to filter the tokens. If None, all tokens are returned.</p> <code>None</code> <p>Returns: List[str] - A list of unique token encodings.</p>"},{"location":"reference/#kernpy.core.Document.get_unique_tokens","title":"<code>get_unique_tokens(filter_by_categories=None)</code>","text":"<p>Get unique tokens.</p> <p>Parameters:</p> Name Type Description Default <code>filter_by_categories</code> <code>Optional[Sequence[TokenCategory]]</code> <p>A list of categories to filter the tokens. If None, all tokens are returned.</p> <code>None</code> <p>Returns:</p> Type Description <code>List[AbstractToken]</code> <p>List[AbstractToken] - A list of unique tokens.</p>"},{"location":"reference/#kernpy.core.Document.get_voices","title":"<code>get_voices(clean=False)</code>","text":"<p>Get the voices of the document.</p> <p>Args     clean (bool): Remove the first '!' from the voice name.</p> <p>Returns: A list of voices.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; document.get_voices()\n['!sax', '!piano', '!bass']\n&gt;&gt;&gt; document.get_voices(clean=True)\n['sax', 'piano', 'bass']\n&gt;&gt;&gt; document.get_voices(clean=False)\n['!sax', '!piano', '!bass']\n</code></pre>"},{"location":"reference/#kernpy.core.Document.measures_count","title":"<code>measures_count()</code>","text":"<p>Get the index of the last measure of the document.</p> <p>Returns: (Int) The index of the last measure of the document.</p> <p>Raises: Exception - If the document has no measures.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; document, _ = kernpy.read('score.krn')\n&gt;&gt;&gt; document.measures_count()\n10\n&gt;&gt;&gt; for i in range(document.get_first_measure(), document.measures_count() + 1):\n&gt;&gt;&gt;   options = kernpy.ExportOptions(from_measure=i, to_measure=i+4)\n</code></pre>"},{"location":"reference/#kernpy.core.Document.split","title":"<code>split()</code>","text":"<p>Split the current document into a list of documents, one for each kern spine. Each resulting document will contain one kern spine along with all non-kern spines.</p> <p>Returns:</p> Type Description <code>List[Document]</code> <p>List['Document']: A list of documents, where each document contains one **kern spine</p> <code>List[Document]</code> <p>and all non-kern spines from the original document.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; document.split()\n[&lt;Document: score.krn&gt;, &lt;Document: score.krn&gt;, &lt;Document: score.krn&gt;]\n</code></pre>"},{"location":"reference/#kernpy.core.Document.to_concat","title":"<code>to_concat(first_doc, second_doc, deep_copy=True)</code>  <code>classmethod</code>","text":"<p>Concatenate two documents.</p> <p>Parameters:</p> Name Type Description Default <code>first_doc</code> <code>Document</code> <p>The first document.</p> required <code>second_doc</code> <code>Document</code> <p>The second document.</p> required <code>deep_copy</code> <code>bool</code> <p>If True, the documents are deep copied. If False, the documents are shallow copied.</p> <code>True</code> <p>Returns: A new instance of Document with the documents concatenated.</p>"},{"location":"reference/#kernpy.core.Document.tokens_to_encodings","title":"<code>tokens_to_encodings(tokens)</code>  <code>classmethod</code>","text":"<p>Get the encodings of a list of tokens.</p> The method is equivalent to the following code <p>tokens = kp.get_all_tokens() [token.encoding for token in tokens if token.encoding is not None]</p> <p>Parameters:</p> Name Type Description Default <code>tokens</code> <code>Sequence[AbstractToken]</code> <p>list - A list of tokens.</p> required <p>Returns: List[str] - A list of token encodings.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; tokens = document.get_all_tokens()\n&gt;&gt;&gt; Document.tokens_to_encodings(tokens)\n['!!!COM: Coltrane', '!!!voices: 1', '!!!OPR: Blue Train']\n</code></pre>"},{"location":"reference/#kernpy.core.Duration","title":"<code>Duration</code>","text":"<p>               Bases: <code>ABC</code></p> <p>Represents the duration of a note or a rest.</p> <p>The duration is represented using the Humdrum Kern format. The duration is a number that represents the number of units of the duration.</p> <p>The duration of a whole note is 1, half note is 2, quarter note is 4, eighth note is 8, etc.</p> <p>The duration of a note is represented by a number. The duration of a rest is also represented by a number.</p> <p>This class do not limit the duration ranges.</p> <p>In the following example, the duration is represented by the number '2'.</p> <pre><code>**kern\n*clefG2\n2c          // whole note\n4c          // half note\n8c          // quarter note\n16c         // eighth note\n*-\n</code></pre>"},{"location":"reference/#kernpy.core.DurationClassical","title":"<code>DurationClassical</code>","text":"<p>               Bases: <code>Duration</code></p> <p>Represents the duration in classical notation of a note or a rest.</p>"},{"location":"reference/#kernpy.core.DurationClassical.__eq__","title":"<code>__eq__(other)</code>","text":"<p>Compare two durations.</p> <p>Parameters:</p> Name Type Description Default <code>other</code> <code>DurationClassical</code> <p>The other duration to compare</p> required <p>Returns (bool): True if the durations are equal, False otherwise</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; duration = DurationClassical(2)\n&gt;&gt;&gt; duration2 = DurationClassical(2)\n&gt;&gt;&gt; duration == duration2\nTrue\n&gt;&gt;&gt; duration = DurationClassical(2)\n&gt;&gt;&gt; duration2 = DurationClassical(4)\n&gt;&gt;&gt; duration == duration2\nFalse\n</code></pre>"},{"location":"reference/#kernpy.core.DurationClassical.__ge__","title":"<code>__ge__(other)</code>","text":"<p>Compare two durations.</p> <p>Parameters:</p> Name Type Description Default <code>other</code> <code>DurationClassical</code> <p>The other duration to compare</p> required <p>Returns (bool):     True if this duration is higher or equal than the other, False otherwise</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; duration = DurationClassical(2)\n&gt;&gt;&gt; duration2 = DurationClassical(4)\n&gt;&gt;&gt; duration &gt;= duration2\nFalse\n&gt;&gt;&gt; duration = DurationClassical(4)\n&gt;&gt;&gt; duration2 = DurationClassical(2)\n&gt;&gt;&gt; duration &gt;= duration2\nTrue\n&gt;&gt;&gt; duration = DurationClassical(4)\n&gt;&gt;&gt; duration2 = DurationClassical(4)\n&gt;&gt;&gt; duration &gt;= duration2\nTrue\n</code></pre>"},{"location":"reference/#kernpy.core.DurationClassical.__gt__","title":"<code>__gt__(other)</code>","text":"<p>Compare two durations.</p> <p>Parameters:</p> Name Type Description Default <code>other</code> <code>DurationClassical</code> <p>The other duration to compare</p> required <p>Returns (bool):     True if this duration is higher than the other, False otherwise</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; duration = DurationClassical(2)\n&gt;&gt;&gt; duration2 = DurationClassical(4)\n&gt;&gt;&gt; duration &gt; duration2\nFalse\n&gt;&gt;&gt; duration = DurationClassical(4)\n&gt;&gt;&gt; duration2 = DurationClassical(2)\n&gt;&gt;&gt; duration &gt; duration2\nTrue\n&gt;&gt;&gt; duration = DurationClassical(4)\n&gt;&gt;&gt; duration2 = DurationClassical(4)\n&gt;&gt;&gt; duration &gt; duration2\nFalse\n</code></pre>"},{"location":"reference/#kernpy.core.DurationClassical.__init__","title":"<code>__init__(duration)</code>","text":"<p>Create a new Duration object.</p> <p>Parameters:</p> Name Type Description Default <code>duration</code> <code>str</code> <p>duration representation in Humdrum Kern format</p> required <p>Examples:</p> <pre><code>&gt;&gt;&gt; duration = DurationClassical(2)\nTrue\n&gt;&gt;&gt; duration = DurationClassical(4)\nTrue\n&gt;&gt;&gt; duration = DurationClassical(32)\nTrue\n&gt;&gt;&gt; duration = DurationClassical(1)\nTrue\n&gt;&gt;&gt; duration = DurationClassical(0)\nFalse\n&gt;&gt;&gt; duration = DurationClassical(-2)\nFalse\n&gt;&gt;&gt; duration = DurationClassical(3)\nFalse\n&gt;&gt;&gt; duration = DurationClassical(7)\nFalse\n</code></pre>"},{"location":"reference/#kernpy.core.DurationClassical.__le__","title":"<code>__le__(other)</code>","text":"<p>Compare two durations.</p> <p>Parameters:</p> Name Type Description Default <code>other</code> <code>DurationClassical</code> <p>The other duration to compare</p> required <p>Returns:</p> Type Description <code>bool</code> <p>True if this duration is lower or equal than the other, False otherwise</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; duration = DurationClassical(2)\n&gt;&gt;&gt; duration2 = DurationClassical(4)\n&gt;&gt;&gt; duration &lt;= duration2\nTrue\n&gt;&gt;&gt; duration = DurationClassical(4)\n&gt;&gt;&gt; duration2 = DurationClassical(2)\n&gt;&gt;&gt; duration &lt;= duration2\nFalse\n&gt;&gt;&gt; duration = DurationClassical(4)\n&gt;&gt;&gt; duration2 = DurationClassical(4)\n&gt;&gt;&gt; duration &lt;= duration2\nTrue\n</code></pre>"},{"location":"reference/#kernpy.core.DurationClassical.__lt__","title":"<code>__lt__(other)</code>","text":"<p>Compare two durations.</p> <p>Parameters:</p> Name Type Description Default <code>other</code> <code>DurationClassical</code> <p>The other duration to compare</p> required <p>Returns (bool):     True if this duration is lower than the other, False otherwise</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; duration = DurationClassical(2)\n&gt;&gt;&gt; duration2 = DurationClassical(4)\n&gt;&gt;&gt; duration &lt; duration2\nTrue\n&gt;&gt;&gt; duration = DurationClassical(4)\n&gt;&gt;&gt; duration2 = DurationClassical(2)\n&gt;&gt;&gt; duration &lt; duration2\nFalse\n&gt;&gt;&gt; duration = DurationClassical(4)\n&gt;&gt;&gt; duration2 = DurationClassical(4)\n&gt;&gt;&gt; duration &lt; duration2\nFalse\n</code></pre>"},{"location":"reference/#kernpy.core.DurationClassical.__ne__","title":"<code>__ne__(other)</code>","text":"<p>Compare two durations.</p> <p>Parameters:</p> Name Type Description Default <code>other</code> <code>DurationClassical</code> <p>The other duration to compare</p> required <p>Returns (bool):     True if the durations are different, False otherwise</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; duration = DurationClassical(2)\n&gt;&gt;&gt; duration2 = DurationClassical(2)\n&gt;&gt;&gt; duration != duration2\nFalse\n&gt;&gt;&gt; duration = DurationClassical(2)\n&gt;&gt;&gt; duration2 = DurationClassical(4)\n&gt;&gt;&gt; duration != duration2\nTrue\n</code></pre>"},{"location":"reference/#kernpy.core.DurationClassical.modify","title":"<code>modify(ratio)</code>","text":"<p>Modify the duration of a note or a rest of the current object.</p> <p>Parameters:</p> Name Type Description Default <code>ratio</code> <code>int</code> <p>The factor to modify the duration. The factor must be greater than 0.</p> required <p>Returns (DurationClassical): The new duration object with the modified duration.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; duration = DurationClassical(2)\n&gt;&gt;&gt; new_duration = duration.modify(2)\n&gt;&gt;&gt; new_duration.duration\n4\n&gt;&gt;&gt; duration = DurationClassical(2)\n&gt;&gt;&gt; new_duration = duration.modify(0)\nTraceback (most recent call last):\n...\nValueError: Invalid factor provided: 0. The factor must be greater than 0.\n&gt;&gt;&gt; duration = DurationClassical(2)\n&gt;&gt;&gt; new_duration = duration.modify(-2)\nTraceback (most recent call last):\n...\nValueError: Invalid factor provided: -2. The factor must be greater than 0.\n</code></pre>"},{"location":"reference/#kernpy.core.DurationMensural","title":"<code>DurationMensural</code>","text":"<p>               Bases: <code>Duration</code></p> <p>Represents the duration in mensural notation of a note or a rest.</p>"},{"location":"reference/#kernpy.core.ErrorToken","title":"<code>ErrorToken</code>","text":"<p>               Bases: <code>AbstractToken</code></p> <p>Used to wrap tokens that have not been parsed.</p>"},{"location":"reference/#kernpy.core.ErrorToken.__init__","title":"<code>__init__(encoding, line, error)</code>","text":"<p>ErrorToken constructor</p> <p>Parameters:</p> Name Type Description Default <code>encoding</code> <code>str</code> <p>The original representation of the token.</p> required <code>line</code> <code>int</code> <p>The line number of the token in the score.</p> required <code>error</code> <code>str</code> <p>The error message thrown by the parser.</p> required"},{"location":"reference/#kernpy.core.ErrorToken.__str__","title":"<code>__str__()</code>","text":"<p>Information about the error token.</p> <p>Returns (str) The information about the error token.</p>"},{"location":"reference/#kernpy.core.ExportOptions","title":"<code>ExportOptions</code>","text":"<p><code>ExportOptions</code> class.</p> <p>Store the options to export a **kern file.</p>"},{"location":"reference/#kernpy.core.ExportOptions.__eq__","title":"<code>__eq__(other)</code>","text":"<p>Compare two ExportOptions objects.</p> <p>Parameters:</p> Name Type Description Default <code>other</code> <code>ExportOptions</code> <p>The other ExportOptions object to compare.</p> required <p>Returns (bool):     True if the objects are equal, False otherwise.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; options1 = ExportOptions(spine_types=['**kern'], token_categories=BEKERN_CATEGORIES)\n&gt;&gt;&gt; options2 = ExportOptions(spine_types=['**kern'], token_categories=BEKERN_CATEGORIES)\n&gt;&gt;&gt; options1 == options2\nTrue\n</code></pre> <pre><code>&gt;&gt;&gt; options3 = ExportOptions(spine_types=['**kern', '**harm'], token_categories=BEKERN_CATEGORIES)\n&gt;&gt;&gt; options1 == options3\nFalse\n</code></pre>"},{"location":"reference/#kernpy.core.ExportOptions.__init__","title":"<code>__init__(spine_types=None, token_categories=None, from_measure=None, to_measure=None, kern_type=KernTypeExporter.normalizedKern, instruments=None, show_measure_numbers=False, spine_ids=None)</code>","text":"<p>Create a new ExportOptions object.</p> <p>Parameters:</p> Name Type Description Default <code>spine_types</code> <code>Iterable</code> <p>kern, mens, etc...</p> <code>None</code> <code>token_categories</code> <code>Iterable</code> <p>TokenCategory</p> <code>None</code> <code>from_measure</code> <code>int</code> <p>The measure to start exporting. When None, the exporter will start from the beginning of the file. The first measure is 1</p> <code>None</code> <code>to_measure</code> <code>int</code> <p>The measure to end exporting. When None, the exporter will end at the end of the file.</p> <code>None</code> <code>kern_type</code> <code>KernTypeExporter</code> <p>The type of the kern file to export.</p> <code>normalizedKern</code> <code>instruments</code> <code>Iterable</code> <p>The instruments to export. When None, all the instruments will be exported.</p> <code>None</code> <code>show_measure_numbers</code> <code>Bool</code> <p>Show the measure numbers in the exported file.</p> <code>False</code> <code>spine_ids</code> <code>Iterable</code> <p>The ids of the spines to export. When None, all the spines will be exported. Spines ids start from 0 and they are increased by 1.</p> <code>None</code> Example <p>import kernpy</p> <p>Create the importer and read the file</p> <p>hi = Importer() document = hi.import_file('file.krn') exporter = Exporter()</p> <p>Export the file with the specified options</p> <p>options = ExportOptions(spine_types=['**kern'], token_categories=BEKERN_CATEGORIES) exported_data = exporter.export_string(document, options)</p> <p>Export only the lyrics</p> <p>options = ExportOptions(spine_types=['**kern'], token_categories=[TokenCategory.LYRICS]) exported_data = exporter.export_string(document, options)</p> <p>Export the comments</p> <p>options = ExportOptions(spine_types=['**kern'], token_categories=[TokenCategory.LINE_COMMENTS, TokenCategory.FIELD_COMMENTS]) exported_data = exporter.export_string(document, options)</p> <p>Export using the eKern version</p> <p>options = ExportOptions(spine_types=['**kern'], token_categories=BEKERN_CATEGORIES, kern_type=KernTypeExporter.eKern) exported_data = exporter.export_string(document, options)</p>"},{"location":"reference/#kernpy.core.ExportOptions.__ne__","title":"<code>__ne__(other)</code>","text":"<p>Compare two ExportOptions objects.</p> <p>Parameters:</p> Name Type Description Default <code>other</code> <code>ExportOptions</code> <p>The other ExportOptions object to compare.</p> required <p>Returns (bool):     True if the objects are not equal, False otherwise.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; options1 = ExportOptions(spine_types=['**kern'], token_categories=BEKERN_CATEGORIES)\n&gt;&gt;&gt; options2 = ExportOptions(spine_types=['**kern'], token_categories=BEKERN_CATEGORIES)\n&gt;&gt;&gt; options1 != options2\nFalse\n</code></pre> <pre><code>&gt;&gt;&gt; options3 = ExportOptions(spine_types=['**kern', '**harm'], token_categories=BEKERN_CATEGORIES)\n&gt;&gt;&gt; options1 != options3\nTrue\n</code></pre>"},{"location":"reference/#kernpy.core.Exporter","title":"<code>Exporter</code>","text":""},{"location":"reference/#kernpy.core.Exporter.append_row","title":"<code>append_row(document, node, options, row)</code>","text":"<p>Append a row to the row list if the node accomplishes the requirements. Args:     document (Document): The document with the spines.     node (Node): The node to append.     options (ExportOptions): The export options to filter the token.     row (list): The row to append.</p> <p>Returns (bool): True if the row was appended. False if the row was not appended.</p>"},{"location":"reference/#kernpy.core.Exporter.compute_header_type","title":"<code>compute_header_type(node)</code>","text":"<p>Compute the header type of the node.</p> <p>Parameters:</p> Name Type Description Default <code>node</code> <code>Node</code> <p>The node to compute.</p> required <p>Returns (Optional[Token]): The header type <code>Node</code>object. None if the current node is the header.</p>"},{"location":"reference/#kernpy.core.Exporter.export_options_validator","title":"<code>export_options_validator(document, options)</code>  <code>staticmethod</code>","text":"<p>Validate the export options. Raise an exception if the options are invalid.</p> <p>Parameters:</p> Name Type Description Default <code>document</code> <code>Document</code> <p><code>Document</code> - The document to export.</p> required <code>options</code> <code>ExportOptions</code> <p><code>ExportOptions</code> - The options to export the document.</p> required <p>Returns: None</p> Example <p>export_options_validator(document, options) ValueError: option from_measure must be &gt;=0 but -1 was found. export_options_validator(document, options2) None</p>"},{"location":"reference/#kernpy.core.Exporter.get_spine_types","title":"<code>get_spine_types(document, spine_types=None)</code>","text":"<p>Get the spine types from the document.</p> <p>Parameters:</p> Name Type Description Default <code>document</code> <code>Document</code> <p>The document with the spines.</p> required <code>spine_types</code> <code>list</code> <p>The spine types to export. If None, all the spine types will be exported.</p> <code>None</code> <p>Returns: A list with the spine types.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; exporter = Exporter()\n&gt;&gt;&gt; exporter.get_spine_types(document)\n['**kern', '**kern', '**kern', '**kern', '**root', '**harm']\n&gt;&gt;&gt; exporter.get_spine_types(document, None)\n['**kern', '**kern', '**kern', '**kern', '**root', '**harm']\n&gt;&gt;&gt; exporter.get_spine_types(document, ['**kern'])\n['**kern', '**kern', '**kern', '**kern']\n&gt;&gt;&gt; exporter.get_spine_types(document, ['**kern', '**root'])\n['**kern', '**kern', '**kern', '**kern', '**root']\n&gt;&gt;&gt; exporter.get_spine_types(document, ['**kern', '**root', '**harm'])\n['**kern', '**kern', '**kern', '**kern', '**root', '**harm']\n&gt;&gt;&gt; exporter.get_spine_types(document, [])\n[]\n</code></pre>"},{"location":"reference/#kernpy.core.FieldCommentToken","title":"<code>FieldCommentToken</code>","text":"<p>               Bases: <code>AbstractToken</code></p> <p>FieldCommentToken class stores the metacomments of the score. Usually these are comments starting with <code>!!!</code>.</p>"},{"location":"reference/#kernpy.core.Generic","title":"<code>Generic</code>","text":"<p>Generic class.</p> <p>This class provides support to the public API for KernPy.</p> <p>The main functions implementation are provided here.</p>"},{"location":"reference/#kernpy.core.Generic.concat","title":"<code>concat(contents, options=None, strict=False)</code>  <code>classmethod</code>","text":"<p>Parameters:</p> Name Type Description Default <code>contents</code> <code>Sequence[str]</code> required <code>options</code> <code>Optional[ExportOptions]</code> <code>None</code> <code>strict</code> <code>Optional[bool]</code> <code>False</code> <p>Returns:</p>"},{"location":"reference/#kernpy.core.Generic.create","title":"<code>create(content, strict=False)</code>  <code>classmethod</code>","text":"<p>Parameters:</p> Name Type Description Default <code>content</code> <code>str</code> required <code>strict</code> <code>Optional[bool]</code> <code>False</code> <p>Returns:</p>"},{"location":"reference/#kernpy.core.Generic.export","title":"<code>export(document, options)</code>  <code>classmethod</code>","text":"<p>Parameters:</p> Name Type Description Default <code>document</code> <code>Document</code> required <code>options</code> <code>ExportOptions</code> required <p>Returns:</p>"},{"location":"reference/#kernpy.core.Generic.get_spine_types","title":"<code>get_spine_types(document, spine_types=None)</code>  <code>classmethod</code>","text":"<p>Parameters:</p> Name Type Description Default <code>document</code> <code>Document</code> required <code>spine_types</code> <code>Optional[Sequence[str]]</code> <code>None</code> <p>Returns:</p>"},{"location":"reference/#kernpy.core.Generic.read","title":"<code>read(path, strict=False)</code>  <code>classmethod</code>","text":"<p>Parameters:</p> Name Type Description Default <code>path</code> <code>Path</code> required <code>strict</code> <code>Optional[bool]</code> <code>False</code> <p>Returns:</p>"},{"location":"reference/#kernpy.core.Generic.store","title":"<code>store(document, path, options)</code>  <code>classmethod</code>","text":"<p>Parameters:</p> Name Type Description Default <code>document</code> <code>Document</code> required <code>path</code> <code>Path</code> required <code>options</code> <code>ExportOptions</code> required <p>Returns:</p>"},{"location":"reference/#kernpy.core.Generic.store_graph","title":"<code>store_graph(document, path)</code>  <code>classmethod</code>","text":"<p>Parameters:</p> Name Type Description Default <code>document</code> <code>Document</code> required <code>path</code> <code>Path</code> required <p>Returns:</p>"},{"location":"reference/#kernpy.core.HeaderToken","title":"<code>HeaderToken</code>","text":"<p>               Bases: <code>AbstractToken</code></p> <p>HeaderTokens class.</p>"},{"location":"reference/#kernpy.core.HeaderToken.__init__","title":"<code>__init__(encoding, spine_id)</code>","text":"<p>Constructor for the HeaderToken class.</p> <p>Parameters:</p> Name Type Description Default <code>encoding</code> <code>str</code> <p>The original representation of the token.</p> required <code>spine_id</code> <code>int</code> <p>The spine id of the token. The spine id is used to identify the token in the score.                The spine_id starts from 0 and increases by 1 for each new spine like the following example: kern  kern  kern dyn **text 0   1   2   3   4</p> required"},{"location":"reference/#kernpy.core.Importer","title":"<code>Importer</code>","text":"<p>Importer class.</p> <p>Use this class to import the content from a file or a string to a <code>Document</code> object.</p>"},{"location":"reference/#kernpy.core.Importer.__init__","title":"<code>__init__()</code>","text":"<pre><code>    Create an instance of the importer.\n\n    Raises:\n        Exception: If the importer content is not a valid **kern file.\n\n    Examples:\n        # Create the importer\n        &gt;&gt;&gt; importer = Importer()\n\n        # Import the content from a file\n        &gt;&gt;&gt; document = importer.import_file('file.krn')\n\n        # Import the content from a string\n        &gt;&gt;&gt; document = importer.import_string(\"**kern\n</code></pre> <p>clefF4 c4 4d 4e 4f -\")</p>"},{"location":"reference/#kernpy.core.Importer.get_error_messages","title":"<code>get_error_messages()</code>","text":"<p>Get the error messages of the importer.</p> <p>Returns: str - The error messages split by a new line character.</p> <p>Examples:</p>"},{"location":"reference/#kernpy.core.Importer.get_error_messages--create-the-importer-and-read-the-file","title":"Create the importer and read the file","text":"<pre><code>&gt;&gt;&gt; importer = Importer()\n&gt;&gt;&gt; importer.import_file(Path('file.krn'))\n&gt;&gt;&gt; print(importer.get_error_messages())\n'Error: Invalid token in row 1'\n</code></pre>"},{"location":"reference/#kernpy.core.Importer.has_errors","title":"<code>has_errors()</code>","text":"<p>Check if the importer has any errors.</p> <p>Returns: bool - True if the importer has errors, False otherwise.</p> <p>Examples:</p>"},{"location":"reference/#kernpy.core.Importer.has_errors--create-the-importer-and-read-the-file","title":"Create the importer and read the file","text":"<pre><code>&gt;&gt;&gt; importer = Importer()\n&gt;&gt;&gt; importer.import_file(Path('file.krn'))    # file.krn has an error\n&gt;&gt;&gt; print(importer.has_errors())\nTrue\n&gt;&gt;&gt; importer.import_file(Path('file2.krn'))   # file2.krn has no errors\n&gt;&gt;&gt; print(importer.has_errors())\nFalse\n</code></pre>"},{"location":"reference/#kernpy.core.Importer.import_file","title":"<code>import_file(file_path)</code>","text":"<p>Import the content from the importer to the file. Args:     file_path: The path to the file.</p> <p>Returns:</p> Type Description <code>Document</code> <p>Document - The document with the imported content.</p> <p>Examples:</p>"},{"location":"reference/#kernpy.core.Importer.import_file--create-the-importer-and-read-the-file","title":"Create the importer and read the file","text":"<pre><code>&gt;&gt;&gt; importer = Importer()\n&gt;&gt;&gt; importer.import_file('file.krn')\n</code></pre>"},{"location":"reference/#kernpy.core.Importer.import_string","title":"<code>import_string(text)</code>","text":"<pre><code>    Import the content from the content of the score in string format.\n\n    Args:\n        text: The content of the score in string format.\n\n    Returns:\n        Document - The document with the imported content.\n\n    Examples:\n        # Create the importer and read the file\n        &gt;&gt;&gt; importer = Importer()\n        &gt;&gt;&gt; importer.import_string(\"**kern\n</code></pre> <p>clefF4 c4 4d 4e 4f -\")             # Read the content from a file             &gt;&gt;&gt; with open('file.krn',  'r', newline='', encoding='utf-8', errors='ignore') as f: # We encourage you to use these open file options             &gt;&gt;&gt;     content = f.read()             &gt;&gt;&gt; importer.import_string(content)             &gt;&gt;&gt; document = importer.import_string(content)</p>"},{"location":"reference/#kernpy.core.InstrumentToken","title":"<code>InstrumentToken</code>","text":"<p>               Bases: <code>AbstractToken</code></p> <p>InstrumentToken class stores the instruments of the score.</p> <p>These tokens usually look like <code>*I\"Organo</code>.</p>"},{"location":"reference/#kernpy.core.KernTypeExporter","title":"<code>KernTypeExporter</code>","text":"<p>               Bases: <code>Enum</code></p> <p>Options for exporting a kern file.</p> Example"},{"location":"reference/#kernpy.core.KernTypeExporter--create-the-importer","title":"Create the importer","text":"<p>hi = Importer()</p>"},{"location":"reference/#kernpy.core.KernTypeExporter--read-the-file","title":"Read the file","text":"<p>document = hi.import_file('file.krn')</p>"},{"location":"reference/#kernpy.core.KernTypeExporter--export-the-file","title":"Export the file","text":"<p>options = ExportOptions(spine_types=['**kern'], token_categories=BEKERN_CATEGORIES, kernType=KernTypeExporter.normalizedKern) exporter = Exporter() exported = exporter.export_string(options)</p>"},{"location":"reference/#kernpy.core.KeySignatureToken","title":"<code>KeySignatureToken</code>","text":"<p>               Bases: <code>SignatureToken</code></p> <p>KeySignatureToken class.</p>"},{"location":"reference/#kernpy.core.KeyToken","title":"<code>KeyToken</code>","text":"<p>               Bases: <code>SignatureToken</code></p> <p>KeyToken class.</p>"},{"location":"reference/#kernpy.core.MHXMToken","title":"<code>MHXMToken</code>","text":"<p>               Bases: <code>AbstractToken</code></p> <p>MHXMToken class.</p>"},{"location":"reference/#kernpy.core.MetacommentToken","title":"<code>MetacommentToken</code>","text":"<p>               Bases: <code>AbstractToken</code></p> <p>MetacommentToken class stores the metacomments of the score. Usually these are comments starting with <code>!!</code>.</p>"},{"location":"reference/#kernpy.core.MeterSymbolToken","title":"<code>MeterSymbolToken</code>","text":"<p>               Bases: <code>SignatureToken</code></p> <p>MeterSymbolToken class.</p>"},{"location":"reference/#kernpy.core.MultistageTree","title":"<code>MultistageTree</code>","text":"<p>MultistageTree class.</p>"},{"location":"reference/#kernpy.core.MultistageTree.__deepcopy__","title":"<code>__deepcopy__(memo)</code>","text":"<p>Create a deep copy of the MultistageTree object.</p>"},{"location":"reference/#kernpy.core.MultistageTree.__init__","title":"<code>__init__()</code>","text":"<p>Constructor for MultistageTree class.</p> <p>Create an empty Node object to serve as the root,         and start the stages list by placing this root node inside a new list.</p>"},{"location":"reference/#kernpy.core.MultistageTree.add_node","title":"<code>add_node(stage, parent, token, last_spine_operator_node, previous_signature_nodes, header_node=None)</code>","text":"<p>Add a new node to the tree. Args:     stage (int):     parent (Node):     token (Optional[AbstractToken]):     last_spine_operator_node (Optional[Node]):     previous_signature_nodes (Optional[SignatureNodes]):     header_node (Optional[Node]):</p> <p>Returns: Node - The added node object.</p>"},{"location":"reference/#kernpy.core.MultistageTree.dfs","title":"<code>dfs(visit_method)</code>","text":"<p>Depth-first search (DFS)</p> <p>Parameters:</p> Name Type Description Default <code>visit_method</code> <code>TreeTraversalInterface</code> <p>The tree traversal interface.</p> required <p>Returns: None</p>"},{"location":"reference/#kernpy.core.MultistageTree.dfs_iterative","title":"<code>dfs_iterative(visit_method)</code>","text":"<p>Depth-first search (DFS). Iterative version.</p> <p>Parameters:</p> Name Type Description Default <code>visit_method</code> <code>TreeTraversalInterface</code> <p>The tree traversal interface.</p> required <p>Returns: None</p>"},{"location":"reference/#kernpy.core.Node","title":"<code>Node</code>","text":"<p>Node class.</p> <p>This class represents a node in a tree. The <code>Node</code> class is responsible for storing the main information of the **kern file.</p> <p>Attributes:</p> Name Type Description <code>id(int)</code> <p>The unique id of the node.</p> <code>token(Optional[AbstractToken])</code> <p>The specific token of the node. The token can be a <code>KeyToken</code>, <code>MeterSymbolToken</code>, etc...</p> <code>parent(Optional['Node'])</code> <p>A reference to the parent <code>Node</code>. If the parent is the root, the parent is None.</p> <code>children(List['Node'])</code> <p>A list of the children <code>Node</code>.</p> <code>stage(int)</code> <p>The stage of the node in the tree. The stage is similar to a row in the **kern file.</p> <code>last_spine_operator_node(Optional['Node'])</code> <p>The last spine operator node.</p> <code>last_signature_nodes(Optional[SignatureNodes])</code> <p>A reference to the last <code>SignatureNodes</code> instance.</p> <code>header_node(Optional['Node'])</code> <p>The header node.</p>"},{"location":"reference/#kernpy.core.Node.__init__","title":"<code>__init__(stage, token, parent, last_spine_operator_node, last_signature_nodes, header_node)</code>","text":"<p>Create an instance of Node.</p> <p>Parameters:</p> Name Type Description Default <code>stage</code> <code>int</code> <p>The stage of the node in the tree. The stage is similar to a row in the **kern file.</p> required <code>token</code> <code>Optional[AbstractToken]</code> <p>The specific token of the node. The token can be a <code>KeyToken</code>, <code>MeterSymbolToken</code>, etc...</p> required <code>parent</code> <code>Optional[Node]</code> <p>A reference to the parent <code>Node</code>. If the parent is the root, the parent is None.</p> required <code>last_spine_operator_node</code> <code>Optional[Node]</code> <p>The last spine operator node.</p> required <code>last_signature_nodes</code> <code>Optional[SignatureNodes]</code> <p>A reference to the last <code>SignatureNodes</code> instance.</p> required <code>header_node</code> <code>Optional[Node]</code> <p>The header node.</p> required"},{"location":"reference/#kernpy.core.Node.count_nodes_by_stage","title":"<code>count_nodes_by_stage()</code>","text":"<p>Count the number of nodes in each stage of the tree.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; node = Node(0, None, None, None, None, None)\n&gt;&gt;&gt; ...\n&gt;&gt;&gt; node.count_nodes_by_stage()\n[2, 2, 2, 2, 3, 3, 3, 2]\n</code></pre> <p>Returns:</p> Type Description <code>List[int]</code> <p>List[int]: A list with the number of nodes in each stage of the tree.</p>"},{"location":"reference/#kernpy.core.Node.dfs","title":"<code>dfs(tree_traversal)</code>","text":"<p>Depth-first search (DFS)</p> <p>Parameters:</p> Name Type Description Default <code>tree_traversal</code> <code>TreeTraversalInterface</code> <p>The tree traversal interface. Object used to visit the nodes of the tree.</p> required"},{"location":"reference/#kernpy.core.Node.dfs_iterative","title":"<code>dfs_iterative(tree_traversal)</code>","text":"<p>Depth-first search (DFS). Iterative version.</p> <p>Parameters:</p> Name Type Description Default <code>tree_traversal</code> <code>TreeTraversalInterface</code> <p>The tree traversal interface. Object used to visit the nodes of the tree.</p> required <p>Returns: None</p>"},{"location":"reference/#kernpy.core.NoteRestToken","title":"<code>NoteRestToken</code>","text":"<p>               Bases: <code>Token</code></p> <p>NoteRestToken class.</p> <p>Attributes:</p> Name Type Description <code>pitch_duration_subtokens</code> <code>list</code> <p>The subtokens for the pitch and duration</p> <code>decoration_subtokens</code> <code>list</code> <p>The subtokens for the decorations</p>"},{"location":"reference/#kernpy.core.NoteRestToken.__init__","title":"<code>__init__(encoding, pitch_duration_subtokens, decoration_subtokens)</code>","text":"<p>NoteRestToken constructor.</p> <p>Parameters:</p> Name Type Description Default <code>encoding</code> <code>str</code> <p>The complete unprocessed encoding</p> required <code>pitch_duration_subtokens</code> <p>The subtokens for the pitch and duration</p> required <code>decoration_subtokens</code> <p>The subtokens for the decorations. Individual elements of the token, of type Subtoken</p> required"},{"location":"reference/#kernpy.core.PitchRest","title":"<code>PitchRest</code>","text":"<p>Represents a name or a rest in a note.</p> <p>The name is represented using the International Standard Organization (ISO) name notation. The first line below the staff is the C4 in G clef. The above C is C5, the below C is C3, etc.</p> <p>The Humdrum Kern format uses the following name representation: 'c' = C4 'cc' = C5 'ccc' = C6 'cccc' = C7</p> <p>'C' = C3 'CC' = C2 'CCC' = C1</p> <p>The rests are represented by the letter 'r'. The rests do not have name.</p> <p>This class do not limit the name ranges.</p> <p>In the following example, the name is represented by the letter 'c'. The name of 'c' is C4, 'cc' is C5, 'ccc' is C6.</p> <pre><code>**kern\n*clefG2\n2c          // C4\n2cc         // C5\n2ccc        // C6\n2C          // C3\n2CC         // C2\n2CCC        // C1\n*-\n</code></pre>"},{"location":"reference/#kernpy.core.PitchRest.__eq__","title":"<code>__eq__(other)</code>","text":"<p>Compare two pitches and rests.</p> <p>Parameters:</p> Name Type Description Default <code>other</code> <code>PitchRest</code> <p>The other name to compare</p> required <p>Returns (bool):     True if the pitches are equal, False otherwise</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; pitch_rest = PitchRest('c')\n&gt;&gt;&gt; pitch_rest2 = PitchRest('c')\n&gt;&gt;&gt; pitch_rest == pitch_rest2\nTrue\n&gt;&gt;&gt; pitch_rest = PitchRest('c')\n&gt;&gt;&gt; pitch_rest2 = PitchRest('ccc')\n&gt;&gt;&gt; pitch_rest == pitch_rest2\nFalse\n&gt;&gt;&gt; pitch_rest = PitchRest('c')\n&gt;&gt;&gt; pitch_rest2 = PitchRest('r')\n&gt;&gt;&gt; pitch_rest == pitch_rest2\nFalse\n&gt;&gt;&gt; pitch_rest = PitchRest('r')\n&gt;&gt;&gt; pitch_rest2 = PitchRest('r')\n&gt;&gt;&gt; pitch_rest == pitch_rest2\nTrue\n</code></pre>"},{"location":"reference/#kernpy.core.PitchRest.__ge__","title":"<code>__ge__(other)</code>","text":"<p>Compare two pitches. If any of the PitchRest is a rest, the comparison raise an exception. Args:     other (PitchRest): The other name to compare</p> <p>Returns (bool):     True if this name is higher or equal than the other, False otherwise</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; pitch_rest = PitchRest('c')\n&gt;&gt;&gt; pitch_rest2 = PitchRest('d')\n&gt;&gt;&gt; pitch_rest &gt;= pitch_rest2\nFalse\n&gt;&gt;&gt; pitch_rest = PitchRest('c')\n&gt;&gt;&gt; pitch_rest2 = PitchRest('c')\n&gt;&gt;&gt; pitch_rest &gt;= pitch_rest2\nTrue\n&gt;&gt;&gt; pitch_rest = PitchRest('c')\n&gt;&gt;&gt; pitch_rest2 = PitchRest('b')\n&gt;&gt;&gt; pitch_rest &gt;= pitch_rest2\nTrue\n&gt;&gt;&gt; pitch_rest = PitchRest('r')\n&gt;&gt;&gt; pitch_rest2 = PitchRest('c')\n&gt;&gt;&gt; pitch_rest &gt;= pitch_rest2\nTraceback (most recent call last):\n...\nValueError: ...\n&gt;&gt;&gt; pitch_rest = PitchRest('r')\n&gt;&gt;&gt; pitch_rest2 = PitchRest('r')\n&gt;&gt;&gt; pitch_rest &gt;= pitch_rest2\nTraceback (most recent call last):\n...\nValueError: ...\n</code></pre>"},{"location":"reference/#kernpy.core.PitchRest.__gt__","title":"<code>__gt__(other)</code>","text":"<p>Compare two pitches.</p> <p>If any of the pitches is a rest, the comparison raise an exception.</p> <p>Parameters:</p> Name Type Description Default <code>other</code> <code>PitchRest</code> <p>The other name to compare</p> required <p>Returns (bool): True if this name is higher than the other, False otherwise</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; pitch_rest = PitchRest('c')\n&gt;&gt;&gt; pitch_rest2 = PitchRest('d')\n&gt;&gt;&gt; pitch_rest &gt; pitch_rest2\nFalse\n&gt;&gt;&gt; pitch_rest = PitchRest('c')\n&gt;&gt;&gt; pitch_rest2 = PitchRest('c')\n&gt;&gt;&gt; pitch_rest &gt; pitch_rest2\nFalse\n&gt;&gt;&gt; pitch_rest = PitchRest('c')\n&gt;&gt;&gt; pitch_rest2 = PitchRest('b')\n&gt;&gt;&gt; pitch_rest &gt; pitch_rest2\nTrue\n&gt;&gt;&gt; pitch_rest = PitchRest('r')\n&gt;&gt;&gt; pitch_rest2 = PitchRest('c')\n&gt;&gt;&gt; pitch_rest &gt; pitch_rest2\nTraceback (most recent call last):\n...\nValueError: ...\n&gt;&gt;&gt; pitch_rest = PitchRest('r')\n&gt;&gt;&gt; pitch_rest2 = PitchRest('r')\n&gt;&gt;&gt; pitch_rest &gt; pitch_rest2\nTraceback (most recent call last):\nValueError: ...\n</code></pre>"},{"location":"reference/#kernpy.core.PitchRest.__init__","title":"<code>__init__(raw_pitch)</code>","text":"<p>Create a new PitchRest object.</p> <p>Parameters:</p> Name Type Description Default <code>raw_pitch</code> <code>str</code> <p>name representation in Humdrum Kern format</p> required <p>Examples:</p> <pre><code>&gt;&gt;&gt; pitch_rest = PitchRest('c')\n&gt;&gt;&gt; pitch_rest = PitchRest('r')\n&gt;&gt;&gt; pitch_rest = PitchRest('DDD')\n</code></pre>"},{"location":"reference/#kernpy.core.PitchRest.__le__","title":"<code>__le__(other)</code>","text":"<p>Compare two pitches. If any of the PitchRest is a rest, the comparison raise an exception. Args:     other (PitchRest): The other name to compare</p> <p>Returns (bool): True if this name is lower or equal than the other, False otherwise</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; pitch_rest = PitchRest('c')\n&gt;&gt;&gt; pitch_rest2 = PitchRest('d')\n&gt;&gt;&gt; pitch_rest &lt;= pitch_rest2\nTrue\n&gt;&gt;&gt; pitch_rest = PitchRest('c')\n&gt;&gt;&gt; pitch_rest2 = PitchRest('c')\n&gt;&gt;&gt; pitch_rest &lt;= pitch_rest2\nTrue\n&gt;&gt;&gt; pitch_rest = PitchRest('c')\n&gt;&gt;&gt; pitch_rest2 = PitchRest('b')\n&gt;&gt;&gt; pitch_rest &lt;= pitch_rest2\nFalse\n&gt;&gt;&gt; pitch_rest = PitchRest('r')\n&gt;&gt;&gt; pitch_rest2 = PitchRest('c')\n&gt;&gt;&gt; pitch_rest &lt;= pitch_rest2\nTraceback (most recent call last):\n...\nValueError: ...\n&gt;&gt;&gt; pitch_rest = PitchRest('r')\n&gt;&gt;&gt; pitch_rest2 = PitchRest('r')\n&gt;&gt;&gt; pitch_rest &lt;= pitch_rest2\nTraceback (most recent call last):\n...\nValueError: ...\n</code></pre>"},{"location":"reference/#kernpy.core.PitchRest.__lt__","title":"<code>__lt__(other)</code>","text":"<p>Compare two pitches.</p> <p>If any of the pitches is a rest, the comparison raise an exception.</p> <p>Parameters:</p> Name Type Description Default <code>other</code> <code>PitchRest</code> <p>The other name to compare</p> required <p>Returns:</p> Type Description <code>bool</code> <p>True if this name is lower than the other, False otherwise</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; pitch_rest = PitchRest('c')\n&gt;&gt;&gt; pitch_rest2 = PitchRest('d')\n&gt;&gt;&gt; pitch_rest &lt; pitch_rest2\nTrue\n&gt;&gt;&gt; pitch_rest = PitchRest('c')\n&gt;&gt;&gt; pitch_rest2 = PitchRest('c')\n&gt;&gt;&gt; pitch_rest &lt; pitch_rest2\nFalse\n&gt;&gt;&gt; pitch_rest = PitchRest('c')\n&gt;&gt;&gt; pitch_rest2 = PitchRest('b')\n&gt;&gt;&gt; pitch_rest &lt; pitch_rest2\nFalse\n&gt;&gt;&gt; pitch_rest = PitchRest('r')\n&gt;&gt;&gt; pitch_rest2 = PitchRest('c')\n&gt;&gt;&gt; pitch_rest &lt; pitch_rest2\nTraceback (most recent call last):\n...\nValueError: ...\n&gt;&gt;&gt; pitch_rest = PitchRest('r')\n&gt;&gt;&gt; pitch_rest2 = PitchRest('r')\n&gt;&gt;&gt; pitch_rest &lt; pitch_rest2\nTraceback (most recent call last):\n...\nValueError: ...\n</code></pre>"},{"location":"reference/#kernpy.core.PitchRest.__ne__","title":"<code>__ne__(other)</code>","text":"<p>Compare two pitches and rests. Args:     other (PitchRest): The other name to compare</p> <p>Returns (bool):     True if the pitches are different, False otherwise</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; pitch_rest = PitchRest('c')\n&gt;&gt;&gt; pitch_rest2 = PitchRest('c')\n&gt;&gt;&gt; pitch_rest != pitch_rest2\nFalse\n&gt;&gt;&gt; pitch_rest = PitchRest('c')\n&gt;&gt;&gt; pitch_rest2 = PitchRest('ccc')\n&gt;&gt;&gt; pitch_rest != pitch_rest2\nTrue\n&gt;&gt;&gt; pitch_rest = PitchRest('c')\n&gt;&gt;&gt; pitch_rest2 = PitchRest('r')\n&gt;&gt;&gt; pitch_rest != pitch_rest2\nTrue\n&gt;&gt;&gt; pitch_rest = PitchRest('r')\n&gt;&gt;&gt; pitch_rest2 = PitchRest('r')\n&gt;&gt;&gt; pitch_rest != pitch_rest2\nFalse\n</code></pre>"},{"location":"reference/#kernpy.core.PitchRest.is_rest","title":"<code>is_rest()</code>","text":"<p>Check if the name is a rest.</p> <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>True if the name is a rest, False otherwise.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; pitch_rest = PitchRest('c')\n&gt;&gt;&gt; pitch_rest.is_rest()\nFalse\n&gt;&gt;&gt; pitch_rest = PitchRest('r')\n&gt;&gt;&gt; pitch_rest.is_rest()\nTrue\n</code></pre>"},{"location":"reference/#kernpy.core.PitchRest.pitch_comparator","title":"<code>pitch_comparator(pitch_a, pitch_b)</code>  <code>staticmethod</code>","text":"<p>Compare two pitches of the same octave.</p> <p>The lower name is 'a'. So 'a' &lt; 'b' &lt; 'c' &lt; 'd' &lt; 'e' &lt; 'f' &lt; 'g'</p> <p>Parameters:</p> Name Type Description Default <code>pitch_a</code> <code>str</code> <p>One name of 'abcdefg'</p> required <code>pitch_b</code> <code>str</code> <p>Another name of 'abcdefg'</p> required <p>Returns:</p> Type Description <code>int</code> <p>-1 if pitch1 is lower than pitch2</p> <code>int</code> <p>0 if pitch1 is equal to pitch2</p> <code>int</code> <p>1 if pitch1 is higher than pitch2</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; PitchRest.pitch_comparator('c', 'c')\n0\n&gt;&gt;&gt; PitchRest.pitch_comparator('c', 'd')\n-1\n&gt;&gt;&gt; PitchRest.pitch_comparator('d', 'c')\n1\n</code></pre>"},{"location":"reference/#kernpy.core.SignatureNodes","title":"<code>SignatureNodes</code>","text":"<p>SignatureNodes class.</p> <p>This class is used to store the last signature nodes of a tree. It is used to keep track of the last signature nodes.</p> <p>Attributes: nodes (dict): A dictionary that stores the last signature nodes. This way, we can add several tokens without repetitions. - The key is the signature descendant token class (KeyToken, MeterSymbolToken, etc...) - The value = node</p>"},{"location":"reference/#kernpy.core.SignatureNodes.__init__","title":"<code>__init__()</code>","text":"<p>Create an instance of SignatureNodes. Initialize the nodes as an empty dictionary.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; signature_nodes = SignatureNodes()\n&gt;&gt;&gt; signature_nodes.nodes\n{}\n</code></pre>"},{"location":"reference/#kernpy.core.SignatureNodes.clone","title":"<code>clone()</code>","text":"<p>Create a deep copy of the SignatureNodes instance. Returns: A new instance of SignatureNodes with nodes copied.</p>"},{"location":"reference/#kernpy.core.SignatureNodes.clone--todo-this-method-is-equivalent-to-the-following-code","title":"TODO: This method is equivalent to the following code:","text":""},{"location":"reference/#kernpy.core.SignatureNodes.clone--from-copy-import-deepcopy","title":"from copy import deepcopy","text":""},{"location":"reference/#kernpy.core.SignatureNodes.clone--signature_nodes_to_copy-signaturenodes","title":"signature_nodes_to_copy = SignatureNodes()","text":""},{"location":"reference/#kernpy.core.SignatureNodes.clone--_1","title":"...","text":""},{"location":"reference/#kernpy.core.SignatureNodes.clone--result-deepcopysignature_nodes_to_copy","title":"result = deepcopy(signature_nodes_to_copy)","text":""},{"location":"reference/#kernpy.core.SignatureNodes.clone--it-should-be-tested","title":"It should be tested.","text":""},{"location":"reference/#kernpy.core.SignatureToken","title":"<code>SignatureToken</code>","text":"<p>               Bases: <code>SimpleToken</code></p> <p>SignatureToken class for all signature tokens. It will be overridden by more specific classes.</p>"},{"location":"reference/#kernpy.core.SimpleToken","title":"<code>SimpleToken</code>","text":"<p>               Bases: <code>Token</code></p> <p>SimpleToken class.</p>"},{"location":"reference/#kernpy.core.SpineOperationToken","title":"<code>SpineOperationToken</code>","text":"<p>               Bases: <code>AbstractToken</code></p> <p>SpineOperationToken class.</p> <p>This token represents different operations in the Humdrum kern encoding. These are the available operations:     - <code>*-</code>:  spine-path terminator.     - <code>*</code>: null interpretation.     - <code>*+</code>: add spines.     - <code>*^</code>: split spines.     - <code>*x</code>: exchange spines.</p> <p>Attributes:</p> Name Type Description <code>cancelled_at_stage</code> <code>int</code> <p>The stage at which the operation was cancelled. Defaults to None.</p>"},{"location":"reference/#kernpy.core.SpineOperationToken.is_cancelled_at","title":"<code>is_cancelled_at(stage)</code>","text":"<p>Checks if the operation was cancelled at the given stage.</p> <p>Parameters:</p> Name Type Description Default <code>stage</code> <code>int</code> <p>The stage at which the operation was cancelled.</p> required <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>True if the operation was cancelled at the given stage, False otherwise.</p>"},{"location":"reference/#kernpy.core.Subtoken","title":"<code>Subtoken</code>","text":"<p>Subtoken class</p> <p>Attributes:</p> Name Type Description <code>encoding</code> <p>The complete unprocessed encoding</p> <code>category</code> <p>The subtoken category, one of SubTokenCategory</p>"},{"location":"reference/#kernpy.core.Subtoken.__init__","title":"<code>__init__(encoding, category)</code>","text":"<p>Subtoken constructor</p> <p>Parameters:</p> Name Type Description Default <code>encoding</code> <p>The complete unprocessed encoding</p> required <code>category</code> <p>The subtoken category, one of SubTokenCategory</p> required"},{"location":"reference/#kernpy.core.TimeSignatureToken","title":"<code>TimeSignatureToken</code>","text":"<p>               Bases: <code>SignatureToken</code></p> <p>TimeSignatureToken class.</p>"},{"location":"reference/#kernpy.core.Token","title":"<code>Token</code>","text":"<p>               Bases: <code>AbstractToken</code>, <code>ABC</code></p> <p>Abstract Token class.</p>"},{"location":"reference/#kernpy.core.TokenCategory","title":"<code>TokenCategory</code>","text":"<p>               Bases: <code>Enum</code></p> <p>Options for the category of a token.</p> <p>This is used to determine what kind of token should be exported.</p>"},{"location":"reference/#kernpy.core.TokensTraversal","title":"<code>TokensTraversal</code>","text":"<p>               Bases: <code>TreeTraversalInterface</code></p>"},{"location":"reference/#kernpy.core.TokensTraversal.__init__","title":"<code>__init__(non_repeated, filter_by_categories)</code>","text":"<p>Create an instance of <code>TokensTraversal</code>. Args:     non_repeated: If True, only unique tokens are returned. If False, all tokens are returned.     filter_by_categories: A list of categories to filter the tokens. If None, all tokens are returned.</p>"},{"location":"reference/#kernpy.core.TraversalFactory","title":"<code>TraversalFactory</code>","text":""},{"location":"reference/#kernpy.core.TraversalFactory.create","title":"<code>create(traversal_type, non_repeated, filter_by_categories)</code>  <code>classmethod</code>","text":"<p>Create an instance of <code>TreeTraversalInterface</code> based on the <code>traversal_type</code>. Args:     non_repeated:     filter_by_categories:     traversal_type: The type of traversal to use. Possible values are:         - \"metacomments\"         - \"tokens\"</p> <p>Returns: An instance of <code>TreeTraversalInterface</code>.</p>"},{"location":"reference/#kernpy.core.TreeTraversalInterface","title":"<code>TreeTraversalInterface</code>","text":"<p>               Bases: <code>ABC</code></p> <p>TreeTraversalInterface class.</p> <p>This class is used to traverse the tree. The <code>TreeTraversalInterface</code> class is responsible for implementing the <code>visit</code> method.</p>"},{"location":"reference/#kernpy.core.concat","title":"<code>concat(contents, options, strict=False)</code>","text":"<pre><code>Concatenate multiple **kern strings.\n\nArgs:\n    contents (Sequence[str]): List of **kern strings\n    options (ExportOptions): Export options for the concatenated string\n    strict (Optional[bool]): If True, raise an error if the concatenated string exceeds the maximum length. If False, truncate the concatenated string to the maximum length.\n\nReturns: Concatenated **kern string\n\nExamples:\n    &gt;&gt;&gt; import kernpy as kp\n    &gt;&gt;&gt; contents = ['**kern\n</code></pre> <p>4e 4f 4g - ', 'kern 4a 4b 4c - ']         &gt;&gt;&gt; kp.concat(contents)         'kern 4e 4f 4g *- kern 4a 4b 4c *-'</p>"},{"location":"reference/#kernpy.core.create","title":"<code>create(content, strict=False)</code>","text":"<pre><code>Create a Document object from a string encoded in Humdrum **kern format.\n\nArgs:\n    content: String encoded in Humdrum **kern format\n    strict: If True, raise an error if the **kern file has any errors. Otherwise, return a list of errors.\n\nReturns (Document, list): Document object and list of error messages. Empty list if no errors.\n\nExamples:\n    &gt;&gt;&gt; import kernpy as kp\n    &gt;&gt;&gt; document, errors = kp.create('**kern\n</code></pre> <p>4e 4f 4g - ')         &gt;&gt;&gt; if len(errors) &gt; 0:         &gt;&gt;&gt;     print(errors)         ['Error: Invalid kern spine: 1', 'Error: Invalid *kern spine: 2']</p>"},{"location":"reference/#kernpy.core.ekern_to_krn","title":"<code>ekern_to_krn(input_file, output_file)</code>","text":"<p>Convert one .ekrn file to .krn file.</p> <p>Parameters:</p> Name Type Description Default <code>input_file</code> <code>str</code> <p>Filepath to the input **ekern</p> required <code>output_file</code> <code>str</code> <p>Filepath to the output **kern</p> required <p>Returns:     None</p> Example"},{"location":"reference/#kernpy.core.ekern_to_krn--convert-ekrn-to-krn","title":"Convert .ekrn to .krn","text":"<p>ekern_to_krn('path/to/file.ekrn', 'path/to/file.krn')</p>"},{"location":"reference/#kernpy.core.ekern_to_krn--convert-a-list-of-ekrn-files-to-krn-files","title":"Convert a list of .ekrn files to .krn files","text":"<pre><code>ekrn_files = your_modue.get_files()\n\n# Use the wrapper to avoid stopping the process if an error occurs\ndef ekern_to_krn_wrapper(ekern_file, kern_file):\n    try:\n        ekern_to_krn(ekrn_files, output_folder)\n    except Exception as e:\n        print(f'Error:{e}')\n\n# Convert all the files\nfor ekern_file in ekrn_files:\n    output_file = ekern_file.replace('.ekrn', '.krn')\n    ekern_to_krn_wrapper(ekern_file, output_file)\n</code></pre>"},{"location":"reference/#kernpy.core.export","title":"<code>export(document, options)</code>","text":"<p>Export a Document object to a string.</p> <p>Parameters:</p> Name Type Description Default <code>document</code> <code>Document</code> <p>Document object to export</p> required <code>options</code> <code>ExportOptions</code> <p>Export options</p> required <p>Returns: Exported string</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; import kernpy as kp\n&gt;&gt;&gt; document, errors = kp.read('path/to/file.krn')\n&gt;&gt;&gt; options = kp.ExportOptions()\n&gt;&gt;&gt; content = kp.export(document, options)\n</code></pre>"},{"location":"reference/#kernpy.core.get_kern_from_ekern","title":"<code>get_kern_from_ekern(ekern_content)</code>","text":"<p>Read the content of a ekern file and return the kern content.</p> <p>Parameters:</p> Name Type Description Default <code>ekern_content</code> <code>str</code> <p>The content of the **ekern file.</p> required <p>Returns:     The content of the **kern file.</p> Example <pre><code># Read **ekern file\nekern_file = 'path/to/file.ekrn'\nwith open(ekern_file, 'r') as file:\n    ekern_content = file.read()\n\n# Get **kern content\nkern_content = get_kern_from_ekern(ekern_content)\nwith open('path/to/file.krn', 'w') as file:\n    file.write(kern_content)\n\n</code></pre>"},{"location":"reference/#kernpy.core.get_spine_types","title":"<code>get_spine_types(document, spine_types=None)</code>","text":"<p>Get the spines of a Document object.</p> <p>Parameters:</p> Name Type Description Default <code>document</code> <code>Document</code> <p>Document object to get spines from</p> required <code>spine_types</code> <code>Optional[Sequence[str]]</code> <p>List of spine types to get. If None, all spines are returned.</p> <code>None</code> <p>Returns (List[str]): List of spines</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; import kernpy as kp\n&gt;&gt;&gt; document, _ = kp.read('path/to/file.krn')\n&gt;&gt;&gt; kp.get_spine_types(document)\n['**kern', '**kern', '**kern', '**kern', '**root', '**harm']\n&gt;&gt;&gt; kp.get_spine_types(document, None)\n['**kern', '**kern', '**kern', '**kern', '**root', '**harm']\n&gt;&gt;&gt; kp.get_spine_types(document, ['**kern'])\n['**kern', '**kern', '**kern', '**kern']\n&gt;&gt;&gt; kp.get_spine_types(document, ['**kern', '**root'])\n['**kern', '**kern', '**kern', '**kern', '**root']\n&gt;&gt;&gt; kp.get_spine_types(document, ['**kern', '**root', '**harm'])\n['**kern', '**kern', '**kern', '**kern', '**root', '**harm']\n&gt;&gt;&gt; kp.get_spine_types(document, [])\n[]\n</code></pre>"},{"location":"reference/#kernpy.core.kern_to_ekern","title":"<code>kern_to_ekern(input_file, output_file)</code>","text":"<p>Convert one .krn file to .ekrn file</p> <p>Parameters:</p> Name Type Description Default <code>input_file</code> <code>str</code> <p>Filepath to the input **kern</p> required <code>output_file</code> <code>str</code> <p>Filepath to the output **ekern</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> Example"},{"location":"reference/#kernpy.core.kern_to_ekern--convert-krn-to-ekrn","title":"Convert .krn to .ekrn","text":"<p>kern_to_ekern('path/to/file.krn', 'path/to/file.ekrn')</p>"},{"location":"reference/#kernpy.core.kern_to_ekern--convert-a-list-of-krn-files-to-ekrn-files","title":"Convert a list of .krn files to .ekrn files","text":"<pre><code>krn_files = your_module.get_files()\n\n# Use the wrapper to avoid stopping the process if an error occurs\ndef kern_to_ekern_wrapper(krn_file, ekern_file):\n    try:\n        kern_to_ekern(krn_file, ekern_file)\n    except Exception as e:\n        print(f'Error:{e}')\n\n# Convert all the files\nfor krn_file in krn_files:\n    output_file = krn_file.replace('.krn', '.ekrn')\n    kern_to_ekern_wrapper(krn_file, output_file)\n</code></pre>"},{"location":"reference/#kernpy.core.read","title":"<code>read(path, strict=False)</code>","text":"<p>Read a Humdrum **kern file.</p> <p>Parameters:</p> Name Type Description Default <code>path</code> <code>Union[str, Path]</code> <p>File path to read</p> required <code>strict</code> <code>Optional[bool]</code> <p>If True, raise an error if the **kern file has any errors. Otherwise, return a list of errors.</p> <code>False</code> <p>Returns (Document, List[str]): Document object and list of error messages. Empty list if no errors.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; import kernpy as kp\n&gt;&gt;&gt; document, _ = kp.read('path/to/file.krn')\n</code></pre> <pre><code>&gt;&gt;&gt; document, errors = kp.read('path/to/file.krn')\n&gt;&gt;&gt; if len(errors) &gt; 0:\n&gt;&gt;&gt;     print(errors)\n['Error: Invalid **kern spine: 1', 'Error: Invalid **kern spine: 2']\n</code></pre>"},{"location":"reference/#kernpy.core.store","title":"<code>store(document, path, options)</code>","text":"<p>Store a Document object to a file.</p> <p>Parameters:</p> Name Type Description Default <code>document</code> <code>Document</code> <p>Document object to store</p> required <code>path</code> <code>Union[str, Path]</code> <p>File path to store</p> required <code>options</code> <code>ExportOptions</code> <p>Export options</p> required <p>Returns: None</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; import kernpy as kp\n&gt;&gt;&gt; document, errors = kp.read('path/to/file.krn')\n&gt;&gt;&gt; options = kp.ExportOptions()\n&gt;&gt;&gt; kp.store(document, 'path/to/store.krn', options)\n</code></pre>"},{"location":"reference/#kernpy.core.store_graph","title":"<code>store_graph(document, path)</code>","text":"<p>Create a graph representation of a Document object using Graphviz. Save the graph to a file.</p> <p>Parameters:</p> Name Type Description Default <code>document</code> <code>Document</code> <p>Document object to create graph from</p> required <code>path</code> <code>str</code> <p>File path to save the graph</p> required <p>Returns: None</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; import kernpy as kp\n&gt;&gt;&gt; document, errors = kp.read('path/to/file.krn')\n&gt;&gt;&gt; kp.store_graph(document, 'path/to/graph.dot')\n</code></pre>"},{"location":"reference/#kernpy.util.ExportOptions","title":"<code>ExportOptions</code>","text":"<p><code>ExportOptions</code> class.</p> <p>Store the options to export a **kern file.</p>"},{"location":"reference/#kernpy.util.ExportOptions.__eq__","title":"<code>__eq__(other)</code>","text":"<p>Compare two ExportOptions objects.</p> <p>Parameters:</p> Name Type Description Default <code>other</code> <code>ExportOptions</code> <p>The other ExportOptions object to compare.</p> required <p>Returns (bool):     True if the objects are equal, False otherwise.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; options1 = ExportOptions(spine_types=['**kern'], token_categories=BEKERN_CATEGORIES)\n&gt;&gt;&gt; options2 = ExportOptions(spine_types=['**kern'], token_categories=BEKERN_CATEGORIES)\n&gt;&gt;&gt; options1 == options2\nTrue\n</code></pre> <pre><code>&gt;&gt;&gt; options3 = ExportOptions(spine_types=['**kern', '**harm'], token_categories=BEKERN_CATEGORIES)\n&gt;&gt;&gt; options1 == options3\nFalse\n</code></pre>"},{"location":"reference/#kernpy.util.ExportOptions.__init__","title":"<code>__init__(spine_types=None, token_categories=None, from_measure=None, to_measure=None, kern_type=KernTypeExporter.normalizedKern, instruments=None, show_measure_numbers=False, spine_ids=None)</code>","text":"<p>Create a new ExportOptions object.</p> <p>Parameters:</p> Name Type Description Default <code>spine_types</code> <code>Iterable</code> <p>kern, mens, etc...</p> <code>None</code> <code>token_categories</code> <code>Iterable</code> <p>TokenCategory</p> <code>None</code> <code>from_measure</code> <code>int</code> <p>The measure to start exporting. When None, the exporter will start from the beginning of the file. The first measure is 1</p> <code>None</code> <code>to_measure</code> <code>int</code> <p>The measure to end exporting. When None, the exporter will end at the end of the file.</p> <code>None</code> <code>kern_type</code> <code>KernTypeExporter</code> <p>The type of the kern file to export.</p> <code>normalizedKern</code> <code>instruments</code> <code>Iterable</code> <p>The instruments to export. When None, all the instruments will be exported.</p> <code>None</code> <code>show_measure_numbers</code> <code>Bool</code> <p>Show the measure numbers in the exported file.</p> <code>False</code> <code>spine_ids</code> <code>Iterable</code> <p>The ids of the spines to export. When None, all the spines will be exported. Spines ids start from 0 and they are increased by 1.</p> <code>None</code> Example <p>import kernpy</p> <p>Create the importer and read the file</p> <p>hi = Importer() document = hi.import_file('file.krn') exporter = Exporter()</p> <p>Export the file with the specified options</p> <p>options = ExportOptions(spine_types=['**kern'], token_categories=BEKERN_CATEGORIES) exported_data = exporter.export_string(document, options)</p> <p>Export only the lyrics</p> <p>options = ExportOptions(spine_types=['**kern'], token_categories=[TokenCategory.LYRICS]) exported_data = exporter.export_string(document, options)</p> <p>Export the comments</p> <p>options = ExportOptions(spine_types=['**kern'], token_categories=[TokenCategory.LINE_COMMENTS, TokenCategory.FIELD_COMMENTS]) exported_data = exporter.export_string(document, options)</p> <p>Export using the eKern version</p> <p>options = ExportOptions(spine_types=['**kern'], token_categories=BEKERN_CATEGORIES, kern_type=KernTypeExporter.eKern) exported_data = exporter.export_string(document, options)</p>"},{"location":"reference/#kernpy.util.ExportOptions.__ne__","title":"<code>__ne__(other)</code>","text":"<p>Compare two ExportOptions objects.</p> <p>Parameters:</p> Name Type Description Default <code>other</code> <code>ExportOptions</code> <p>The other ExportOptions object to compare.</p> required <p>Returns (bool):     True if the objects are not equal, False otherwise.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; options1 = ExportOptions(spine_types=['**kern'], token_categories=BEKERN_CATEGORIES)\n&gt;&gt;&gt; options2 = ExportOptions(spine_types=['**kern'], token_categories=BEKERN_CATEGORIES)\n&gt;&gt;&gt; options1 != options2\nFalse\n</code></pre> <pre><code>&gt;&gt;&gt; options3 = ExportOptions(spine_types=['**kern', '**harm'], token_categories=BEKERN_CATEGORIES)\n&gt;&gt;&gt; options1 != options3\nTrue\n</code></pre>"},{"location":"reference/#kernpy.util.Exporter","title":"<code>Exporter</code>","text":""},{"location":"reference/#kernpy.util.Exporter.append_row","title":"<code>append_row(document, node, options, row)</code>","text":"<p>Append a row to the row list if the node accomplishes the requirements. Args:     document (Document): The document with the spines.     node (Node): The node to append.     options (ExportOptions): The export options to filter the token.     row (list): The row to append.</p> <p>Returns (bool): True if the row was appended. False if the row was not appended.</p>"},{"location":"reference/#kernpy.util.Exporter.compute_header_type","title":"<code>compute_header_type(node)</code>","text":"<p>Compute the header type of the node.</p> <p>Parameters:</p> Name Type Description Default <code>node</code> <code>Node</code> <p>The node to compute.</p> required <p>Returns (Optional[Token]): The header type <code>Node</code>object. None if the current node is the header.</p>"},{"location":"reference/#kernpy.util.Exporter.export_options_validator","title":"<code>export_options_validator(document, options)</code>  <code>staticmethod</code>","text":"<p>Validate the export options. Raise an exception if the options are invalid.</p> <p>Parameters:</p> Name Type Description Default <code>document</code> <code>Document</code> <p><code>Document</code> - The document to export.</p> required <code>options</code> <code>ExportOptions</code> <p><code>ExportOptions</code> - The options to export the document.</p> required <p>Returns: None</p> Example <p>export_options_validator(document, options) ValueError: option from_measure must be &gt;=0 but -1 was found. export_options_validator(document, options2) None</p>"},{"location":"reference/#kernpy.util.Exporter.get_spine_types","title":"<code>get_spine_types(document, spine_types=None)</code>","text":"<p>Get the spine types from the document.</p> <p>Parameters:</p> Name Type Description Default <code>document</code> <code>Document</code> <p>The document with the spines.</p> required <code>spine_types</code> <code>list</code> <p>The spine types to export. If None, all the spine types will be exported.</p> <code>None</code> <p>Returns: A list with the spine types.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; exporter = Exporter()\n&gt;&gt;&gt; exporter.get_spine_types(document)\n['**kern', '**kern', '**kern', '**kern', '**root', '**harm']\n&gt;&gt;&gt; exporter.get_spine_types(document, None)\n['**kern', '**kern', '**kern', '**kern', '**root', '**harm']\n&gt;&gt;&gt; exporter.get_spine_types(document, ['**kern'])\n['**kern', '**kern', '**kern', '**kern']\n&gt;&gt;&gt; exporter.get_spine_types(document, ['**kern', '**root'])\n['**kern', '**kern', '**kern', '**kern', '**root']\n&gt;&gt;&gt; exporter.get_spine_types(document, ['**kern', '**root', '**harm'])\n['**kern', '**kern', '**kern', '**kern', '**root', '**harm']\n&gt;&gt;&gt; exporter.get_spine_types(document, [])\n[]\n</code></pre>"},{"location":"reference/#kernpy.util.Importer","title":"<code>Importer</code>","text":"<p>Importer class.</p> <p>Use this class to import the content from a file or a string to a <code>Document</code> object.</p>"},{"location":"reference/#kernpy.util.Importer.__init__","title":"<code>__init__()</code>","text":"<pre><code>    Create an instance of the importer.\n\n    Raises:\n        Exception: If the importer content is not a valid **kern file.\n\n    Examples:\n        # Create the importer\n        &gt;&gt;&gt; importer = Importer()\n\n        # Import the content from a file\n        &gt;&gt;&gt; document = importer.import_file('file.krn')\n\n        # Import the content from a string\n        &gt;&gt;&gt; document = importer.import_string(\"**kern\n</code></pre> <p>clefF4 c4 4d 4e 4f -\")</p>"},{"location":"reference/#kernpy.util.Importer.get_error_messages","title":"<code>get_error_messages()</code>","text":"<p>Get the error messages of the importer.</p> <p>Returns: str - The error messages split by a new line character.</p> <p>Examples:</p>"},{"location":"reference/#kernpy.util.Importer.get_error_messages--create-the-importer-and-read-the-file","title":"Create the importer and read the file","text":"<pre><code>&gt;&gt;&gt; importer = Importer()\n&gt;&gt;&gt; importer.import_file(Path('file.krn'))\n&gt;&gt;&gt; print(importer.get_error_messages())\n'Error: Invalid token in row 1'\n</code></pre>"},{"location":"reference/#kernpy.util.Importer.has_errors","title":"<code>has_errors()</code>","text":"<p>Check if the importer has any errors.</p> <p>Returns: bool - True if the importer has errors, False otherwise.</p> <p>Examples:</p>"},{"location":"reference/#kernpy.util.Importer.has_errors--create-the-importer-and-read-the-file","title":"Create the importer and read the file","text":"<pre><code>&gt;&gt;&gt; importer = Importer()\n&gt;&gt;&gt; importer.import_file(Path('file.krn'))    # file.krn has an error\n&gt;&gt;&gt; print(importer.has_errors())\nTrue\n&gt;&gt;&gt; importer.import_file(Path('file2.krn'))   # file2.krn has no errors\n&gt;&gt;&gt; print(importer.has_errors())\nFalse\n</code></pre>"},{"location":"reference/#kernpy.util.Importer.import_file","title":"<code>import_file(file_path)</code>","text":"<p>Import the content from the importer to the file. Args:     file_path: The path to the file.</p> <p>Returns:</p> Type Description <code>Document</code> <p>Document - The document with the imported content.</p> <p>Examples:</p>"},{"location":"reference/#kernpy.util.Importer.import_file--create-the-importer-and-read-the-file","title":"Create the importer and read the file","text":"<pre><code>&gt;&gt;&gt; importer = Importer()\n&gt;&gt;&gt; importer.import_file('file.krn')\n</code></pre>"},{"location":"reference/#kernpy.util.Importer.import_string","title":"<code>import_string(text)</code>","text":"<pre><code>    Import the content from the content of the score in string format.\n\n    Args:\n        text: The content of the score in string format.\n\n    Returns:\n        Document - The document with the imported content.\n\n    Examples:\n        # Create the importer and read the file\n        &gt;&gt;&gt; importer = Importer()\n        &gt;&gt;&gt; importer.import_string(\"**kern\n</code></pre> <p>clefF4 c4 4d 4e 4f -\")             # Read the content from a file             &gt;&gt;&gt; with open('file.krn',  'r', newline='', encoding='utf-8', errors='ignore') as f: # We encourage you to use these open file options             &gt;&gt;&gt;     content = f.read()             &gt;&gt;&gt; importer.import_string(content)             &gt;&gt;&gt; document = importer.import_string(content)</p>"},{"location":"reference/#kernpy.util.KernTypeExporter","title":"<code>KernTypeExporter</code>","text":"<p>               Bases: <code>Enum</code></p> <p>Options for exporting a kern file.</p> Example"},{"location":"reference/#kernpy.util.KernTypeExporter--create-the-importer","title":"Create the importer","text":"<p>hi = Importer()</p>"},{"location":"reference/#kernpy.util.KernTypeExporter--read-the-file","title":"Read the file","text":"<p>document = hi.import_file('file.krn')</p>"},{"location":"reference/#kernpy.util.KernTypeExporter--export-the-file","title":"Export the file","text":"<p>options = ExportOptions(spine_types=['**kern'], token_categories=BEKERN_CATEGORIES, kernType=KernTypeExporter.normalizedKern) exporter = Exporter() exported = exporter.export_string(options)</p>"},{"location":"reference/#kernpy.util.create_fragments_from_directory","title":"<code>create_fragments_from_directory(input_directory, output_directory, log_file, check_file_extension=True, offset=0, verbose=1, num_processes=None, mean=DEFAULT_MEAN, std_dev=DEFAULT_STD_DEV, export_options=None)</code>","text":"<p>Create a bunch of little kern files from a directory of kern files.</p> <p>Parameters:</p> Name Type Description Default <code>export_options</code> <code>Optional[ExportOptions]</code> <p>The export options</p> <code>None</code> <code>log_file</code> <code>str</code> <p>The log file to store the results</p> required <code>input_directory</code> <code>str</code> <p>The input directory with the kern files</p> required <code>output_directory</code> <code>str</code> <p>The output directory where the fragments will be stored</p> required <code>check_file_extension</code> <code>bool</code> <p>If True, only files with the extension '.krn' will be processed.         If False, all files will be processed, it could be more time-consuming.</p> <code>True</code> <code>offset</code> <code>int</code> <p>The number of measures between fragments.            If offset is 1, and measure_length is 4, the fragments will be: 1-4, 2-5, 3-6, 4-7, ... If the offset is 2, and measure_length is 4, the fragments will be: 1-4, 3-6, 5-8, 7-10, ... If the offset is 4, and measure_length is 4, the fragments will be: 1-4, 5-8, 9-12, 13-16, ...</p> <code>0</code> <code>verbose</code> <code>int</code> <p>The verbosity level</p> <code>1</code> <code>num_processes</code> <code>int</code> <p>The number of processes to use for parallel processing.            If None, or num_processes &lt;= 1, the processing will be done in a single process.</p> <code>None</code> <code>mean</code> <code>float</code> <p>The mean of the normal distribution to generate the measure length of the new fragments</p> <code>DEFAULT_MEAN</code> <code>std_dev</code> <code>float</code> <p>The standard deviation of the normal distribution to generate the measure length of the new fragments</p> <code>DEFAULT_STD_DEV</code> <p>Returns:</p> Type Description <code>None</code> <p>None</p> <p>Examples:</p> <pre><code># Basic execution\n&gt;&gt;&gt; create_fragments_from_directory('input_directory', 'output_directory', log_file='log.txt')\n\n# Custom mean and std_dev\n&gt;&gt;&gt; create_fragments_from_directory('input_directory', 'output_directory', log_file='log.txt', mean=5.2, std_dev=0.8)\n\n# Parallel processing\n&gt;&gt;&gt; create_fragments_from_directory('input_directory', 'output_directory', log_file='log.txt', offset=4, verbose=1, num_processes=8)\n\n# Single process\n&gt;&gt;&gt; create_fragments_from_directory('input_directory', 'output_directory', log_file='log.txt', offset=4, verbose=1)\n</code></pre>"},{"location":"reference/#kernpy.util.create_fragments_from_kern","title":"<code>create_fragments_from_kern(input_kern_file, output_directory, measure_length, offset, log_file, verbose=1, num_processes=None, export_options=None)</code>","text":"<p>Create a bunch of little kern files from a single kern file.</p> <p>Parameters:</p> Name Type Description Default <code>log_file</code> <code>str</code> <p>The log file to store the results</p> required <code>input_kern_file</code> <code>object</code> <p>The input kern file</p> required <code>output_directory</code> <code>str</code> <p>The output directory where the fragments will be stored</p> required <code>measure_length</code> <code>int</code> <p>The number of measures of the fragments</p> required <code>offset</code> <code>int</code> <p>The number of measures between fragments.            If offset is 1, and measure_length is 4, the fragments will be: 1-4, 2-5, 3-6, 4-7, ... If the offset is 2, and measure_length is 4, the fragments will be: 1-4, 3-6, 5-8, 7-10, ... If the offset is 4, and measure_length is 4, the fragments will be: 1-4, 5-8, 9-12, 13-16, ...</p> required <code>verbose</code> <code>int</code> <p>The verbosity level</p> <code>1</code> <code>num_processes</code> <code>int</code> <p>The number of processes to use for parallel processing.            If None, or num_processes &lt;= 1, the processing will be done in a single process.</p> <code>None</code> <code>export_options(Optional[ExportOptions])</code> <p>The export options</p> required <p>Returns:     None</p> <p>Examples:</p>"},{"location":"reference/#kernpy.util.create_fragments_from_kern--basic-execution","title":"Basic execution","text":"<pre><code>&gt;&gt;&gt; create_fragments_from_kern('input.krn', 'output_directory', measure_length=4)\n</code></pre>"},{"location":"reference/#kernpy.util.create_fragments_from_kern--parallel-processing","title":"Parallel processing","text":"<pre><code>&gt;&gt;&gt; create_fragments_from_kern('input.krn', 'output_directory', measure_length=4, offset=4, log_file='log.txt', verbose=1, num_processes=8)\n&gt;&gt;&gt; create_fragments_from_kern('input.krn', 'output_directory', measure_length=4, offset=4, log_file='log.txt', verbose=1, num_processes=8)\n</code></pre>"},{"location":"reference/#kernpy.util.create_fragments_from_kern--single-process","title":"Single process","text":"<pre><code>&gt;&gt;&gt; create_fragments_from_kern('input.krn', 'output_directory', measure_length=4, offset=4, log_file='log.txt', verbose=1)\n&gt;&gt;&gt; create_fragments_from_kern('input.krn', 'output_directory', measure_length=4, offset=4, log_file='log.txt', verbose=1, num_processes=None)\n</code></pre>"},{"location":"reference/#kernpy.util.find_all_files","title":"<code>find_all_files(path, extension=None)</code>","text":"<p>Find all files with the given extension in the given directory. Args:     path (str): Path to the directory where the files are located.     extension (Optional[str]): Extension of the files to be found. If None, all files are returned.</p> <p>Returns (List[str]): List of paths to the found files.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; find_all_files('/kern_files', 'krn')\n...\n</code></pre> <pre><code>&gt;&gt;&gt; find_all_files('/files' )\n...\n</code></pre>"},{"location":"reference/#kernpy.util.read","title":"<code>read(path, strict=False)</code>","text":"<p>Read a Humdrum **kern file.</p> <p>Parameters:</p> Name Type Description Default <code>path</code> <code>Union[str, Path]</code> <p>File path to read</p> required <code>strict</code> <code>Optional[bool]</code> <p>If True, raise an error if the **kern file has any errors. Otherwise, return a list of errors.</p> <code>False</code> <p>Returns (Document, List[str]): Document object and list of error messages. Empty list if no errors.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; import kernpy as kp\n&gt;&gt;&gt; document, _ = kp.read('path/to/file.krn')\n</code></pre> <pre><code>&gt;&gt;&gt; document, errors = kp.read('path/to/file.krn')\n&gt;&gt;&gt; if len(errors) &gt; 0:\n&gt;&gt;&gt;     print(errors)\n['Error: Invalid **kern spine: 1', 'Error: Invalid **kern spine: 2']\n</code></pre>"},{"location":"reference/#kernpy.util.store","title":"<code>store(document, path, options)</code>","text":"<p>Store a Document object to a file.</p> <p>Parameters:</p> Name Type Description Default <code>document</code> <code>Document</code> <p>Document object to store</p> required <code>path</code> <code>Union[str, Path]</code> <p>File path to store</p> required <code>options</code> <code>ExportOptions</code> <p>Export options</p> required <p>Returns: None</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; import kernpy as kp\n&gt;&gt;&gt; document, errors = kp.read('path/to/file.krn')\n&gt;&gt;&gt; options = kp.ExportOptions()\n&gt;&gt;&gt; kp.store(document, 'path/to/store.krn', options)\n</code></pre>"},{"location":"get-started/tutorial/","title":"Tutorial: Learning <code>kernpy</code> in 5 minutes.","text":"<p>This is a short introduction to <code>kernpy</code>. It will guide you through the main concepts and show you how to use the package in a few minutes.</p> <p>When using <code>kernpy</code>, you should be familiar with the Humdrum **kern encodings. You can easily find information in:</p> <ul> <li>Verovio Humdrum Viewer</li> <li>Verovio Humdrum Viewer Documentation</li> </ul>"},{"location":"get-started/tutorial/#running-the-code","title":"Running the code","text":"<p><code>kernpy</code> is able to be run as a normal snippet of code or as a module by command line interface.</p>"},{"location":"get-started/tutorial/#we-will-import-kernpy-as-the-following-way","title":"We will import <code>kernpy</code> as the following way:","text":"<pre><code>import kernpy as kp\n</code></pre>"},{"location":"get-started/tutorial/#what-is-humdrum-kern","title":"What is Humdrum **kern?","text":"<p>First of all, let's see what a Humdrum **kern file looks like:</p> <pre><code>**kern  **text  **kern  **dynam **text\n*clefG2 *   *clefG2 *   *\n*M4/4   *   *   *   *\n=1  =1  =1  =1  =1\n4g  kern    4c  p   kern-\n4f  kern    4d  &lt;   -py\n4g  kern    4e  (   mo-\n4c  kern-   4f  (   -du-\n.   .   .   [   .\n=2  =2  =2  =2  =2\n2c  -py 2g  f   -le\n.   .   .   &gt;   .\n4B  kern    4f  )   is\n4A  kern-   4d  )   the\n=   =   =   =   =\n1G  -py 1c  ]   best\n==  ==  ==  ==  ==\n*-  *-  *-  *-  *-\n</code></pre> <p></p>"},{"location":"get-started/tutorial/#lets-code","title":"Let's code!","text":"<ul> <li>We can do some operations with the score.</li> </ul> <p>First of all, let's import the score:</p> <pre><code>import kernpy as kp\ndocument, errors = kp.read('/path/to/file.krn')\n</code></pre> <p>Let\u00b4s see what are the spines of the score:</p> <pre><code>import kernpy as kp\ndocument, _ = kp.read('/path/to/file.krn')\n\n# Get the spines\nkp.get_spine_types(document, spine_types=['**kern'])\nprint(document.tree)\n# &lt;kernpy.core.document.DocumentTree object at 0x7f8b3b3b3d30&gt;\n</code></pre> <p>Let's dive into the different ways to export the <code>Document</code>.</p> <pre><code>import kernpy as kp\n\n# Select your measures to export\nmiddle_measures_options = kp.ExportOptions(from_measure=4, to_measure=8)\n\n# Select your voices to export\nsaxophone_options = kp.ExportOptions(instruments=['saxophone'])\n\n# Select the token categories to export\ncore_options = kp.ExportOptions(token_categories=[kp.TokenCategory.CORE, kp.TokenCategory.BARLINES, kp.TokenCategory.SIGNATURES])\n\n# Select the token categories to export using the predefined categories\nbekern_options = kp.ExportOptions(token_categories=kp.BEKERN_CATEGORIES)\n\n# Select the encoding to export\nnormalized_kern_options = kp.ExportOptions(kern_type=kp.KernTypeExporter.normalizedKern)\n\n# Select a list of filters to export\nall_options = kp.ExportOptions(\n    kern_type=kp.KernTypeExporter.eKern,\n    instruments=['saxophone'],\n    from_measure=1,\n    to_measure=2,\n    token_categories=kp.BEKERN_CATEGORIES\n)\n</code></pre> <p>Using the <code>Document</code> object, we can export the score:</p> <pre><code>import kernpy as kp\ndocument, errors = kp.read('/path/to/file.krn')\noptions = kp.ExportOptions()\nkp.store(document, '/path/to/export/file.krn', options)\n</code></pre> <p>Or we can export the score as a string for further processing:</p> <pre><code>import kernpy as kp\ndocument, errors = kp.read('/path/to/file.krn')\noptions = kp.ExportOptions()\ncontent = kp.export(document, options)\n...  # you can use the content as you want\nprint(content)\n</code></pre> <p></p>"},{"location":"get-started/tutorial/#lets-use-low-level-functions","title":"Let's use low-level functions:","text":"<p>Load the file directly using the content of the file:   Examples:</p> <pre><code>import kernpy\n\nimporter = kernpy.Importer()\ndocument = importer.import_string('**kern\\n*clefG2\\n*M4/4\\n*met(c)\\n=1\\n4c\\n4d\\n4e\\n4f\\n=2\\n*M3/2\\n2g\\n2f\\n2d\\n=\\n*-')\nprint(document.get_metacomments())\n</code></pre> <p>Or load the file using the path to the file:</p> <pre><code>import kernpy\n\nimporter = kernpy.Importer()\ndocument = importer.import_file('path/to/file.krn')\nprint(document.get_metacomments())\n</code></pre> <p>Then you can access to the score attributes:</p> <pre><code>print(type(document))\n# &lt;class 'kernpy.core.document.Document'&gt;\n\nprint(document.tree)\n# &lt;kernpy.core.document.DocumentTree object at 0x7f8b3b3b3d30&gt;\n\nprint(document.voices)\n# ['saxophone', 'clarinet', 'piano']\n</code></pre> <p>Now, you can export the score using the <code>ExportOptions</code> class:</p> <pre><code>export_options = kernpy.ExportOptions()\nexporter = kernpy.Exporter()\ncontent = exporter.export_string(document, export_options)\nprint(content)\n</code></pre> <p>Save the score to a file:</p> <pre><code>export_options = kernpy.ExportOptions()\nexporter = kernpy.Exporter()\ncontent = exporter.export_string(document, export_options)\nwith open('path/to/file.krn', 'w') as file:\n    file.write(content)\n</code></pre> Let's filter the export options: <p>Select the voices to export:</p> <pre><code>export_options = kernpy.ExportOptions(voices=['saxophone'])\nexporter = kernpy.Exporter()\ncontent = exporter.export_string(document, export_options)\nprint(content)\n</code></pre> <p>Select the measures to export:</p> <pre><code>export_options = kernpy.ExportOptions(from_measure=1, to_measure=2)\nexporter = kernpy.Exporter()\ncontent = exporter.export_string(document, export_options)\nprint(content)\n</code></pre> <p>Select the token categories to export: Let's see the <code>kernpy.TokenCategory</code> enum class to choose the categories:</p> <pre><code>export_options = kernpy.ExportOptions(token_categories=[\n    kernpy.TokenCategory.STRUCTURAL, \n    kernpy.TokenCategory.CORE, \n    kernpy.TokenCategory.EMPTY, \n    kernpy.TokenCategory.SIGNATURES,\n    kernpy.TokenCategory.BARLINES,\n])\nexporter = kernpy.Exporter()\ncontent = exporter.export_string(document, export_options)\nprint(content)\n</code></pre> <p>Actually, you can use the predefined categories:</p> <pre><code>export_options = kernpy.ExportOptions(token_categories=kernpy.BEKERN_CATEGORIES)\nexporter = kernpy.Exporter()\ncontent = exporter.export_string(document, export_options)\nprint(content)\n</code></pre> <p>Select the encoding to export:</p> <pre><code>export_options = kernpy.ExportOptions(kern_type=kernpy.KernTypeExporter.normalizedKern)\nexporter = kernpy.Exporter()\ncontent = exporter.export_string(document, export_options)\nprint(content)\n</code></pre> <p>Select a list of filters to export:</p> <pre><code>export_options = kernpy.ExportOptions(\n    kern_type=kernpy.KernTypeExporter.eKern,\n    instruments=['saxophone'],\n    from_measure=1,\n    to_measure=2\n    token_categories=kernpy.BEKERN_CATEGORIES\n)\n</code></pre> Let's see the score in a graphical representation: <p>Show the graph representation of the score: Use <code>Graphviz</code> to show the score in a graphical representation.</p> <pre><code>import kernpy\n\nimporter = kernpy.Importer()\ndocument = importer.import_string('**kern\\n*clefG2\\n*M4/4\\n*met(c)\\n=1\\n4c\\n4d\\n4e\\n4f\\n=2\\n*M3/2\\n2g\\n2f\\n2d\\n=\\n*-')\ndot_exporter = kernpy.GraphvizExporter()\ndot_exporter.export_to_dot(document.tree, '/tmp/minimal.dot')\n</code></pre> <p>You can use Graphviz Dot Online editors to see the graphical representation of the score: - Graphviz Online</p>  Also, you can run the code as a module by command line interface.  <pre><code>python -m kernpy --help\n</code></pre>"},{"location":"get-started/tutorial/#next-steps","title":"Next steps","text":"<p>Congratulations! You have learned the basics of <code>kernpy</code>. Now you can start using the package in your projects.</p> <p>Go to the API reference to learn more about the <code>kernpy</code> API.</p>"}]}